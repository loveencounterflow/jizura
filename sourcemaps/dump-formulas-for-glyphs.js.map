{"version":3,"sources":["dump-formulas-for-glyphs.coffee"],"names":[],"mappings":"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","file":"dump-formulas-for-glyphs.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/dump-formulas'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\n# BYTEWISE                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\nASYNC                     = require 'async'\nIDLX                      = require 'idlx'\nXNCHR                     = require './XNCHR'\n#...........................................................................................................\n# new_db                    = require 'level'\nHOLLERITH                 = require 'hollerith'\n# LRSL                      = require 'longest-repeating-sublist'\n\n# XNCHR.chrs_from_text \"𢐨𢐮𢰅𣹎𤑜𤑨𤑵𤙗𥋡𥽮𦭲𦳪𦽙𧙭𧛴𧩿𨂳𩱆𩱌𩱍𩱎𩱒𩱓𩱖𩱗𩱚𩱜𩱞𩱟𩱠𩱡𩱣𩱤𩱥𩱦𩱧𩱨𩱪𩱫𩱭𩱮𩱯𩱰𩱱𩱲𩱳𩱶𩱷𪾞𫙆𫙇\"\n\n#-----------------------------------------------------------------------------------------------------------\n@dump_formulas = ( S ) ->\n  #.........................................................................................................\n  S.db_route          = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  S.db                = HOLLERITH.new_db S.db_route, create: no\n  help \"using DB at #{S.db[ '%self' ][ 'location' ]}\"\n  input               = D.create_throughstream()\n  input.pipe $transform S\n  #.........................................................................................................\n  input_from_pipe = not process.stdin.isTTY\n  #.........................................................................................................\n  if input_from_pipe\n    if S.glyphs.length > 0\n      warn \"unable to accept glyphs from both stdin and option -g / --glyphs\"\n      process.exit 1\n    process.stdin\n      .pipe D.$split()\n      .pipe $ ( line, send ) ->\n        for chr in XNCHR.chrs_from_text line\n          send chr\n      .pipe input\n  else\n    for glyph in S.glyphs\n      input.write glyph\n    input.end()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$query = ( S ) =>\n  return D.remit_async_spread ( glyph, send ) =>\n    query   = { prefix: [ 'spo', glyph, 'formula' ], }\n    # query = { prefix: [ 'spo', glyph, 'guide/lineup/uchr' ], }\n    input = ( HOLLERITH.create_phrasestream S.db, query )\n    input\n      .pipe $ ( phrase, _, end ) =>\n        if phrase?\n          [ ..., formulas, ] = phrase\n          send [ glyph, formula, idx, ] for formula, idx in formulas\n        if end?\n          send.done()\n\n#-----------------------------------------------------------------------------------------------------------\n$add_fncr = ( S ) =>\n  return $ ( [ glyph, formula, idx, ], send ) =>\n    fncr = XNCHR.as_fncr glyph\n    send [ glyph, fncr, formula, idx, ]\n\n#-----------------------------------------------------------------------------------------------------------\n$normalize_glyph = ( S ) =>\n  return $ ( glyph, send ) =>\n    ### TAINT doesn't work with Gaiji NCRs like `&gt#x4cef;` ###\n    rsg   = XNCHR.as_rsg glyph\n    cid   = XNCHR.as_cid glyph\n    csg   = if rsg in [ 'u-pua', 'jzr-fig', ] then 'jzr' else 'u'\n    glyph = XNCHR.chr_from_cid_and_csg cid, csg if csg isnt 'u'\n    send glyph\n\n#-----------------------------------------------------------------------------------------------------------\n$unique = ( S ) =>\n  seen_glyphs = new Set()\n  return $ ( glyph, send ) =>\n    return if seen_glyphs.has glyph\n    seen_glyphs.add glyph\n    send glyph\n\n#-----------------------------------------------------------------------------------------------------------\n$sort = ( S ) =>\n  return D.$pass_through() unless S.sort\n  return D.$sort ( a, b ) =>\n    [ a_glyph, a_fncr, a_formula, a_idx, ] = a\n    [ b_glyph, b_fncr, b_formula, b_idx, ] = b\n    a_cid = XNCHR.as_cid a_glyph\n    b_cid = XNCHR.as_cid b_glyph\n    return +1 if a_cid > b_cid\n    return -1 if a_cid < b_cid\n    return +1 if a_idx > b_idx\n    return -1 if a_idx < b_idx\n    return  0\n\n#-----------------------------------------------------------------------------------------------------------\n$reorder = ( S ) =>\n  return $ ( [ glyph, fncr, formula, idx, ], send ) =>\n    # glyph = XNCHR.as_chr glyph\n    send [ fncr, glyph, formula, ]\n\n#-----------------------------------------------------------------------------------------------------------\n$show = ( S ) =>\n  return D.$observe ( fields ) =>\n    [ fncr, glyph, formula, ] = fields\n    #.......................................................................................................\n    if S.noidcs then  ics = IDLX.find_all_non_operators formula\n    else              ics = XNCHR.chrs_from_text formula\n    #.......................................................................................................\n    if S.uchrs\n      glyph = XNCHR.as_uchr glyph\n      ics   = ( ( XNCHR.as_uchr ic ) for ic in ics )\n    #.......................................................................................................\n    formula = ics.join ''\n    formula = '\\ue024' if formula.length is 0\n    #.......................................................................................................\n    if S.colors\n      echo ( CND.grey fncr ), ( CND.gold glyph ), ( CND.lime formula )\n    else\n      echo [ fncr, glyph, formula, ].join '\\t'\n\n#-----------------------------------------------------------------------------------------------------------\n$transform = ( S ) =>\n  return D.combine [\n    $normalize_glyph            S\n    $unique                     S\n    $query                      S\n    $add_fncr                   S\n    $sort                       S\n    $reorder                    S\n    $show                       S\n    D.$on_end => S.handler null if S.handler?\n    ]\n\n\n"]}