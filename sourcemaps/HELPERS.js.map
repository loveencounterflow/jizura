{"version":3,"sources":["HELPERS.coffee"],"names":[],"mappings":"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","file":"HELPERS.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/HELPERS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nXNCHR                     = require './XNCHR'\nASYNC                     = require 'async'\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nMarkdown_parser           = require 'markdown-it'\nHtml_parser               = ( require 'htmlparser2' ).Parser\nnew_md_inline_plugin      = require 'markdown-it-regexp'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@provide_tmp_folder = ( options ) ->\n  njs_fs.mkdirSync options[ 'tmp-home' ] unless njs_fs.existsSync options[ 'tmp-home' ]\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @tmp_locator_for_extension = ( layout_info, extension ) ->\n#   tmp_home            = layout_info[ 'tmp-home' ]\n#   tex_locator         = layout_info[ 'tex-locator' ]\n#   ### TAINT should extension be sanitized? maybe just check for /^\\.?[-a-z0-9]$/? ###\n#   throw new Error \"need non-empty extension\" unless extension.length > 0\n#   extension           = \".#{extension}\" unless ( /^\\./ ).test extension\n#   return njs_path.join CND.swap_extension tex_locator, extension\n\n#-----------------------------------------------------------------------------------------------------------\n@new_layout_info = ( options, source_route ) ->\n  pdf_command           = options[ 'pdf-command' ]\n  tmp_home              = options[ 'tmp-home' ]\n  source_home           = njs_path.resolve process.cwd(), source_route\n  source_name           = options[ 'main' ][ 'filename' ]\n  source_locator        = njs_path.join source_home, source_name\n  #.........................................................................................................\n  throw new Error \"unable to locate #{source_home}\"     unless njs_fs.existsSync source_home\n  throw new Error \"not a directory: #{source_home}\"     unless ( njs_fs.statSync source_home ).isDirectory()\n  throw new Error \"unable to locate #{source_locator}\"  unless njs_fs.existsSync source_locator\n  throw new Error \"not a file: #{source_locator}\"       unless ( njs_fs.statSync source_locator ).isFile()\n  #.........................................................................................................\n  # tex_locator           = njs_path.join tmp_home, CND.swap_extension source_name, '.tex'\n  aux_locator           = njs_path.join tmp_home, CND.swap_extension source_name, '.aux'\n  pdf_source_locator    = njs_path.join tmp_home, CND.swap_extension source_name, '.pdf'\n  pdf_target_locator    = njs_path.join source_home, CND.swap_extension source_name, '.pdf'\n  tex_inputs_home       = njs_path.resolve __dirname, '..', 'tex-inputs'\n  master_name           = options[ 'master' ][ 'filename' ]\n  master_ext            = njs_path.extname master_name\n  master_name_bare      = njs_path.basename master_name, master_ext\n  master_locator        = njs_path.join source_home, master_name\n  master_locator_bare   = njs_path.join source_home, master_name_bare\n  #.........................................................................................................\n  R =\n    'aux-locator':                aux_locator\n    'latex-run-count':            0\n    'master-locator':             master_locator\n    'master-locator.bare':        master_locator_bare\n    'master-name':                master_name\n    'pdf-command':                pdf_command\n    'pdf-source-locator':         pdf_source_locator\n    'pdf-target-locator':         pdf_target_locator\n    'source-home':                source_home\n    'source-locator':             source_locator\n    'source-name':                source_name\n    'source-route':               source_route\n    'tex-inputs-home':            tex_inputs_home\n    'tex-locator':                tex_locator\n    'tmp-home':                   tmp_home\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@write_pdf = ( layout_info, handler ) ->\n  #.........................................................................................................\n  pdf_command         = layout_info[ 'pdf-command'          ]\n  tmp_home            = layout_info[ 'tmp-home'             ]\n  tex_locator         = layout_info[ 'tex-locator'          ]\n  aux_locator         = layout_info[ 'aux-locator'          ]\n  pdf_source_locator  = layout_info[ 'pdf-source-locator'   ]\n  pdf_target_locator  = layout_info[ 'pdf-target-locator'   ]\n  last_digest         = null\n  last_digest         = CND.id_from_route aux_locator if njs_fs.existsSync aux_locator\n  digest              = null\n  count               = 0\n  #.........................................................................................................\n  pdf_from_tex = ( next ) =>\n    count += 1\n    urge \"run ##{count} #{pdf_command}\"\n    whisper \"$1: #{tmp_home}\"\n    whisper \"$2: #{tex_locator}\"\n    CND.spawn pdf_command, [ tmp_home, tex_locator, ], ( error, data ) =>\n      error = undefined if error is 0\n      if error?\n        alert error\n        return handler error\n      digest = CND.id_from_route aux_locator\n      if digest is last_digest\n        echo ( CND.grey badge ), CND.lime \"done.\"\n        layout_info[ 'latex-run-count' ] = count\n        ### TAINT move pdf to layout_info[ 'source-home' ] ###\n        handler null\n      else\n        last_digest = digest\n        next()\n  #.........................................................................................................\n  ASYNC.forever pdf_from_tex\n\n\n#===========================================================================================================\n# TYPO\n#-----------------------------------------------------------------------------------------------------------\n@TYPO   = {}\n@_meta  = Symbol 'meta'\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.set_meta = ( x, name, value = true ) ->\n  target          = x[ @_meta ]?= {}\n  target[ name ]  = value\n  return x\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.get_meta = ( x, name = null ) ->\n  R = x[ @_meta ]\n  R = R[ name ] if name\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._tex_escape_replacements = [\n  [ ///  \\\\         ///g,  '\\\\textbackslash{}',     ]\n  [ ///  \\{         ///g,  '\\\\{',                   ]\n  [ ///  \\}         ///g,  '\\\\}',                   ]\n  [ ///  \\$         ///g,  '\\\\$',                   ]\n  [ ///  \\#         ///g,  '\\\\#',                   ]\n  [ ///  %          ///g,  '\\\\%',                   ]\n  [ ///  _          ///g,  '\\\\_',                   ]\n  [ ///  \\^         ///g,  '\\\\textasciicircum{}',   ]\n  [ ///  ~          ///g,  '\\\\textasciitilde{}',    ]\n  [ ///  ‰          ///g, '\\\\permille{}',           ]\n  [ ///  &amp;      ///g, '\\\\&',                    ]\n  [ ///  &quot;     ///g, '\"',                      ]\n  [ ///  '([^\\s]+)’ ///g, '‘$1’',                   ]\n  [ ///  &   ///g,  '\\\\&',                  ]\n  # [ ///  (^|[^\\\\])& ///g, '$1\\\\&',                    ]\n  # [ ///  ([^\\\\])&   ///g,  '$1\\\\&',                  ]\n  # '`'   # these two are very hard to catch when TeX's character handling is switched on\n  # \"'\"   #\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.escape_for_tex = ( text ) ->\n  R = text\n  for [ pattern, replacement, ] in @_tex_escape_replacements\n    R = R.replace pattern, replacement\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @TYPO.$resolve_html_entities = ->\n#   return $ ( event, send ) =>\n#     [ type, tail..., ] = event\n#     if type is 'text'\n#       send [ 'text', ( @resolve_html_entities tail[ 0 ] ), ]\n#     else\n#       send event\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$fix_typography_for_tex = ->\n  return $ ( event, send ) =>\n    if @isa event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      text = @fix_typography_for_tex text\n      send [ type, name, text, meta, ]\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.resolve_html_entities = ( text ) ->\n  R = text\n  R = R.replace /&lt;/g,    '<'\n  R = R.replace /&gt;/g,    '>'\n  R = R.replace /&quot;/g,  '\"'\n  R = R.replace /&amp;/g,   '&'\n  R = R.replace /&[^a-z0-9]+;/g, ( match ) ->\n    warn \"unable to resolve HTML entity #{match}\"\n    return match\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.fix_typography_for_tex = ( text, settings ) ->\n  ### An improved version of `XELATEX.tag_from_chr` ###\n  settings             ?= options\n  glyph_styles          = settings[ 'tex' ]?[ 'glyph-styles'             ] ? {}\n  tex_command_by_rsgs   = settings[ 'tex' ]?[ 'tex-command-by-rsgs'      ]\n  last_command          = null\n  R                     = []\n  stretch               = []\n  last_rsg              = null\n  #.........................................................................................................\n  unless tex_command_by_rsgs?\n    throw new Error \"need setting 'tex-command-by-rsgs'\"\n  #.........................................................................................................\n  advance = =>\n    if stretch.length > 0\n      # debug '©zDJqU', last_command, JSON.stringify stretch.join '.'\n      if last_command in [ null, 'latin', ]\n        R.push @escape_for_tex stretch.join ''\n      else\n        R.push stretch.join ''\n        R.push '}'\n    stretch.length = 0\n    return null\n  #.........................................................................................................\n  for chr in XNCHR.chrs_from_text text\n    chr_info    = XNCHR.analyze chr\n    { chr\n      uchr\n      fncr\n      rsg   }   = chr_info\n    #.......................................................................................................\n    switch rsg\n      when 'jzr-fig'  then chr = uchr\n      when 'u-pua'    then rsg = 'jzr-fig'\n    #.......................................................................................................\n    if ( replacement = glyph_styles[ chr ] )?\n      advance()\n      R.push replacement\n      last_command = null\n      continue\n    #.......................................................................................................\n    unless ( command = tex_command_by_rsgs[ rsg ] )?\n      warn \"unknown RSG #{rpr rsg}: #{fncr} #{chr}\"\n      advance()\n      stretch.push chr\n      continue\n    #.......................................................................................................\n    if last_command isnt command\n      advance()\n      last_command = command\n      stretch.push \"\\\\#{command}{\" unless command is 'latin'\n    #.......................................................................................................\n    stretch.push chr\n  #.........................................................................................................\n  advance()\n  return R.join ''\n\n\n#===========================================================================================================\n# MD / HTML PARSING\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._new_markdown_parser = ->\n  #.........................................................................................................\n  ### https://markdown-it.github.io/markdown-it/#MarkdownIt.new ###\n  # feature_set = 'commonmark'\n  feature_set = 'zero'\n  #.........................................................................................................\n  settings    =\n    html:           yes,            # Enable HTML tags in source\n    xhtmlOut:       no,             # Use '/' to close single tags (<br />)\n    breaks:         no,             # Convert '\\n' in paragraphs into <br>\n    langPrefix:     'language-',    # CSS language prefix for fenced blocks\n    linkify:        yes,            # Autoconvert URL-like text to links\n    typographer:    yes,\n    quotes:         '“”‘’'\n    # quotes:         '\"\"\\'\\''\n    # quotes:         '\"\"`\\''\n    # quotes:         [ '<<', '>>', '!!!', '???', ]\n    # quotes:   ['«\\xa0', '\\xa0»', '‹\\xa0', '\\xa0›'] # French\n  #.........................................................................................................\n  R = new Markdown_parser feature_set, settings\n  # R = new Markdown_parser settings\n  R\n    .enable 'text'\n    # .enable 'newline'\n    .enable 'escape'\n    .enable 'backticks'\n    .enable 'strikethrough'\n    .enable 'emphasis'\n    .enable 'link'\n    .enable 'image'\n    .enable 'autolink'\n    .enable 'html_inline'\n    .enable 'entity'\n    # .enable 'code'\n    .enable 'fence'\n    .enable 'blockquote'\n    .enable 'hr'\n    .enable 'list'\n    .enable 'reference'\n    .enable 'heading'\n    .enable 'lheading'\n    .enable 'html_block'\n    .enable 'table'\n    .enable 'paragraph'\n    .enable 'normalize'\n    .enable 'block'\n    .enable 'inline'\n    .enable 'linkify'\n    .enable 'replacements'\n    .enable 'smartquotes'\n  #.......................................................................................................\n  R.use require 'markdown-it-footnote'\n  # R.use require 'markdown-it-mark'\n  # R.use require 'markdown-it-sub'\n  # R.use require 'markdown-it-sup'\n  # #.......................................................................................................\n  # ### sample plugin ###\n  # user_pattern  = /@(\\w+)/\n  # user_handler  = ( match, utils ) ->\n  #   url = 'http://example.org/u/' + match[ 1 ]\n  #   return '<a href=\"' + utils.escape(url) + '\">' + utils.escape(match[1]) + '</a>'\n  # user_plugin = new_md_inline_plugin user_pattern, user_handler\n  # R.use user_plugin\n  #.......................................................................................................\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @TYPO._new_html_parser = ( stream ) ->\n#   ### https://github.com/fb55/htmlparser2/wiki/Parser-options ###\n#   settings =\n#     xmlMode:                 no   # Indicates whether special tags (<script> and <style>) should get special\n#                                   # treatment and if \"empty\" tags (eg. <br>) can have children. If false,\n#                                   # the content of special tags will be text only.\n#                                   # For feeds and other XML content (documents that don't consist of HTML),\n#                                   # set this to true. Default: false.\n#     decodeEntities:          no   # If set to true, entities within the document will be decoded. Defaults\n#                                   # to false.\n#     lowerCaseTags:           no   # If set to true, all tags will be lowercased. If xmlMode is disabled,\n#                                   # this defaults to true.\n#     lowerCaseAttributeNames: no   # If set to true, all attribute names will be lowercased. This has\n#                                   # noticeable impact on speed, so it defaults to false.\n#     recognizeCDATA:          yes  # If set to true, CDATA sections will be recognized as text even if the\n#                                   # xmlMode option is not enabled. NOTE: If xmlMode is set to true then\n#                                   # CDATA sections will always be recognized as text.\n#     recognizeSelfClosing:    yes  # If set to true, self-closing tags will trigger the onclosetag event even\n#                                   # if xmlMode is not set to true. NOTE: If xmlMode is set to true then\n#                                   # self-closing tags will always be recognized.\n#   #.........................................................................................................\n#   handlers =\n#     onopentag:  ( name, attributes )  -> stream.write [ 'open-tag',  name, attributes, ]\n#     ontext:     ( text )              -> stream.write [ 'text',      text, ]\n#     onclosetag: ( name )              -> stream.write [ 'close-tag', name, ]\n#     onerror:    ( error )             -> stream.error error\n#     oncomment:  ( text )              -> stream.write [ 'comment',   text, ]\n#     onend:                            -> stream.write [ 'end', ]; stream.end()\n#     # oncdatastart:            ( P... ) -> debug 'cdatastart           ', P  # 0\n#     # oncdataend:              ( P... ) -> debug 'cdataend             ', P  # 0\n#     # onprocessinginstruction: ( P... ) -> debug 'processinginstruction', P  # 2\n#   #.........................................................................................................\n#   return new Html_parser handlers, settings\n\n# #-----------------------------------------------------------------------------------------------------------\n# @TYPO._preprocess_regions = ( md_source ) ->\n#   opening_pattern   = /(\\n|^)@@@(\\S.+)(\\n|$)/g\n#   closing_pattern   = /(\\n|^)@@@\\s*(\\n|$)/g\n#   md_source         = md_source.replace opening_pattern, \"$1<mkts-mark x-role='start-region' x-name='$2'></mkts-mark>$3\"\n#   md_source         = md_source.replace closing_pattern, \"$1<mkts-mark x-role='end-region'></mkts-mark>$2\"\n#   return md_source\n\n# #-----------------------------------------------------------------------------------------------------------\n# @TYPO._preprocess_commands = ( md_source ) ->\n#   pattern     = /(\\n|^)∆∆∆(\\S.+)(\\n|$)/g\n#   md_source   = md_source.replace pattern, \"$1<mkts-mark x-role='command' x-name='$2'></mkts-mark>$3\"\n#   return md_source\n\n# #-----------------------------------------------------------------------------------------------------------\n# @TYPO._$remove_superfluous_tags = ->\n#   skip_next_text            = no\n#   skip_next_closing_anchor  = no\n#   skip_next_closing_hr      = no\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     [ type, tag_name, attributes, ] = event\n#     #.......................................................................................................\n#     if type is 'text'\n#       if skip_next_text\n#         skip_next_text = no\n#         return\n#     #.......................................................................................................\n#     else if type is 'close-tag'\n#       return if tag_name is 'mkts-mark'\n#       if skip_next_closing_anchor and tag_name is 'a'\n#         skip_next_closing_anchor = no\n#         return\n#       if skip_next_closing_hr and tag_name is 'hr'\n#         skip_next_closing_hr = no\n#         return\n#     #.......................................................................................................\n#     else if type is 'open-tag'\n#       if tag_name is 'a' and attributes[ 'class' ] is 'footnote-backref'\n#         skip_next_text            = yes\n#         skip_next_closing_anchor  = yes\n#         return\n#       if tag_name is 'hr' and attributes[ 'class' ] is 'footnotes-sep'\n#         skip_next_closing_hr      = yes\n#         return\n#     #.......................................................................................................\n#     send event\n\n# # #-----------------------------------------------------------------------------------------------------------\n# # @TYPO._$collect_footnotes = =>\n# #   collector         = []\n# #   within_footnotes  = no\n# #   #.........................................................................................................\n# #   return $ ( event, send ) =>\n# #     [ type, tag_name, attributes, ] = event\n# #     if type is 'open-tag'\n# #       if ( tag_name is 'section' ) and ( attributes[ 'class' ] is 'footnotes' )\n# #         within_footnotes = yes\n# #         return\n# #     else if type is 'close-tag'\n# #       if within_footnotes and tag_name is 'section'\n# #         within_footnotes = no\n# #         return\n# #     send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @TYPO._$add_regions = ->\n#   region_stack              = []\n#   #.........................................................................................................\n#   return $ ( event, send, end ) =>\n#     #.......................................................................................................\n#     if event?\n#       [ type, tag_name, attributes, ] = event\n#       #.....................................................................................................\n#       if ( type is 'open-tag' )\n#         if ( tag_name is 'mkts-mark' ) and ( attributes[ 'x-role' ] is 'start-region' )\n#           region_name = attributes[ 'x-name' ]\n#           region_stack.push region_name\n#           send [ 'start-region', region_name, ]\n#         else if ( tag_name is 'mkts-mark' ) and ( attributes[ 'x-role' ] is 'end-region' )\n#           if region_stack.length > 0\n#             send [ 'end-region', region_stack.pop(), ]\n#           else\n#             warn \"ignoring end-region\"\n#         else\n#           send event\n#       #...................................................................................................\n#       else\n#         send event\n#     #.......................................................................................................\n#     if end?\n#       if region_stack.length > 0\n#         warn \"auto-closing regions: #{rpr region_stack.join ', '}\"\n#         send [ 'end-region', region_stack.pop(), ] while region_stack.length > 0\n#       end()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @TYPO._$add_commands = ->\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     [ type, tag_name, attributes, ] = event\n#     #.....................................................................................................\n#     if ( type is 'open-tag' )\n#       if ( tag_name is 'mkts-mark' ) and ( attributes[ 'x-role' ] is 'command' )\n#         command = attributes[ 'x-name' ]\n#         send [ 'command', command, ]\n#       else\n#         send event\n#     #...................................................................................................\n#     else\n#       send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @TYPO._$remove_block_tags_from_keeplines = =>\n#   within_keeplines = no\n#   #.........................................................................................................\n#   return $ ( event, send ) =>\n#     [ type, tag, tail..., ] = event\n#     #.......................................................................................................\n#     if type is 'start-region' and tag is 'keeplines'\n#       within_keeplines = yes\n#       return send event\n#     #.......................................................................................................\n#     if type is 'end-region' and tag is 'keeplines'\n#       within_keeplines = no\n#       return send event\n#     #.......................................................................................................\n#     if within_keeplines\n#       if type in [ 'open-tag', 'close-tag', ]\n#         ###TAINT apply to other block-level tags? ###\n#         send event unless tag is 'p'\n#       else\n#         send event\n#     #.......................................................................................................\n#     else\n#       send event\n\n# #-----------------------------------------------------------------------------------------------------------\n# @TYPO._$consolidate_texts = =>\n#   collector = []\n#   _send     = null\n#   #.........................................................................................................\n#   flush = ->\n#     if collector.length > 0\n#       text  = collector.join ''\n#       # text  = text.replace /^\\n+/, ''\n#       # text  = text.replace /\\n+$/, ''\n#       _send [ 'text', text, ] if text.length > 0\n#       collector.length = 0\n#       return null\n#   #.........................................................................................................\n#   return $ ( event, send, end ) =>\n#     _send = send\n#     if event?\n#       [ type, text, ] = event\n#       if type is 'text'\n#         collector.push text\n#       else\n#         flush()\n#         send event\n#     if end?\n#       flush()\n#       end()\n\n###\n###\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$flatten_tokens = ->\n  return $ ( token, send ) ->\n    switch ( type = token[ 'type' ] )\n      when 'inline' then send sub_token for sub_token in token[ 'children' ]\n      else send token\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$rewrite_markdownit_tokens = ->\n  unknown_tokens = []\n  return $ ( token, send, end ) =>\n    if token?\n      meta =\n        within_text_literal:    no\n        # within_keep_lines:      no\n        # within_single_column:   no\n      switch ( type = token[ 'type' ] )\n        # blocks\n        when 'heading_open'       then send [ '[', token[ 'tag' ],  null,               meta, ]\n        when 'heading_close'      then send [ ']', token[ 'tag' ],  null,               meta, ]\n        when 'paragraph_open'     then send [ '[', 'p',             null,               meta, ]\n        when 'paragraph_close'    then send [ ']', 'p',             null,               meta, ]\n        when 'list_item_open'     then send [ '[', 'li',            null,               meta, ]\n        when 'list_item_close'    then send [ ']', 'li',            null,               meta, ]\n        # inlines\n        when 'strong_open'        then send [ '(', 'strong',        null,               meta, ]\n        when 'strong_close'       then send [ ')', 'strong',        null,               meta, ]\n        when 'em_open'            then send [ '(', 'em',            null,               meta, ]\n        when 'em_close'           then send [ ')', 'em',            null,               meta, ]\n        # singles\n        when 'text'               then send [ '.', 'text',          token[ 'content' ], meta, ]\n        when 'hr'                 then send [ '.', 'hr',            token[ 'markup' ],  meta, ]\n        # specials\n        when 'code_inline'\n          send [ '(', 'code', null,               ( @_copy meta ), ]\n          send [ '.', 'text', token[ 'content' ], ( @_copy meta, within_text_literal: yes, ), ]\n          send [ ')', 'code', null,               ( @_copy meta ), ]\n        else\n          send [ '?', token[ 'tag' ], token[ 'content' ], meta, ]\n          unknown_tokens.push type unless type in unknown_tokens\n    if end?\n      if unknown_tokens.length > 0\n        warn \"unknown tokens: #{unknown_tokens.sort().join ', '}\"\n      end()\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$preprocess_regions = ->\n  opening_pattern   = /^@@@(\\S.+)(\\n|$)/\n  closing_pattern   = /^@@@\\s*(\\n|$)/\n  collector         = []\n  region_stack      = []\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    #.......................................................................................................\n    if event?\n      [ type, name, text, meta, ] = event\n      if ( not meta.within_text_literal ) and ( @isa event, '.', 'text' )\n        lines = @_split_lines_with_nl text\n        #...................................................................................................\n        for line in lines\n          if ( match = line.match opening_pattern )?\n            @_flush_text_collector send, collector, ( @_copy meta )\n            region_name = match[ 1 ]\n            region_stack.push region_name\n            send [ '{', region_name, null, ( @_copy meta ), ]\n          else if ( match = line.match closing_pattern )?\n            @_flush_text_collector send, collector, ( @_copy meta )\n            if region_stack.length > 0\n              send [ '}', region_stack.pop(), null, ( @_copy meta ), ]\n            else\n              warn \"ignoring end-region\"\n          else\n            collector.push line\n        #...................................................................................................\n        @_flush_text_collector send, collector, ( @_copy meta )\n      #.....................................................................................................\n      else\n        send event\n    #.......................................................................................................\n    if end?\n      if region_stack.length > 0\n        warn \"auto-closing regions: #{rpr region_stack.join ', '}\"\n        send [ '}', region_stack.pop(), null, ( @_copy meta, block: true ), ] while region_stack.length > 0\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$preprocess_commands = ->\n  pattern   = /^∆∆∆(\\S.+)(\\n|$)/\n  collector = []\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    return send event unless ( type is '.' ) and ( name is 'text' )\n    lines = @_split_lines_with_nl text\n    #.......................................................................................................\n    for line in lines\n      if ( match = line.match pattern )?\n        @_flush_text_collector send, collector, ( @_copy meta )\n        send [ '∆', match[ 1 ], null, ( @_copy meta ), ]\n      else\n        collector.push line\n    #.......................................................................................................\n    @_flush_text_collector send, collector, ( @_copy meta )\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.isa = ( event, type, name ) ->\n  switch type_of_type = CND.type_of type\n    when 'text' then return false unless event[ 0 ] is type\n    when 'list' then return false unless event[ 0 ] in type\n    else throw new Error \"expected text or list, got a #{type_of_type}\"\n  switch type_of_name = CND.type_of name\n    when 'text' then return false unless event[ 1 ] is name\n    when 'list' then return false unless event[ 1 ] in name\n    else throw new Error \"expected text or list, got a #{type_of_name}\"\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._copy = ( meta, overwrites ) ->\n  R = {}\n  R[ name ] = value for name, value of meta\n  R[ name ] = value for name, value of overwrites if overwrites?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._split_lines_with_nl = ( text ) -> ( line for line in text.split /(.*\\n)/ when line.length > 0 )\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._flush_text_collector = ( send, collector, meta ) ->\n  if collector.length > 0\n    send [ '.', 'text', ( collector.join '' ), meta, ]\n    collector.length = 0\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$add_lookahead = ->\n  previous_event = null\n  return $ ( event, send, end ) ->\n    if event?\n      # debug '©t9r7W', event\n      if previous_event?\n        previous_event[ 3 ][ 'ends-block' ] = event[ 3 ][ 'block' ]\n        send previous_event\n      previous_event = event\n    if end?\n      previous_event[ 3 ][ 'ends-block' ] = no\n      send previous_event\n      end()\n    return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @TYPO.$remove_superfluous_tags = ->\n#   return $ ( event, send ) ->\n#     [ type, name, text, meta, ] = event\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$show_mktsmd_events = ->\n  unknown_events    = []\n  level             = 0\n  indentation       = ''\n  next_indentation  = indentation\n  return D.$observe ( event, has_ended ) ->\n    if event?\n      [ type, name, text, meta, ] = event\n      if type is '?'\n        unknown_events.push name unless name in unknown_events\n        warn JSON.stringify event\n      else\n        color = CND.blue\n        switch type\n          when '{', '[', '('\n            level            += +1\n            next_indentation  = ( new Array level ).join '  '\n          when ')', ']', '}'\n            level            += -1\n            next_indentation  = ( new Array level ).join '  '\n          when '.'\n            switch name\n              when 'text' then color = CND.green\n              when 'code' then color = CND.orange\n        switch type\n          when '{'\n            color         = CND.red\n          when '∆'\n            color         = CND.red\n          when ')', ']', '}'\n            color         = CND.grey\n        text = if text? then ( color rpr text ) else ''\n        log indentation + ( CND.grey type ) + ( color name ) + ' ' + text\n        indentation = next_indentation\n    if has_ended\n      if unknown_events.length > 0\n        warn \"unknown events: #{unknown_events.sort().join ', '}\"\n    return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.create_mdreadstream = ( md_source, settings ) ->\n  throw new Error \"settings currently unsupported\" if settings?\n  #.........................................................................................................\n  confluence  = D.create_throughstream()\n  R           = D.create_throughstream()\n  R.pause()\n  #.........................................................................................................\n  confluence\n    .pipe @$flatten_tokens()\n    .pipe @$rewrite_markdownit_tokens()\n    .pipe @$preprocess_regions()\n    .pipe @$preprocess_commands()\n    # .pipe @$remove_superfluous_tags()\n    # .pipe @$add_lookahead()\n    # .pipe D.$show()\n    # .pipe @$show_mktsmd_events()\n    .pipe R\n  #.........................................................................................................\n  R.on 'resume', =>\n    md_parser   = @_new_markdown_parser()\n    environment = {}\n    tokens      = md_parser.parse md_source, environment\n    @set_meta R, 'environment', environment\n    confluence.write token for token in tokens\n    confluence.end()\n  #.........................................................................................................\n  return R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}