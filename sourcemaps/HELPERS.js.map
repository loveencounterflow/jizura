{"version":3,"sources":["HELPERS.coffee"],"names":[],"mappings":"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","file":"HELPERS.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/HELPERS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nXNCHR                     = require './XNCHR'\nASYNC                     = require 'async'\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nMarkdown_parser           = require 'markdown-it'\n# Html_parser               = ( require 'htmlparser2' ).Parser\nnew_md_inline_plugin      = require 'markdown-it-regexp'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @provide_tmp_folder = ( options ) ->\n#   njs_fs.mkdirSync options[ 'tmp-home' ] unless njs_fs.existsSync options[ 'tmp-home' ]\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @tmp_locator_for_extension = ( layout_info, extension ) ->\n#   tmp_home            = layout_info[ 'tmp-home' ]\n#   tex_locator         = layout_info[ 'tex-locator' ]\n#   ### TAINT should extension be sanitized? maybe just check for /^\\.?[-a-z0-9]$/? ###\n#   throw new Error \"need non-empty extension\" unless extension.length > 0\n#   extension           = \".#{extension}\" unless ( /^\\./ ).test extension\n#   return njs_path.join CND.swap_extension tex_locator, extension\n\n#-----------------------------------------------------------------------------------------------------------\n@new_layout_info = ( options, source_route ) ->\n  xelatex_command       = options[ 'xelatex-command' ]\n  source_home           = njs_path.resolve process.cwd(), source_route\n  source_name           = options[ 'main' ][ 'filename' ]\n  source_locator        = njs_path.join source_home, source_name\n  #.........................................................................................................\n  throw new Error \"unable to locate #{source_home}\"     unless njs_fs.existsSync source_home\n  throw new Error \"not a directory: #{source_home}\"     unless ( njs_fs.statSync source_home ).isDirectory()\n  throw new Error \"unable to locate #{source_locator}\"  unless njs_fs.existsSync source_locator\n  throw new Error \"not a file: #{source_locator}\"       unless ( njs_fs.statSync source_locator ).isFile()\n  #.........................................................................................................\n  # tex_locator           = njs_path.join tmp_home, CND.swap_extension source_name, '.tex'\n  job_name              = njs_path.basename source_home\n  aux_locator           = njs_path.join source_home, \"#{job_name}.aux\"\n  pdf_locator           = njs_path.join source_home, \"#{job_name}.pdf\"\n  mkscript_locator           = njs_path.join source_home, \"#{job_name}.mkscript\"\n  # tex_inputs_home       = njs_path.resolve __dirname, '..', 'tex-inputs'\n  master_name           = options[ 'master' ][ 'filename' ]\n  master_ext            = njs_path.extname master_name\n  master_locator        = njs_path.join source_home, master_name\n  content_name          = options[ 'content' ][ 'filename' ]\n  content_locator       = njs_path.join source_home, content_name\n  ### TAINT duplication: tex_inputs_home, texinputs_value ###\n  texinputs_value       = options[ 'texinputs' ][ 'value' ]\n  #.........................................................................................................\n  R =\n    'aux-locator':                aux_locator\n    'content-locator':            content_locator\n    'job-name':                   job_name\n    'master-locator':             master_locator\n    'master-name':                master_name\n    'pdf-locator':                pdf_locator\n    'mkscript-locator':           mkscript_locator\n    'source-home':                source_home\n    'source-locator':             source_locator\n    'source-name':                source_name\n    'source-route':               source_route\n    # 'tex-inputs-home':            tex_inputs_home\n    'tex-inputs-value':           texinputs_value\n    'xelatex-command':            xelatex_command\n    'xelatex-run-count':          0\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@write_pdf = ( layout_info, handler ) ->\n  #.........................................................................................................\n  job_name            = layout_info[ 'job-name'             ]\n  source_home         = layout_info[ 'source-home'          ]\n  xelatex_command     = layout_info[ 'xelatex-command'      ]\n  master_locator      = layout_info[ 'master-locator'       ]\n  aux_locator         = layout_info[ 'aux-locator'          ]\n  pdf_locator         = layout_info[ 'pdf-locator'          ]\n  last_digest         = null\n  last_digest         = CND.id_from_route aux_locator if njs_fs.existsSync aux_locator\n  digest              = null\n  count               = 0\n  texinputs_value     = layout_info[ 'tex-inputs-value' ]\n  parameters          = [ texinputs_value, source_home, job_name, master_locator, ]\n  error_lines         = []\n  urge \"#{xelatex_command}\"\n  whisper \"$#{idx + 1}: #{parameters[ idx ]}\" for idx in [ 0 ... parameters.length ]\n  log \"#{xelatex_command} #{parameters.join ' '}\"\n  #.........................................................................................................\n  pdf_from_tex = ( next ) =>\n    count += 1\n    urge \"run ##{count}\"\n    # CND.spawn xelatex_command, parameters, ( error, data ) =>\n    cp = ( require 'child_process' ).spawn xelatex_command, parameters\n    #.......................................................................................................\n    cp.stdout\n      .pipe D.$split()\n      .pipe D.$observe ( line ) =>\n        echo CND.grey line\n    #.......................................................................................................\n    cp.stderr\n      .pipe D.$split()\n      .pipe D.$observe ( line ) =>\n        error_lines.push line\n        echo CND.red line\n    #.......................................................................................................\n    cp.on 'close', ( error ) =>\n      error = undefined if error is 0\n      if error?\n        alert error\n        return handler error\n      if error_lines.length > 0\n        ### TAINT looks like we're getting empty lines on stderr? ###\n        message = ( line for line in error_lines when line.length > 0 ).join '\\n'\n        if message.length > 0\n          alert message\n          return handler message\n      digest = CND.id_from_route aux_locator\n      if digest is last_digest\n        echo ( CND.grey badge ), CND.lime \"done.\"\n        layout_info[ 'xelatex-run-count' ] = count\n        ### TAINT move pdf to layout_info[ 'source-home' ] ###\n        handler null\n      else\n        last_digest = digest\n        next()\n  #.........................................................................................................\n  ASYNC.forever pdf_from_tex\n\n\n#===========================================================================================================\n# TYPO\n#-----------------------------------------------------------------------------------------------------------\n@TYPO   = {}\n@_meta  = Symbol 'meta'\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.set_meta = ( x, name, value = true ) ->\n  target          = x[ @_meta ]?= {}\n  target[ name ]  = value\n  return x\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.get_meta = ( x, name = null ) ->\n  R = x[ @_meta ]\n  R = R[ name ] if name\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._tex_escape_replacements = [\n  [ ///  \\\\         ///g,  '\\\\textbackslash{}',     ]\n  [ ///  \\{         ///g,  '\\\\{',                   ]\n  [ ///  \\}         ///g,  '\\\\}',                   ]\n  [ ///  \\$         ///g,  '\\\\$',                   ]\n  [ ///  \\#         ///g,  '\\\\#',                   ]\n  [ ///  %          ///g,  '\\\\%',                   ]\n  [ ///  _          ///g,  '\\\\_',                   ]\n  [ ///  \\^         ///g,  '\\\\textasciicircum{}',   ]\n  [ ///  ~          ///g,  '\\\\textasciitilde{}',    ]\n  [ ///  ‰          ///g, '\\\\permille{}',           ]\n  [ ///  &amp;      ///g, '\\\\&',                    ]\n  [ ///  &quot;     ///g, '\"',                      ]\n  [ ///  '([^\\s]+)’ ///g, '‘$1’',                   ]\n  [ ///  &   ///g,  '\\\\&',                  ]\n  # [ ///  (^|[^\\\\])& ///g, '$1\\\\&',                    ]\n  # [ ///  ([^\\\\])&   ///g,  '$1\\\\&',                  ]\n  # '`'   # these two are very hard to catch when TeX's character handling is switched on\n  # \"'\"   #\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.escape_for_tex = ( text ) ->\n  R = text\n  for [ pattern, replacement, ] in @_tex_escape_replacements\n    R = R.replace pattern, replacement\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# @TYPO.$resolve_html_entities = ->\n#   return $ ( event, send ) =>\n#     [ type, tail..., ] = event\n#     if type is 'text'\n#       send [ 'text', ( @resolve_html_entities tail[ 0 ] ), ]\n#     else\n#       send event\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$fix_typography_for_tex = ( options ) ->\n  return $ ( event, send ) =>\n    if @isa event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      text = @fix_typography_for_tex text, options\n      send [ type, name, text, meta, ]\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.resolve_html_entities = ( text ) ->\n  R = text\n  R = R.replace /&lt;/g,    '<'\n  R = R.replace /&gt;/g,    '>'\n  R = R.replace /&quot;/g,  '\"'\n  R = R.replace /&amp;/g,   '&'\n  R = R.replace /&[^a-z0-9]+;/g, ( match ) ->\n    warn \"unable to resolve HTML entity #{match}\"\n    return match\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.fix_typography_for_tex = ( text, options ) ->\n  ### An improved version of `XELATEX.tag_from_chr` ###\n  ### TAINT should accept settings, fall back to `require`d `options.coffee` ###\n  glyph_styles          = options[ 'tex' ]?[ 'glyph-styles'             ] ? {}\n  tex_command_by_rsgs   = options[ 'tex' ]?[ 'tex-command-by-rsgs'      ]\n  last_command          = null\n  R                     = []\n  stretch               = []\n  last_rsg              = null\n  #.........................................................................................................\n  unless tex_command_by_rsgs?\n    throw new Error \"need setting 'tex-command-by-rsgs'\"\n  #.........................................................................................................\n  advance = =>\n    if stretch.length > 0\n      # debug '©zDJqU', last_command, JSON.stringify stretch.join '.'\n      if last_command in [ null, 'latin', ]\n        R.push @escape_for_tex stretch.join ''\n      else\n        R.push stretch.join ''\n        R.push '}'\n    stretch.length = 0\n    return null\n  #.........................................................................................................\n  for chr in XNCHR.chrs_from_text text\n    chr_info    = XNCHR.analyze chr\n    { chr\n      uchr\n      fncr\n      rsg   }   = chr_info\n    #.......................................................................................................\n    switch rsg\n      when 'jzr-fig'  then chr = uchr\n      when 'u-pua'    then rsg = 'jzr-fig'\n    #.......................................................................................................\n    if ( replacement = glyph_styles[ chr ] )?\n      advance()\n      R.push replacement\n      last_command = null\n      continue\n    #.......................................................................................................\n    unless ( command = tex_command_by_rsgs[ rsg ] )?\n      warn \"unknown RSG #{rpr rsg}: #{fncr} #{chr}\"\n      advance()\n      stretch.push chr\n      continue\n    #.......................................................................................................\n    if last_command isnt command\n      advance()\n      last_command = command\n      stretch.push \"\\\\#{command}{\" unless command is 'latin'\n    #.......................................................................................................\n    stretch.push chr\n  #.........................................................................................................\n  advance()\n  return R.join ''\n\n\n#===========================================================================================================\n# MD / HTML PARSING\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._new_markdown_parser = ->\n  #.........................................................................................................\n  ### https://markdown-it.github.io/markdown-it/#MarkdownIt.new ###\n  # feature_set = 'commonmark'\n  feature_set = 'zero'\n  #.........................................................................................................\n  settings    =\n    html:           yes,            # Enable HTML tags in source\n    xhtmlOut:       no,             # Use '/' to close single tags (<br />)\n    breaks:         no,             # Convert '\\n' in paragraphs into <br>\n    langPrefix:     'language-',    # CSS language prefix for fenced blocks\n    linkify:        yes,            # Autoconvert URL-like text to links\n    typographer:    yes,\n    quotes:         '“”‘’'\n    # quotes:         '\"\"\\'\\''\n    # quotes:         '\"\"`\\''\n    # quotes:         [ '<<', '>>', '!!!', '???', ]\n    # quotes:   ['«\\xa0', '\\xa0»', '‹\\xa0', '\\xa0›'] # French\n  #.........................................................................................................\n  R = new Markdown_parser feature_set, settings\n  # R = new Markdown_parser settings\n  R\n    .enable 'text'\n    # .enable 'newline'\n    .enable 'escape'\n    .enable 'backticks'\n    .enable 'strikethrough'\n    .enable 'emphasis'\n    .enable 'link'\n    .enable 'image'\n    .enable 'autolink'\n    .enable 'html_inline'\n    .enable 'entity'\n    # .enable 'code'\n    .enable 'fence'\n    .enable 'blockquote'\n    .enable 'hr'\n    .enable 'list'\n    .enable 'reference'\n    .enable 'heading'\n    .enable 'lheading'\n    .enable 'html_block'\n    .enable 'table'\n    .enable 'paragraph'\n    .enable 'normalize'\n    .enable 'block'\n    .enable 'inline'\n    .enable 'linkify'\n    .enable 'replacements'\n    .enable 'smartquotes'\n  #.......................................................................................................\n  R.use require 'markdown-it-footnote'\n  # R.use require 'markdown-it-mark'\n  # R.use require 'markdown-it-sub'\n  # R.use require 'markdown-it-sup'\n  # #.......................................................................................................\n  # ### sample plugin ###\n  # user_pattern  = /@(\\w+)/\n  # user_handler  = ( match, utils ) ->\n  #   url = 'http://example.org/u/' + match[ 1 ]\n  #   return '<a href=\"' + utils.escape(url) + '\">' + utils.escape(match[1]) + '</a>'\n  # user_plugin = new_md_inline_plugin user_pattern, user_handler\n  # R.use user_plugin\n  #.......................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$flatten_tokens = ( S ) ->\n  return $ ( token, send ) ->\n    switch ( type = token[ 'type' ] )\n      when 'inline' then send sub_token for sub_token in token[ 'children' ]\n      else send token\n\n#-----------------------------------------------------------------------------------------------------------\nget_parse_html_methods = ->\n  Parser      = ( require 'parse5' ).Parser\n  parser      = new Parser()\n  get_message = ( source ) -> \"expected single openening node, got #{rpr source}\"\n  R           = {}\n  #.........................................................................................................\n  R[ '_parse_html_open_tag' ] = ( source ) ->\n    tree    = parser.parseFragment source\n    throw new Error get_message source unless ( cns = tree[ 'childNodes' ] ).length is 1\n    cn = cns[ 0 ]\n    throw new Error get_message source unless cn[ 'childNodes' ]?.length is 0\n    return [ 'begin', cn[ 'tagName' ], cn[ 'attrs' ][ 0 ] ? {}, ]\n  #.........................................................................................................\n  R[ '_parse_html_block' ] = ( source ) ->\n    tree    = parser.parseFragment source\n    debug '@88817', tree\n    return null\n  #.........................................................................................................\n  return R\n#...........................................................................................................\nparse_methods = get_parse_html_methods()\n@TYPO._parse_html_open_tag = parse_methods[ '_parse_html_open_tag' ]\n@TYPO._parse_html_block    = parse_methods[ '_parse_html_block'    ]\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._parse_html_tag = ( source ) ->\n  if ( match = source.match @_parse_html_tag.close_tag_pattern )?\n    return [ 'end', match[ 1 ], ]\n  if ( match = source.match @_parse_html_tag.comment_pattern )?\n    return [ 'comment', 'comment', match[ 1 ], ]\n  return @_parse_html_open_tag source\n@TYPO._parse_html_tag.close_tag_pattern   = /^<\\/([^>]+)>$/\n@TYPO._parse_html_tag.comment_pattern     = /^<!--([\\s\\S]*)-->$/\n\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$rewrite_markdownit_tokens = ( S ) ->\n  unknown_tokens  = []\n  is_first        = yes\n  last_map        = [ 0, 0, ]\n  _send           = null\n  #.........................................................................................................\n  send_unknown = ( token ) =>\n    debug '@8876', token\n    send [ '?', token[ 'tag' ], token[ 'content' ], meta, ]\n    unknown_tokens.push type unless type in unknown_tokens\n  #.........................................................................................................\n  return $ ( token, send, end ) =>\n    _send = send\n    if token?\n      if is_first\n        is_first = no\n        send [ '<', 'document', null, {}, ]\n      if S.has_ended\n        null\n      else\n        { type, map, } = token\n        map           ?= last_map\n        #...................................................................................................\n        meta =\n          within_text_literal:    no\n          map:                    map\n          # within_keep_lines:      no\n          # within_single_column:   no\n        #...................................................................................................\n        switch type\n          # blocks\n          when 'heading_open'       then send [ '[', token[ 'tag' ],  null,               meta, ]\n          when 'heading_close'      then send [ ']', token[ 'tag' ],  null,               meta, ]\n          when 'paragraph_open'     then null\n          when 'paragraph_close'    then send [ '.', 'p',             null,               meta, ]\n          when 'list_item_open'     then send [ '[', 'li',            null,               meta, ]\n          when 'list_item_close'    then send [ ']', 'li',            null,               meta, ]\n          # inlines\n          when 'strong_open'        then send [ '(', 'strong',        null,               meta, ]\n          when 'strong_close'       then send [ ')', 'strong',        null,               meta, ]\n          when 'em_open'            then send [ '(', 'em',            null,               meta, ]\n          when 'em_close'           then send [ ')', 'em',            null,               meta, ]\n          # singles\n          when 'text'               then send [ '.', 'text',          token[ 'content' ], meta, ]\n          when 'hr'                 then send [ '.', 'hr',            token[ 'markup' ],  meta, ]\n          #.................................................................................................\n          # specials\n          when 'code_inline'\n            send [ '(', 'code', null,               ( @_copy meta ), ]\n            send [ '.', 'text', token[ 'content' ], ( @_copy meta, within_text_literal: yes, ), ]\n            send [ ')', 'code', null,               ( @_copy meta ), ]\n          #.................................................................................................\n          when 'html_block'\n            # @_parse_html_block token[ 'content' ].trim()\n            debug '@8873', @_parse_html_tag token[ 'content' ]\n          #.................................................................................................\n          when 'fence'\n            switch token[ 'tag' ]\n              when 'code'\n                language_name = token[ 'info' ]\n                language_name = 'text' if language_name.length is 0\n                send [ '{', 'code', language_name,               meta,    ]\n                send [ '.', 'text', token[ 'content' ], ( @_copy meta ),  ]\n                send [ '}', 'code', language_name,      ( @_copy meta ),  ]\n              else send_unknown token\n          #.................................................................................................\n          when 'html_inline'\n            [ position, name, extra, ] = @_parse_html_tag token[ 'content' ]\n            switch position\n              when 'comment'  then whisper \"ignoring comment: #{rpr extra}\"\n              when 'begin'\n                unless name is 'p'\n                  send [ '(', name, extra, meta, ]\n              when 'end'\n                if name is 'p' then send [ '.', name, null, meta, ]\n                else                send [ ')', name, null, meta, ]\n              else throw new Error \"unknown HTML tag position #{rpr position}\"\n          else send_unknown token\n        #...................................................................................................\n        last_map = map\n    #.......................................................................................................\n    if end?\n      if unknown_tokens.length > 0\n        warn \"unknown tokens: #{unknown_tokens.sort().join ', '}\"\n      ### TAINT could send end document earlier in case of `∆∆∆end` ###\n      send [ '>', 'document', null, {}, ]\n      end()\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$preprocess_regions = ( S ) ->\n  opening_pattern   = /^@@@(\\S.+)(\\n|$)/\n  closing_pattern   = /^@@@\\s*(\\n|$)/\n  collector         = []\n  region_stack      = []\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    [ type, name, text, meta, ] = event\n    if ( not meta.within_text_literal ) and ( @isa event, '.', 'text' )\n      lines = @_split_lines_with_nl text\n      #...................................................................................................\n      for line in lines\n        if ( match = line.match opening_pattern )?\n          @_flush_text_collector send, collector, ( @_copy meta )\n          region_name = match[ 1 ]\n          region_stack.push region_name\n          send [ '{', region_name, null, ( @_copy meta ), ]\n        else if ( match = line.match closing_pattern )?\n          @_flush_text_collector send, collector, ( @_copy meta )\n          if region_stack.length > 0\n            send [ '}', region_stack.pop(), null, ( @_copy meta ), ]\n          else\n            warn \"ignoring end-region\"\n        else\n          collector.push line\n      #...................................................................................................\n      @_flush_text_collector send, collector, ( @_copy meta )\n    #.....................................................................................................\n    else if ( region_stack.length > 0 ) and ( @isa event, '}', 'document' )\n      warn \"auto-closing regions: #{rpr region_stack.join ', '}\"\n      send [ '}', region_stack.pop(), null, ( @_copy meta, block: true ), ] while region_stack.length > 0\n      send event\n    #.....................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$preprocess_commands = ( S ) ->\n  pattern   = /^∆∆∆(\\S.+)(\\n|$)/\n  collector = []\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    if @isa event, '.', 'text'\n      lines = @_split_lines_with_nl text\n      #.......................................................................................................\n      for line in lines\n        if ( match = line.match pattern )?\n          @_flush_text_collector send, collector, ( @_copy meta )\n          send [ '∆', match[ 1 ], null, ( @_copy meta ), ]\n        else\n          collector.push line\n      #.......................................................................................................\n      @_flush_text_collector send, collector, ( @_copy meta )\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$process_end_command = ( S ) ->\n  S.has_ended = no\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # [ type, name, text, meta, ] = event\n    if @isa event, '∆', 'end'\n      [ _, _, _, meta, ]    = event\n      [ line_nr, _, ]       = meta[ 'map' ]\n      warn \"encountered `∆∆∆end` on line ##{line_nr}, ignoring further material\"\n      S.has_ended = yes\n    else if @isa event, '}', 'document'\n      send event\n    else\n      send event unless S.has_ended\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$close_dangling_open_tags = ( S ) ->\n  tag_stack = []\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    # debug '©nLnB5', event\n    if @isa event, [ '{', '[', '(', ]\n      unless @isa event, '{', 'document'\n        tag_stack.push [ type, name, null, meta, ]\n      send event\n    else if @isa event, [ '}', ']', ')', ]\n      if @isa event, '}', 'document'\n        while tag_stack.length > 0\n          sub_event                         = tag_stack.pop()\n          [ sub_type, sub_name, sub_meta, ] = sub_event\n          switch sub_type\n            when '{' then sub_type = '}'\n            when '[' then sub_type = ']'\n            when '(' then sub_type = ')'\n          send [ sub_type, sub_name, null, ( @_copy sub_meta ), ]\n        send event\n      else\n        tag_stack.pop()\n        send event\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.isa = ( event, type, name ) ->\n  if type?\n    switch type_of_type = CND.type_of type\n      when 'text' then return false unless event[ 0 ] is type\n      when 'list' then return false unless event[ 0 ] in type\n      else throw new Error \"expected text or list, got a #{type_of_type}\"\n  if name?\n    switch type_of_name = CND.type_of name\n      when 'text' then return false unless event[ 1 ] is name\n      when 'list' then return false unless event[ 1 ] in name\n      else throw new Error \"expected text or list, got a #{type_of_name}\"\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._copy = ( meta, overwrites ) ->\n  R = {}\n  R[ name ] = value for name, value of meta\n  R[ name ] = value for name, value of overwrites if overwrites?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._split_lines_with_nl = ( text ) -> ( line for line in text.split /(.*\\n)/ when line.length > 0 )\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._flush_text_collector = ( send, collector, meta ) ->\n  if collector.length > 0\n    send [ '.', 'text', ( collector.join '' ), meta, ]\n    collector.length = 0\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$show_mktsmd_events = ( S ) ->\n  unknown_events    = []\n  indentation       = ''\n  tag_stack         = []\n  return D.$observe ( event, has_ended ) ->\n    if event?\n      [ type, name, text, meta, ] = event\n      if type is '?'\n        unknown_events.push name unless name in unknown_events\n        warn JSON.stringify event\n      else\n        color = CND.blue\n        #...................................................................................................\n        switch type\n          when '<', '>'\n            color         = CND.yellow\n          when '{', '∆'\n            color         = CND.red\n          when ')', ']', '}'\n            color         = CND.grey\n          when '.'\n            switch name\n              when 'text' then color = CND.green\n              # when 'code' then color = CND.orange\n        #...................................................................................................\n        text = if text? then ( color rpr text ) else ''\n        switch type\n          when 'text'\n            log indentation + ( color type ) + ' ' + rpr name\n          when 'tex'\n            if S.show_tex_events ? no\n              log indentation + ( CND.grey type ) + ( color name ) + ' ' + text\n          else\n            log indentation + ( CND.grey type ) + ( color name ) + ' ' + text\n        #...................................................................................................\n        switch type\n          #.................................................................................................\n          when '{', '[', '(', ')', ']', '}'\n            switch type\n              when '{', '[', '('\n                tag_stack.push [ type, name, ]\n              when ')', ']', '}'\n                if tag_stack.length > 0\n                  [ topmost_type, topmost_name, ] = tag_stack.pop()\n                  unless topmost_name is name\n                    topmost_type = { '{': '}', '[': ']', '(', ')', }[ topmost_type ]\n                    warn \"encountered #{type}#{name} when #{topmost_type}#{topmost_name} was expected\"\n                else\n                  warn \"level below zero\"\n            indentation = ( new Array tag_stack.length ).join '  '\n    #.......................................................................................................\n    if has_ended\n      if tag_stack.length > 0\n        warn \"unclosed tags: #{tag_stack.join ', '}\"\n      if unknown_events.length > 0\n        warn \"unknown events: #{unknown_events.sort().join ', '}\"\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$write_mktscript = ( S ) ->\n  indentation       = ''\n  tag_stack         = []\n  mkscript_locator  = S.layout_info[ 'mkscript-locator' ]\n  output            = njs_fs.createWriteStream mkscript_locator\n  confluence        = D.create_throughstream()\n  write             = confluence.write.bind confluence\n  confluence.pipe output\n  #.........................................................................................................\n  return D.$observe ( event, has_ended ) ->\n    if event?\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      switch type\n        when 'tex', 'text'\n          null\n        when '?'\n          write \"\\n#{type}#{name}\\n\"\n        when '<', '{', '['\n          write \"#{type}#{name}\"\n        when '>', '}', ']', '∆'\n          write \"#{type}\\n\"\n        when '('\n          write \"#{type}#{name}\"\n        when ')'\n          write \"#{type}\"\n        when '.'\n          switch name\n            when 'hr'\n              write \"\\n#{type}#{name}\\n\"\n            when 'p'\n              write \"¶\\n\"\n            when 'text'\n              ### TAINT doesn't recognize escaped backslash ###\n              text_rpr = ( rpr text ).replace /\\\\n/g, '\\n'\n              write text_rpr\n            else\n              write \"\\nIGNORED: #{rpr event}\"\n        else\n          write \"\\nIGNORED: #{rpr event}\"\n    if has_ended\n      output.close()\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.create_mdreadstream = ( md_source, settings ) ->\n  throw new Error \"settings currently unsupported\" if settings?\n  #.........................................................................................................\n  state       = {}\n  confluence  = D.create_throughstream()\n  R           = D.create_throughstream()\n  R.pause()\n  #.........................................................................................................\n  confluence\n    .pipe @$flatten_tokens                  state\n    #.......................................................................................................\n    .pipe do =>\n      ### re-inject HTML blocks ###\n      md_parser   = @_new_markdown_parser()\n      return $ ( token, send ) =>\n        { type, map, } = token\n        if type is 'html_block'\n          ### TAINT `map` location data is borked with this method ###\n          ### add extraneous text content; this causes the parser to parse the HTML block as a paragraph\n          with some inline HTML: ###\n          XXX_source  = \"XXX\" + token[ 'content' ]\n          environment = {}\n          tokens      = md_parser.parse XXX_source, environment\n          ### remove extraneous text content: ###\n          removed     = tokens[ 1 ]?[ 'children' ]?.splice 0, 1\n          unless removed[ 0 ]?[ 'content' ] is \"XXX\"\n            throw new Error \"should never happen\"\n          confluence.write token for token in tokens\n        else\n          send token\n    #.......................................................................................................\n    .pipe @$rewrite_markdownit_tokens       state\n    # .pipe D.$show()\n    .pipe @$preprocess_commands             state\n    .pipe @$process_end_command             state\n    .pipe @$preprocess_regions              state\n    .pipe @$close_dangling_open_tags        state\n    # .pipe @$preprocess_keeplines_regions    state\n    .pipe R\n  #.........................................................................................................\n  R.on 'resume', =>\n    md_parser   = @_new_markdown_parser()\n    environment = {}\n    tokens      = md_parser.parse md_source, environment\n    @set_meta R, 'environment', environment\n    confluence.write token for token in tokens\n    confluence.end()\n  #.........................................................................................................\n  return R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}