{"version":3,"sources":["HELPERS.coffee"],"names":[],"mappings":"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","file":"HELPERS.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/HELPERS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nXNCHR                     = require './XNCHR'\nASYNC                     = require 'async'\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nMarkdown_parser           = require 'markdown-it'\nHtml_parser               = ( require 'htmlparser2' ).Parser\nnew_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\noptions                   = require './options'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@provide_tmp_folder = ->\n  njs_fs.mkdirSync options[ 'tmp-home' ] unless njs_fs.existsSync options[ 'tmp-home' ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@tmp_locator_for_extension = ( layout_info, extension ) ->\n  tmp_home            = layout_info[ 'tmp-home' ]\n  tex_locator         = layout_info[ 'tex-locator' ]\n  ### TAINT should extension be sanitized? maybe just check for /^\\.?[-a-z0-9]$/? ###\n  throw new Error \"need non-empty extension\" unless extension.length > 0\n  extension           = \".#{extension}\" unless ( /^\\./ ).test extension\n  return njs_path.join CND.swap_extension tex_locator, extension\n\n#-----------------------------------------------------------------------------------------------------------\n@new_layout_info = ( source_route ) ->\n  pdf_command         = options[ 'pdf-command' ]\n  tmp_home            = options[ 'tmp-home' ]\n  source_locator      = njs_path.resolve process.cwd(), source_route\n  source_home         = njs_path.dirname source_locator\n  source_name         = njs_path.basename source_locator\n  ### TAINT use `tmp_locator_for_extension` ###\n  tex_locator         = njs_path.join tmp_home, CND.swap_extension source_name, '.tex'\n  aux_locator         = njs_path.join tmp_home, CND.swap_extension source_name, '.aux'\n  pdf_source_locator  = njs_path.join tmp_home, CND.swap_extension source_name, '.pdf'\n  pdf_target_locator  = njs_path.join source_home, CND.swap_extension source_name, '.pdf'\n  tex_inputs_home     = njs_path.resolve __dirname, '..', 'tex-inputs'\n  #.........................................................................................................\n  R =\n    'pdf-command':          pdf_command\n    'tmp-home':             tmp_home\n    'source-route':         source_route\n    'source-locator':       source_locator\n    'source-home':          source_home\n    'source-name':          source_name\n    'tex-locator':          tex_locator\n    'tex-inputs-home':      tex_inputs_home\n    'aux-locator':          aux_locator\n    'pdf-source-locator':   pdf_source_locator\n    'pdf-target-locator':   pdf_target_locator\n    'latex-run-count':      0\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@write_pdf = ( layout_info, handler ) ->\n  #.........................................................................................................\n  pdf_command         = layout_info[ 'pdf-command'          ]\n  tmp_home            = layout_info[ 'tmp-home'             ]\n  tex_locator         = layout_info[ 'tex-locator'          ]\n  aux_locator         = layout_info[ 'aux-locator'          ]\n  pdf_source_locator  = layout_info[ 'pdf-source-locator'   ]\n  pdf_target_locator  = layout_info[ 'pdf-target-locator'   ]\n  last_digest         = null\n  last_digest         = CND.id_from_route aux_locator if njs_fs.existsSync aux_locator\n  digest              = null\n  count               = 0\n  #.........................................................................................................\n  pdf_from_tex = ( next ) =>\n    count += 1\n    urge \"run ##{count} #{pdf_command}\"\n    whisper \"$1: #{tmp_home}\"\n    whisper \"$2: #{tex_locator}\"\n    CND.spawn pdf_command, [ tmp_home, tex_locator, ], ( error, data ) =>\n      error = undefined if error is 0\n      if error?\n        alert error\n        return handler error\n      digest = CND.id_from_route aux_locator\n      if digest is last_digest\n        echo ( CND.grey badge ), CND.lime \"done.\"\n        layout_info[ 'latex-run-count' ] = count\n        ### TAINT move pdf to layout_info[ 'source-home' ] ###\n        handler null\n      else\n        last_digest = digest\n        next()\n  #.........................................................................................................\n  ASYNC.forever pdf_from_tex\n\n\n#===========================================================================================================\n# TYPO\n#-----------------------------------------------------------------------------------------------------------\n@TYPO   = {}\n@_meta  = Symbol 'meta'\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.set_meta = ( x, name, value = true ) ->\n  target          = x[ @_meta ]?= {}\n  target[ name ]  = value\n  return x\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.get_meta = ( x, name = null ) ->\n  R = x[ @_meta ]\n  R = R[ name ] if name\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._tex_escape_replacements = [\n  [ ///  \\\\         ///g,  '\\\\textbackslash{}',     ]\n  [ ///  \\{         ///g,  '\\\\{',                   ]\n  [ ///  \\}         ///g,  '\\\\}',                   ]\n  [ ///  \\$         ///g,  '\\\\$',                   ]\n  [ ///  \\#         ///g,  '\\\\#',                   ]\n  [ ///  %          ///g,  '\\\\%',                   ]\n  [ ///  _          ///g,  '\\\\_',                   ]\n  [ ///  \\^         ///g,  '\\\\textasciicircum{}',   ]\n  [ ///  ~          ///g,  '\\\\textasciitilde{}',    ]\n  [ ///  ‰          ///g, '\\\\permille{}',           ]\n  [ ///  &amp;      ///g, '\\\\&',                    ]\n  [ ///  &quot;     ///g, '\"',                      ]\n  [ ///  '([^\\s]+)’ ///g, '‘$1’',                   ]\n  [ ///  &   ///g,  '\\\\&',                  ]\n  # [ ///  (^|[^\\\\])& ///g, '$1\\\\&',                    ]\n  # [ ///  ([^\\\\])&   ///g,  '$1\\\\&',                  ]\n  # '`'   # these two are very hard to catch when TeX's character handling is switched on\n  # \"'\"   #\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.escape_for_tex = ( text ) ->\n  R = text\n  for [ pattern, replacement, ] in @_tex_escape_replacements\n    R = R.replace pattern, replacement\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$resolve_html_entities = ->\n  return $ ( event, send ) =>\n    [ type, tail..., ] = event\n    if type is 'text'\n      send [ 'text', ( @resolve_html_entities tail[ 0 ] ), ]\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.$fix_typography_for_tex = ->\n  return $ ( event, send ) =>\n    [ type, tail..., ] = event\n    if type is 'text'\n      send [ 'text', ( @fix_typography_for_tex tail[ 0 ] ), ]\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.resolve_html_entities = ( text ) ->\n  R = text\n  R = R.replace /&lt;/g, '<'\n  R = R.replace /&gt;/g, '>'\n  R = R.replace /&quot;/g, '\"'\n  R = R.replace /&amp;/g, '&'\n  R = R.replace /&[^a-z0-9]+;/g, ( match ) ->\n    warn \"unable to resolve HTML entity #{match}\"\n    return match\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.fix_typography_for_tex = ( text, settings ) ->\n  ### An improved version of `XELATEX.tag_from_chr` ###\n  settings             ?= options\n  glyph_styles          = settings[ 'tex' ]?[ 'glyph-styles'             ] ? {}\n  tex_command_by_rsgs   = settings[ 'tex' ]?[ 'tex-command-by-rsgs'      ]\n  last_command          = null\n  R                     = []\n  stretch               = []\n  last_rsg              = null\n  #.........................................................................................................\n  unless tex_command_by_rsgs?\n    throw new Error \"need setting 'tex-command-by-rsgs'\"\n  #.........................................................................................................\n  advance = =>\n    if stretch.length > 0\n      # debug '©zDJqU', last_command, JSON.stringify stretch.join '.'\n      if last_command in [ null, 'latin', ]\n        R.push @escape_for_tex stretch.join ''\n      else\n        R.push stretch.join ''\n        R.push '}'\n    stretch.length = 0\n    return null\n  #.........................................................................................................\n  for chr in XNCHR.chrs_from_text text\n    chr_info    = XNCHR.analyze chr\n    { chr\n      uchr\n      fncr\n      rsg   }   = chr_info\n    #.......................................................................................................\n    switch rsg\n      when 'jzr-fig'  then chr = uchr\n      when 'u-pua'    then rsg = 'jzr-fig'\n    #.......................................................................................................\n    if ( replacement = glyph_styles[ chr ] )?\n      advance()\n      R.push replacement\n      last_command = null\n      continue\n    #.......................................................................................................\n    unless ( command = tex_command_by_rsgs[ rsg ] )?\n      warn \"unknown RSG #{rpr rsg}: #{fncr} #{chr}\"\n      advance()\n      stretch.push chr\n      continue\n    #.......................................................................................................\n    if last_command isnt command\n      advance()\n      last_command = command\n      stretch.push \"\\\\#{command}{\" unless command is 'latin'\n    #.......................................................................................................\n    stretch.push chr\n  #.........................................................................................................\n  advance()\n  return R.join ''\n\n\n#===========================================================================================================\n# MD / HTML PARSING\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._new_markdown_parser = ->\n  #.........................................................................................................\n  ### https://markdown-it.github.io/markdown-it/#MarkdownIt.new ###\n  # feature_set = 'commonmark'\n  feature_set = 'zero'\n  #.........................................................................................................\n  settings    =\n    html:           yes,            # Enable HTML tags in source\n    xhtmlOut:       no,             # Use '/' to close single tags (<br />)\n    breaks:         no,             # Convert '\\n' in paragraphs into <br>\n    langPrefix:     'language-',    # CSS language prefix for fenced blocks\n    linkify:        yes,            # Autoconvert URL-like text to links\n    typographer:    yes,\n    quotes:         '“”‘’'\n    # quotes:         '\"\"\\'\\''\n    # quotes:         '\"\"`\\''\n    # quotes:         [ '<<', '>>', '!!!', '???', ]\n    # quotes:   ['«\\xa0', '\\xa0»', '‹\\xa0', '\\xa0›'] # French\n  #.........................................................................................................\n  R = new Markdown_parser feature_set, settings\n  # R = new Markdown_parser settings\n  R\n    .enable 'text'\n    # .enable 'newline'\n    .enable 'escape'\n    .enable 'backticks'\n    .enable 'strikethrough'\n    .enable 'emphasis'\n    .enable 'link'\n    .enable 'image'\n    .enable 'autolink'\n    .enable 'html_inline'\n    .enable 'entity'\n    # .enable 'code'\n    .enable 'fence'\n    .enable 'blockquote'\n    .enable 'hr'\n    .enable 'list'\n    .enable 'reference'\n    .enable 'heading'\n    .enable 'lheading'\n    .enable 'html_block'\n    .enable 'table'\n    .enable 'paragraph'\n    .enable 'normalize'\n    .enable 'block'\n    .enable 'inline'\n    .enable 'linkify'\n    .enable 'replacements'\n    .enable 'smartquotes'\n  #.......................................................................................................\n  R.use require 'markdown-it-footnote'\n  # R.use require 'markdown-it-mark'\n  # R.use require 'markdown-it-sub'\n  # R.use require 'markdown-it-sup'\n  # #.......................................................................................................\n  # ### sample plugin ###\n  # user_pattern  = /@(\\w+)/\n  # user_handler  = ( match, utils ) ->\n  #   url = 'http://example.org/u/' + match[ 1 ]\n  #   return '<a href=\"' + utils.escape(url) + '\">' + utils.escape(match[1]) + '</a>'\n  # user_plugin = new_md_inline_plugin user_pattern, user_handler\n  # R.use user_plugin\n  #.......................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._new_html_parser = ( stream ) ->\n  ### https://github.com/fb55/htmlparser2/wiki/Parser-options ###\n  settings =\n    xmlMode:                 no   # Indicates whether special tags (<script> and <style>) should get special\n                                  # treatment and if \"empty\" tags (eg. <br>) can have children. If false,\n                                  # the content of special tags will be text only.\n                                  # For feeds and other XML content (documents that don't consist of HTML),\n                                  # set this to true. Default: false.\n    decodeEntities:          no   # If set to true, entities within the document will be decoded. Defaults\n                                  # to false.\n    lowerCaseTags:           no   # If set to true, all tags will be lowercased. If xmlMode is disabled,\n                                  # this defaults to true.\n    lowerCaseAttributeNames: no   # If set to true, all attribute names will be lowercased. This has\n                                  # noticeable impact on speed, so it defaults to false.\n    recognizeCDATA:          yes  # If set to true, CDATA sections will be recognized as text even if the\n                                  # xmlMode option is not enabled. NOTE: If xmlMode is set to true then\n                                  # CDATA sections will always be recognized as text.\n    recognizeSelfClosing:    yes  # If set to true, self-closing tags will trigger the onclosetag event even\n                                  # if xmlMode is not set to true. NOTE: If xmlMode is set to true then\n                                  # self-closing tags will always be recognized.\n  #.........................................................................................................\n  handlers =\n    onopentag:  ( name, attributes )  -> stream.write [ 'open-tag',  name, attributes, ]\n    ontext:     ( text )              -> stream.write [ 'text',      text, ]\n    onclosetag: ( name )              -> stream.write [ 'close-tag', name, ]\n    onerror:    ( error )             -> stream.error error\n    oncomment:  ( text )              -> stream.write [ 'comment',   text, ]\n    onend:                            -> stream.write [ 'end', ]; stream.end()\n    # oncdatastart:            ( P... ) -> debug 'cdatastart           ', P  # 0\n    # oncdataend:              ( P... ) -> debug 'cdataend             ', P  # 0\n    # onprocessinginstruction: ( P... ) -> debug 'processinginstruction', P  # 2\n  #.........................................................................................................\n  return new Html_parser handlers, settings\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._preprocess_regions = ( md_source ) ->\n  opening_pattern   = /(\\n|^)@@@(\\S.+)(\\n|$)/g\n  closing_pattern   = /(\\n|^)@@@\\s*(\\n|$)/g\n  md_source         = md_source.replace opening_pattern, \"$1<mkts-mark x-role='start-region' x-name='$2'></mkts-mark>$3\"\n  md_source         = md_source.replace closing_pattern, \"$1<mkts-mark x-role='end-region'></mkts-mark>$2\"\n  return md_source\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._preprocess_commands = ( md_source ) ->\n  pattern     = /(\\n|^)∆∆∆(\\S.+)(\\n|$)/g\n  md_source   = md_source.replace pattern, \"$1<mkts-mark x-role='command' x-name='$2'></mkts-mark>$3\"\n  debug '©I74uq', md_source\n  return md_source\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._$remove_mkts_close_tags = ->\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, tag_name, ] = event\n    send event unless ( type is 'close-tag' ) and ( tag_name is 'mkts-mark' )\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._$add_regions = ->\n  region_stack              = []\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    #.......................................................................................................\n    if event?\n      [ type, tag_name, attributes, ] = event\n      #.....................................................................................................\n      if ( type is 'open-tag' )\n        if ( tag_name is 'mkts-mark' ) and ( attributes[ 'x-role' ] is 'start-region' )\n          region_name = attributes[ 'x-name' ]\n          region_stack.push region_name\n          send [ 'start-region', region_name, ]\n        else if ( tag_name is 'mkts-mark' ) and ( attributes[ 'x-role' ] is 'end-region' )\n          if region_stack.length > 0\n            send [ 'end-region', region_stack.pop(), ]\n          else\n            warn \"ignoring end-region\"\n        else\n          send event\n      #...................................................................................................\n      else\n        send event\n    #.......................................................................................................\n    if end?\n      if region_stack.length > 0\n        warn \"auto-closing regions: #{rpr region_stack.join ', '}\"\n        send [ 'end-region', region_stack.pop(), ] while region_stack.length > 0\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._$add_commands = ->\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, tag_name, attributes, ] = event\n    #.....................................................................................................\n    if ( type is 'open-tag' )\n      if ( tag_name is 'mkts-mark' ) and ( attributes[ 'x-role' ] is 'command' )\n        command = attributes[ 'x-name' ]\n        send [ 'command', command, ]\n      else\n        send event\n    #...................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._$remove_block_tags_from_keeplines = =>\n  within_keeplines = no\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, tag, tail..., ] = event\n    #.......................................................................................................\n    if type is 'start-region' and tag is 'keeplines'\n      within_keeplines = yes\n      return send event\n    #.......................................................................................................\n    if type is 'end-region' and tag is 'keeplines'\n      within_keeplines = no\n      return send event\n    #.......................................................................................................\n    if within_keeplines\n      if type in [ 'open-tag', 'close-tag', ]\n        ###TAINT apply to other block-level tags? ###\n        send event unless tag is 'p'\n      else\n        send event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO._$consolidate_texts = =>\n  collector = []\n  _send     = null\n  #.........................................................................................................\n  flush = ->\n    if collector.length > 0\n      text  = collector.join ''\n      # text  = text.replace /^\\n+/, ''\n      # text  = text.replace /\\n+$/, ''\n      _send [ 'text', text, ] if text.length > 0\n      collector.length = 0\n      return null\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    _send = send\n    if event?\n      [ type, text, ] = event\n      if type is 'text'\n        collector.push text\n      else\n        flush()\n        send event\n    if end?\n      flush()\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@TYPO.create_html_readstream_from_md = ( md_source, settings ) ->\n  throw new Error \"settings currently unsupported\" if settings?\n  #.........................................................................................................\n  R = D.create_throughstream()\n  R.pause()\n  #.........................................................................................................\n  # setImmediate =>\n  md_parser   = @_new_markdown_parser()\n  md_source   = @_preprocess_regions  md_source\n  md_source   = @_preprocess_commands md_source\n  html_parser = @_new_html_parser R\n  html        = md_parser.render md_source\n  # help '©YzNQP',  html\n  html_parser.write html\n  html_parser.end()\n  #.........................................................................................................\n  R = R\n    # .pipe D.$show()\n    .pipe @_$remove_mkts_close_tags()\n    .pipe @_$add_regions()\n    .pipe @_$add_commands()\n    .pipe @_$remove_block_tags_from_keeplines()\n    .pipe @_$consolidate_texts()\n  #.........................................................................................................\n  @set_meta R, 'html', html\n  return R\n\n# source_route  = njs_path.resolve __dirname, '../jizura/texts/demo/demo.md'\n# source_md     = njs_fs.readFileSync source_route, encoding: 'utf-8'\n# debug '©3E4JY', source_md\n# input =  @create_html_readstream_from_mdx_text source_md\n# input\n#   .pipe D.$show()\n# input.resume()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}