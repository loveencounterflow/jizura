{"version":3,"sources":["show-factor-usages.coffee"],"names":[],"mappings":"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","file":"show-factor-usages.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/copy-jizuradb-to-Hollerith2-format'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nHOLLERITH                 = require 'hollerith'\n# DEMO                      = require 'hollerith/lib/demo'\nKWIC                      = require 'kwic'\nƒ                         = CND.format_number.bind CND\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$parse_tsv = ( options ) ->\n  #.........................................................................................................\n  return $ ( record, send ) =>\n    fields  = record.split /\\s+/\n    fields  = ( field.trim() for field in fields )\n    fields  = ( field for field in fields when field.length > 0 )\n    if fields.length > 0 and not fields[ 0 ].startsWith '#'\n      [ glyph, frequency_txt, _, ] = fields\n      frequency = parseInt frequency_txt, 10\n      send [ glyph, frequency, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@read_sample = ( db, limit_or_list, handler ) ->\n  ### Return a gamut of select glyphs from the DB. `limit_or_list` may be a list of glyphs or a number\n  representing an upper bound to the usage rank recorded as `rank/cjt`. If `limit_or_list` is a list,\n  a POD whose keys are the glyphs in the list is returned; if it is a number, a similar POD with all the\n  glyphs whose rank is not worse than the given limit is returned. If `limit_or_list` is smaller than zero\n  or equals infinity, `null` is returned to indicate absence of a filter. ###\n  Z         = {}\n  #.......................................................................................................\n  if CND.isa_list limit_or_list\n    Z[ glyph ] = 1 for glyph in limit_or_list\n    return handler null, Z\n  #.......................................................................................................\n  return handler null, null if limit_or_list < 0 or limit_or_list is Infinity\n  #.......................................................................................................\n  throw new Error \"expected list or number, got a #{type}\" unless CND.isa_number limit_or_list\n  #.......................................................................................................\n  unless db?\n    db_route  = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n    db       ?= HOLLERITH.new_db db_route, create: no\n  #.......................................................................................................\n  lo      = [ 'pos', 'rank/cjt', 0, ]\n  hi      = [ 'pos', 'rank/cjt', limit_or_list, ]\n  query   = { lo, hi, }\n  input   = HOLLERITH.create_phrasestream db, query\n  #.......................................................................................................\n  input\n    .pipe $ ( phrase, send ) =>\n      [ _, _, _, glyph, ] = phrase\n      Z[ glyph ]          = 1\n    .pipe D.$on_end -> handler null, Z\n\n#-----------------------------------------------------------------------------------------------------------\n@read_chtsai_frequencies = ( handler ) ->\n  route = njs_path.join __dirname, '../../jizura-datasources/data/flat-files/usage/usage-counts-zhtw-chtsai-13000chrs-3700ranks.txt'\n  input = njs_fs.createReadStream route\n  Z     = {}\n  input\n    .pipe D.$split()\n    .pipe @$parse_tsv()\n    .pipe $ ( glyph_and_frequency, send, end ) =>\n      if glyph_and_frequency?\n        [ glyph, frequency, ] = glyph_and_frequency\n        Z[ glyph ]            = frequency\n      if end?\n        handler null, Z\n        end()\n\n#-----------------------------------------------------------------------------------------------------------\n@main = ->\n  db_route        = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  db              = HOLLERITH.new_db db_route, create: no\n  help \"using DB at #{db[ '%self' ][ 'location' ]}\"\n  #.........................................................................................................\n  step ( resume ) =>\n    ranks         = {}\n    # include       = Infinity\n    # include       = [ '櫻', '哈', ]\n    include       = 10000\n    #.......................................................................................................\n    # sample        = yield @read_sample db, include, resume\n    sample        = null\n    frequencies   = yield @read_chtsai_frequencies resume\n    if sample?\n      help \"using sample of #{ƒ ( Object.keys sample ).length} glyphs\"\n    #.......................................................................................................\n    prefix        = [ 'pos', 'guide/has/uchr', ]\n    ### TAINT use of star not correct ###\n    query         = { prefix, star: '*', }\n    input         = HOLLERITH.create_phrasestream db, query\n    #.......................................................................................................\n    input.on 'end', -> help \"ok\"\n    #.......................................................................................................\n    $select_glyph_and_guide = =>\n      return $ ( phrase, send ) =>\n        [ _, _, guide, glyph, _, ] = phrase\n        send [ glyph, guide, ]\n    #.......................................................................................................\n    $filter_sample = ( sample ) =>\n      return $ ( [ glyph, guide, ], send ) =>\n        event = [ 'glyph-and-guide', glyph, guide, ]\n        if sample?\n          send event if sample[ glyph ]?\n        else\n          send event\n    #.......................................................................................................\n    $filter_by_frequencies = ( frequencies ) =>\n      return $ ( [ glyph, guide, ], send ) =>\n        if ( frequency = frequencies[ glyph ] )?\n          event = [ 'glyph-guide-and-frequency', glyph, guide, frequency, ]\n          send event\n    #.......................................................................................................\n    $count_guides = =>\n      counts = {}\n      return $ ( event, send, end ) =>\n        if event?\n          [ type, glyph, guide, ] = event\n          counts[ guide ] = ( counts[ guide ] ? 0 ) + 1\n        if end?\n          send [ 'counts', counts, ]\n          end()\n    #.......................................................................................................\n    $sort_counts = =>\n      return $ ( event, send ) =>\n        [ _, counts, ]  = event\n        counts          = ( [ guide, count, ] for guide, count of counts )\n        counts.sort ( a, b ) ->\n          return +1 if a[ 1 ] < b[ 1 ]\n          return -1 if a[ 1 ] > b[ 1 ]\n          return  0\n        send [ 'counts', counts, ]\n    #.......................................................................................................\n    $rank_counts = =>\n      return $ ( event, send ) =>\n        [ _, counts, ]  = event\n        rank            = 0\n        last_count      = null\n        for [ guide, count, ], idx in counts\n          if count isnt last_count\n            rank       += +1\n            last_count  = count\n          counts[ idx ] = [ guide, count, rank, ]\n        send [ 'counts', counts, ]\n    #.......................................................................................................\n    $show_counts = =>\n      return $ ( event, send ) =>\n        [ _, counts, ]  = event\n        for [ guide, count, rank, ] in counts\n          echo \"#{rank}\\t#{count}\\t#{guide}\"\n    #.......................................................................................................\n    input\n      #.....................................................................................................\n      .pipe $select_glyph_and_guide()\n      # .pipe $filter_sample sample\n      .pipe $filter_by_frequencies frequencies\n      .pipe D.$show()\n      # .pipe $count_guides()\n      # .pipe $sort_counts()\n      # .pipe $rank_counts()\n      # .pipe $show_counts()\n    # #.......................................................................................................\n    # input\n    #   #.....................................................................................................\n    #   .pipe $select_glyph_and_guide()\n    #   # .pipe $filter_sample sample\n    #   .pipe $filter_by_frequencies frequencies\n    #   .pipe D.$show()\n    #   # .pipe $count_guides()\n    #   # .pipe $sort_counts()\n    #   # .pipe $rank_counts()\n    #   # .pipe $show_counts()\n    #   .pipe output\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@count_guides_with_frequencies = ->\n  db_route        = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  db              = HOLLERITH.new_db db_route, create: no\n  help \"using DB at #{db[ '%self' ][ 'location' ]}\"\n  #.........................................................................................................\n  step ( resume ) =>\n    ranks         = {}\n    frequencies   = yield @read_chtsai_frequencies resume\n    prefix        = [ 'pos', 'guide/has/uchr', ]\n    ### TAINT use of star not correct ###\n    query         = { prefix, star: '*', }\n    input         = HOLLERITH.create_phrasestream db, query\n    #.......................................................................................................\n    input.on 'end', -> help \"ok\"\n    #.......................................................................................................\n    $select_glyph_and_guide = =>\n      return $ ( phrase, send ) =>\n        [ _, _, guide, glyph, _, ] = phrase\n        send [ glyph, guide, ]\n    #.......................................................................................................\n    $filter_sample = ( sample ) =>\n      return $ ( [ glyph, guide, ], send ) =>\n        event = [ 'glyph-and-guide', glyph, guide, ]\n        if sample?\n          send event if sample[ glyph ]?\n        else\n          send event\n    #.......................................................................................................\n    $filter_by_frequencies = ( frequencies ) =>\n      return $ ( [ glyph, guide, ], send ) =>\n        if ( frequency = frequencies[ glyph ] )?\n          event = [ 'glyph-guide-and-frequency', glyph, guide, frequency, ]\n          send event\n    #.......................................................................................................\n    $count_guides_with_frequencies = =>\n      counts = {}\n      return $ ( event, send, end ) =>\n        if event?\n          [ type, glyph, guide, frequency, ] = event\n          counts[ guide ] = ( counts[ guide ] ? 0 ) + frequency\n        if end?\n          send [ 'counts', counts, ]\n          end()\n    #.......................................................................................................\n    $sort_counts = =>\n      return $ ( event, send ) =>\n        [ _, counts, ]  = event\n        counts          = ( [ guide, count, ] for guide, count of counts )\n        counts.sort ( a, b ) ->\n          return +1 if a[ 1 ] < b[ 1 ]\n          return -1 if a[ 1 ] > b[ 1 ]\n          return  0\n        send [ 'counts', counts, ]\n    #.......................................................................................................\n    $rank_counts = =>\n      return $ ( event, send ) =>\n        [ _, counts, ]  = event\n        rank            = 0\n        for [ guide, count, ], idx in counts\n          rank         += +1\n          counts[ idx ] = [ guide, count, rank, ]\n        send [ 'counts', counts, ]\n    #.......................................................................................................\n    $show_counts = =>\n      return $ ( event, send ) =>\n        [ _, counts, ]  = event\n        for [ guide, count, rank, ] in counts\n          echo \"#{rank}\\t#{count}\\t#{guide}\"\n    #.......................................................................................................\n    input\n      #.....................................................................................................\n      .pipe $select_glyph_and_guide()\n      .pipe $filter_by_frequencies frequencies\n      # .pipe D.$show()\n      .pipe $count_guides_with_frequencies()\n      .pipe $sort_counts()\n      .pipe $rank_counts()\n      .pipe $show_counts()\n    #.......................................................................................................\n    return null\n\n############################################################################################################\nunless module.parent?\n  # @main()\n  @count_guides_with_frequencies()\n"]}