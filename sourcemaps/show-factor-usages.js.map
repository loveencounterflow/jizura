{"version":3,"sources":["show-factor-usages.coffee"],"names":[],"mappings":"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","file":"show-factor-usages.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# # njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/copy-jizuradb-to-Hollerith2-format'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nHOLLERITH                 = require 'hollerith'\n# DEMO                      = require 'hollerith/lib/demo'\nKWIC                      = require 'kwic'\nƒ                         = CND.format_number.bind CND\n\n\n#-----------------------------------------------------------------------------------------------------------\n@read_sample = ( db, limit_or_list, handler ) ->\n  ### Return a gamut of select glyphs from the DB. `limit_or_list` may be a list of glyphs or a number\n  representing an upper bound to the usage rank recorded as `rank/cjt`. If `limit_or_list` is a list,\n  a POD whose keys are the glyphs in the list is returned; if it is a number, a similar POD with all the\n  glyphs whose rank is not worse than the given limit is returned. If `limit_or_list` is smaller than zero\n  or equals infinity, `null` is returned to indicate absence of a filter. ###\n  Z         = {}\n  #.......................................................................................................\n  if CND.isa_list limit_or_list\n    Z[ glyph ] = 1 for glyph in limit_or_list\n    return handler null, Z\n  #.......................................................................................................\n  return handler null, null if limit_or_list < 0 or limit_or_list is Infinity\n  #.......................................................................................................\n  throw new Error \"expected list or number, got a #{type}\" unless CND.isa_number limit_or_list\n  #.......................................................................................................\n  unless db?\n    db_route  = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n    db       ?= HOLLERITH.new_db db_route, create: no\n  #.......................................................................................................\n  lo      = [ 'pos', 'rank/cjt', 0, ]\n  hi      = [ 'pos', 'rank/cjt', limit_or_list, ]\n  query   = { lo, hi, }\n  input   = HOLLERITH.create_phrasestream db, query\n  #.......................................................................................................\n  input\n    .pipe $ ( phrase, send ) =>\n      [ _, _, _, glyph, ] = phrase\n      Z[ glyph ]          = 1\n    .pipe D.$on_end -> handler null, Z\n\n#-----------------------------------------------------------------------------------------------------------\n@main = ->\n  db_route        = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  db              = HOLLERITH.new_db db_route, create: no\n  help \"using DB at #{db[ '%self' ][ 'location' ]}\"\n  #.........................................................................................................\n  step ( resume ) =>\n    ranks         = {}\n    include       = Infinity\n    include       = 100\n    # include       = [ '寿', '邦', '帮', '畴', '铸', '筹', '涛', '祷', '绑', '綁',    ]\n    #.......................................................................................................\n    sample        = yield @read_sample db, include, resume\n    debug '©u2o8L', ( Object.keys sample ).join ' '\n    #.......................................................................................................\n    prefix        = [ 'pos', 'guide/has/uchr', ]\n    query         = { prefix, }\n    input         = HOLLERITH.create_phrasestream db, query\n    #.......................................................................................................\n    input.on 'end', -> help \"ok\"\n    #.......................................................................................................\n    input\n      #.....................................................................................................\n      .pipe D.$show()\n    #   .pipe @v1_$split_so_bkey()\n    #   .pipe @$show_progress 1e4\n    #   .pipe @$keep_small_sample()\n    #   .pipe @$throw_out_pods()\n    #   .pipe @$cast_types ds_options\n    #   .pipe @$collect_lists()\n    #   .pipe @$compact_lists()\n    #   .pipe @$add_version_to_kwic_v1()\n    #   .pipe @$add_kwic_v2()\n    #   .pipe @$add_kwic_v3 factor_infos\n    #   .pipe D.$count ( count ) -> help \"kept #{ƒ count} phrases\"\n    #   .pipe D.$stop_time \"copy Jizura DB\"\n    #   .pipe output\n    #.......................................................................................................\n    return null\n\n############################################################################################################\nunless module.parent?\n  @main()\n"]}