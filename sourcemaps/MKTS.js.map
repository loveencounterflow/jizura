{"version":3,"sources":["MKTS.coffee"],"names":[],"mappings":"AAKA;AAAA,MAAA,2NAAA;IAAA;;;EAAA,MAAA,GAA4B,OAAA,CAAQ,IAAR;;EAE5B,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAE5B,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAG5B,CAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,GAA4B,CAAC,CAAC,KAAK,CAAC,IAAR,CAAa,CAAb;;EAG5B,eAAA,GAA4B,OAAA,CAAQ,aAAR;;EAE5B,oBAAA,GAA4B,OAAA,CAAQ,oBAAR;;EAE5B,MAAA,GAA4B,MAAA,CAAO,QAAP;;EAK5B,IAAC,CAAA,wBAAD,GAA4B,CAC1B,CAAE,OAAF,EAAyB,UAAzB,CAD0B,EAE1B,CAAE,OAAF,EAAyB,UAAzB,CAF0B,EAG1B,CAAE,KAAF,EAAyB,KAAzB,CAH0B,EAI1B,CAAE,KAAF,EAAyB,KAAzB,CAJ0B,EAK1B,CAAE,KAAF,EAAyB,KAAzB,CAL0B,EAM1B,CAAE,KAAF,EAAyB,KAAzB,CAN0B,EAO1B,CAAE,IAAF,EAAyB,KAAzB,CAP0B,EAQ1B,CAAE,IAAF,EAAyB,KAAzB,CAR0B,EAS1B,CAAE,KAAF,EAAyB,qBAAzB,CAT0B,EAU1B,CAAE,IAAF,EAAyB,oBAAzB,CAV0B,EAW1B,CAAE,IAAF,EAAyB,KAAzB,CAX0B,EAY1B,CAAE,WAAF,EAAyB,mBAAzB,CAZ0B,EAa1B,CAAE,WAAF,EAAyB,MAAzB,CAb0B;;EAiB5B,IAAC,CAAA,cAAD,GAAkB,SAAE,IAAF;AAChB,QAAA;IAAA,CAAA,GAAI;AACJ;AAAA,SAAA,iDAAA;uBAAM,mBAAS;MACb,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,OAAV,EAAmB,WAAnB;AADN;AAEA,WAAO;EAJS;;EAOlB,IAAC,CAAA,uBAAD,GAA2B,SAAE,OAAF;AACzB,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AACP,YAAA;QAAA,IAAG,KAAC,CAAA,MAAD,CAAQ,KAAR,EAAe,GAAf,EAAoB,MAApB,CAAH;UACI,eAAF,EAAQ,eAAR,EAAc,eAAd,EAAoB;UACpB,IAAM,CAAA,KAAA,CAAN,GAAgB;UAChB,IAAA,GAAgB,KAAC,CAAA,sBAAD,CAAwB,IAAxB,EAA8B,OAA9B;iBAChB,IAAA,CAAK,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAL,EAJF;SAAA,MAAA;iBAME,IAAA,CAAK,KAAL,EANF;;MADO;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EADkB;;EAW3B,IAAC,CAAA,sBAAD,GAA0B,SAAE,IAAF,EAAQ,OAAR;;AACxB;;AACA;AADA,QAAA;IAEA,YAAA,2FAA0E;IAC1E,mBAAA,yCAA2C,CAAA,qBAAA;IAC3C,YAAA,GAAwB;IACxB,CAAA,GAAwB;IACxB,OAAA,GAAwB;IACxB,QAAA,GAAwB;IAExB,IAAO,2BAAP;AACE,YAAU,IAAA,KAAA,CAAM,oCAAN,EADZ;;IAGA,OAAA,GAAU,CAAA,SAAA,KAAA;aAAA,SAAA;QACR,IAAG,OAAO,CAAC,MAAR,GAAiB,CAApB;UAEE,IAAG,YAAA,KAAkB,IAAlB,IAAA,YAAA,KAAwB,OAA3B;YACE,CAAC,CAAC,IAAF,CAAO,KAAC,CAAA,cAAD,CAAgB,OAAO,CAAC,IAAR,CAAa,EAAb,CAAhB,CAAP,EADF;WAAA,MAAA;YAGE,CAAC,CAAC,IAAF,CAAO,OAAO,CAAC,IAAR,CAAa,EAAb,CAAP;YACA,CAAC,CAAC,IAAF,CAAO,GAAP,EAJF;WAFF;;QAOA,OAAO,CAAC,MAAR,GAAiB;AACjB,eAAO;MATC;IAAA,CAAA,CAAA,CAAA,IAAA;AAWV;AAAA,SAAA,sCAAA;;MACE,QAAA,GAAc,KAAK,CAAC,OAAN,CAAc,GAAd;MACZ,eAAA,GAAF,EACE,gBAAA,IADF,EAEE,gBAAA,IAFF,EAGE,eAAA;AAEF,cAAO,GAAP;AAAA,aACO,SADP;UACuB,GAAA,GAAM;AAAtB;AADP,aAEO,OAFP;UAEuB,GAAA,GAAM;AAF7B;MAIA,IAAG,yCAAH;QACE,OAAA,CAAA;QACA,CAAC,CAAC,IAAF,CAAO,WAAP;QACA,YAAA,GAAe;AACf,iBAJF;;MAMA,IAAO,4CAAP;QACE,IAAA,CAAK,cAAA,GAAc,CAAC,GAAA,CAAI,GAAJ,CAAD,CAAd,GAAuB,IAAvB,GAA2B,IAA3B,GAAgC,GAAhC,GAAmC,GAAxC;QACA,OAAA,CAAA;QACA,OAAO,CAAC,IAAR,CAAa,GAAb;AACA,iBAJF;;MAMA,IAAG,YAAA,KAAkB,OAArB;QACE,OAAA,CAAA;QACA,YAAA,GAAe;QACf,IAAoC,OAAA,KAAW,OAA/C;UAAA,OAAO,CAAC,IAAR,CAAa,IAAA,GAAK,OAAL,GAAa,GAA1B,EAAA;SAHF;;MAKA,OAAO,CAAC,IAAR,CAAa,GAAb;AA5BF;IA8BA,OAAA,CAAA;AACA,WAAO,CAAC,CAAC,IAAF,CAAO,EAAP;EAvDiB;;EA6D1B,IAAC,CAAA,oBAAD,GAAwB,SAAA;;AAEtB;AAAA,QAAA;IAEA,WAAA,GAAc;IAEd,QAAA,GACE;MAAA,IAAA,EAAgB,IAAhB;MACA,QAAA,EAAgB,KADhB;MAEA,MAAA,EAAgB,KAFhB;MAGA,UAAA,EAAgB,WAHhB;MAIA,OAAA,EAAgB,IAJhB;MAKA,WAAA,EAAgB,IALhB;MAMA,MAAA,EAAgB,MANhB;;IAYF,CAAA,GAAQ,IAAA,eAAA,CAAgB,WAAhB,EAA6B,QAA7B;IAER,CACE,CAAC,MADH,CACU,MADV,CAGE,CAAC,MAHH,CAGU,QAHV,CAIE,CAAC,MAJH,CAIU,WAJV,CAKE,CAAC,MALH,CAKU,eALV,CAME,CAAC,MANH,CAMU,UANV,CAOE,CAAC,MAPH,CAOU,MAPV,CAQE,CAAC,MARH,CAQU,OARV,CASE,CAAC,MATH,CASU,UATV,CAUE,CAAC,MAVH,CAUU,aAVV,CAWE,CAAC,MAXH,CAWU,QAXV,CAaE,CAAC,MAbH,CAaU,OAbV,CAcE,CAAC,MAdH,CAcU,YAdV,CAeE,CAAC,MAfH,CAeU,IAfV,CAgBE,CAAC,MAhBH,CAgBU,MAhBV,CAiBE,CAAC,MAjBH,CAiBU,WAjBV,CAkBE,CAAC,MAlBH,CAkBU,SAlBV,CAmBE,CAAC,MAnBH,CAmBU,UAnBV,CAoBE,CAAC,MApBH,CAoBU,YApBV,CAqBE,CAAC,MArBH,CAqBU,OArBV,CAsBE,CAAC,MAtBH,CAsBU,WAtBV,CAuBE,CAAC,MAvBH,CAuBU,WAvBV,CAwBE,CAAC,MAxBH,CAwBU,OAxBV,CAyBE,CAAC,MAzBH,CAyBU,QAzBV,CA0BE,CAAC,MA1BH,CA0BU,SA1BV,CA2BE,CAAC,MA3BH,CA2BU,cA3BV,CA4BE,CAAC,MA5BH,CA4BU,aA5BV;IA8BA,CAAC,CAAC,GAAF,CAAM,OAAA,CAAQ,sBAAR,CAAN;AAaA,WAAO;EAhEe;;EAmExB,IAAC,CAAA,gBAAD,GAAoB,SAAE,CAAF;AAClB,WAAO,CAAA,CAAE,SAAE,KAAF,EAAS,IAAT;AACP,UAAA;AAAA,cAAO,CAAE,IAAA,GAAO,KAAO,CAAA,MAAA,CAAhB,CAAP;AAAA,aACO,QADP;AACqB;AAAA;eAAA,qCAAA;;yBAAA,IAAA,CAAK,SAAL;AAAA;;AAAd;AADP;iBAEO,IAAA,CAAK,KAAL;AAFP;IADO,CAAF;EADW;;EAOpB,IAAC,CAAA,sBAAD,GAA0B,SAAE,CAAF;;AACxB;AAAA,QAAA;IACA,SAAA,GAAc,IAAC,CAAA,oBAAD,CAAA;AACd,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AACP,YAAA;QAAE,aAAA,IAAF,EAAQ,YAAA;QACR,IAAG,IAAA,KAAQ,YAAX;;AACE;;AACA;;;UAEA,UAAA,GAAc,KAAA,GAAQ,KAAO,CAAA,SAAA;;AAC7B;;AACA;UACA,WAAA,GAAc;UACd,MAAA,GAAc,SAAS,CAAC,KAAV,CAAgB,UAAhB,EAA4B,WAA5B;;AACd;UACA,OAAA,sEAAwC,CAAE,MAA5B,CAAmC,CAAnC,EAAsC,CAAtC;UACd,uCAAsB,CAAA,SAAA,WAAf,KAA8B,KAArC;AACE,kBAAU,IAAA,KAAA,CAAM,qBAAN,EADZ;;AAEA;eAAA,wCAAA;;yBAAA,CAAC,CAAC,UAAU,CAAC,KAAb,CAAmB,KAAnB;AAAA;yBAbF;SAAA,MAAA;iBAeE,IAAA,CAAK,KAAL,EAfF;;MAFO;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EAHiB;;EAuB1B,sBAAA,GAAyB,SAAA;AACvB,QAAA;IAAA,MAAA,GAAc,CAAE,OAAA,CAAQ,QAAR,CAAF,CAAoB,CAAC;IACnC,MAAA,GAAkB,IAAA,MAAA,CAAA;IAClB,WAAA,GAAc,SAAE,MAAF;aAAc,oCAAA,GAAoC,CAAC,GAAA,CAAI,MAAJ,CAAD;IAAlD;IACd,CAAA,GAAc;IAEd,CAAG,CAAA,sBAAA,CAAH,GAA8B,SAAE,MAAF;AAC5B,UAAA;MAAA,IAAA,GAAU,MAAM,CAAC,aAAP,CAAqB,MAArB;MACV,IAA0C,CAAE,GAAA,GAAM,IAAM,CAAA,YAAA,CAAd,CAA8B,CAAC,MAA/B,KAAyC,CAAnF;AAAA,cAAU,IAAA,KAAA,CAAM,WAAA,CAAY,MAAZ,CAAN,EAAV;;MACA,EAAA,GAAK,GAAK,CAAA,CAAA;MACV,2CAA4D,CAAE,gBAApB,KAA8B,CAAxE;AAAA,cAAU,IAAA,KAAA,CAAM,WAAA,CAAY,MAAZ,CAAN,EAAV;;AACA,aAAO,CAAE,OAAF,EAAW,EAAI,CAAA,SAAA,CAAf,2CAAiD,EAAjD;IALqB;IAO9B,CAAG,CAAA,mBAAA,CAAH,GAA2B,SAAE,MAAF;AACzB,UAAA;MAAA,IAAA,GAAU,MAAM,CAAC,aAAP,CAAqB,MAArB;MACV,KAAA,CAAM,QAAN,EAAgB,IAAhB;AACA,aAAO;IAHkB;AAK3B,WAAO;EAlBgB;;EAoBzB,aAAA,GAAgB,sBAAA,CAAA;;EAChB,IAAC,CAAA,oBAAD,GAAwB,aAAe,CAAA,sBAAA;;EACvC,IAAC,CAAA,iBAAD,GAAwB,aAAe,CAAA,mBAAA;;EAGvC,IAAC,CAAA,eAAD,GAAmB,SAAE,MAAF;AACjB,QAAA;IAAA,IAAG,sEAAH;AACE,aAAO,CAAE,KAAF,EAAS,KAAO,CAAA,CAAA,CAAhB,EADT;;IAEA,IAAG,oEAAH;AACE,aAAO,CAAE,SAAF,EAAa,SAAb,EAAwB,KAAO,CAAA,CAAA,CAA/B,EADT;;AAEA,WAAO,IAAC,CAAA,oBAAD,CAAsB,MAAtB;EALU;;EAMnB,IAAC,CAAA,eAAe,CAAC,iBAAjB,GAAuC;;EACvC,IAAC,CAAA,eAAe,CAAC,eAAjB,GAAuC;;EAMvC,IAAC,CAAA,MAAD,GAAU;;EAGV,IAAC,CAAA,MAAM,CAAC,KAAR,GAAkB,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB;;EAClB,IAAC,CAAA,MAAM,CAAC,MAAR,GAAkB,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB;;EAClB,IAAC,CAAA,MAAM,CAAC,IAAR,GAAkB,CAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB;;EAClB,IAAC,CAAA,MAAM,CAAC,KAAR,GAAkB,CAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB;;EAClB,IAAC,CAAA,MAAM,CAAC,MAAR,GACE;IAAA,GAAA,EAAM,GAAN;IACA,GAAA,EAAM,GADN;IAEA,GAAA,EAAM,GAFN;IAGA,GAAA,EAAM,GAHN;IAIA,GAAA,EAAM,GAJN;IAKA,GAAA,EAAM,GALN;IAMA,GAAA,EAAM,GANN;IAOA,GAAA,EAAM,GAPN;;;EAUF,IAAC,CAAA,MAAM,CAAC,aAAR,GAAwB,CAAA,SAAA,KAAA;WAAA,SAAE,KAAF,EAAS,QAAT;AACtB,UAAA;MAAA,IAAO,wCAAP;QACE,IAAuB,QAAA,KAAY,MAAnC;AAAA,iBAAO,SAAP;;AACA,cAAU,IAAA,KAAA,CAAM,iBAAA,GAAiB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAAvB,EAFZ;;AAGA,aAAO;IAJe;EAAA,CAAA,CAAA,CAAA,IAAA;;EASxB,IAAC,CAAA,OAAD,GAAc;;;AAGd;;EACA,WAAA,GAAkB;;EAClB,OAAA,GAAkB,MAAA,CAAA,OAAA,GAAY,WAAW,CAAC,MAAxB,GAA+B,IAA/B;;EAClB,eAAA,GAAkB,MAAA,CAAA,KAAA,GACR,WAAW,CAAC,MADJ,GACW,MADX,GAEV,OAAO,CAAC,MAFE,GAEK,KAFL,GAGR,WAAW,CAAC,MAHJ,GAGW,MAHX;;EAOlB,IAAC,CAAA,MAAM,CAAC,KAAR,GAAgB,CAAA,SAAA,KAAA;WAAA,SAAE,OAAF,EAAW,QAAX;AACd,UAAA;MAAA,UAAA,GAAc;MACd,IAAA,GAAc;MACd,WAAA,GAAc;MACd,SAAA,6EAAyC;MAEzC,IAAG,CAAM,eAAN,CAAA,IAAoB,OAAO,CAAC,MAAR,KAAkB,CAAzC;AACE,cAAU,IAAA,KAAA,CAAM,iCAAA,GAAiC,CAAC,GAAA,CAAI,OAAJ,CAAD,CAAvC,EADZ;;MAGA,KAAA,GAAQ,OAAO,CAAC,KAAR,CAAc,KAAC,CAAA,OAAO,CAAC,gBAAvB;MACR,IAA6D,aAA7D;AAAA,cAAU,IAAA,KAAA,CAAM,uBAAA,GAAuB,CAAC,GAAA,CAAI,OAAJ,CAAD,CAA7B,EAAV;;MAEE,YAAF,EAAK,qBAAL,EAAiB,eAAjB,EAAuB;MACvB,IAAuB,UAAU,CAAC,MAAX,KAAqB,CAA5C;QAAA,UAAA,GAAc,KAAd;;MACA,IAA6B,IAAI,CAAC,MAAL,KAAe,CAA5C;QAAA,IAAA,GAAc,KAAd;;MACA,IAAsB,WAAW,CAAC,MAAZ,KAAsB,CAA5C;QAAA,WAAA,GAAc,KAAd;;MAEA,IAAG,UAAA,KAAc,GAAjB;;AACE;QACA,IAAG,mBAAH;AACE,gBAAU,IAAA,KAAA,CAAM,0CAAA,GAA0C,CAAC,GAAA,CAAI,OAAJ,CAAD,CAAhD,EADZ;SAFF;OAAA,MAAA;;AAME;QACA,IAAG,SAAH;UACE,IAAG,CAAE,oBAAA,IAAoB,qBAAtB,CAAA,IAAwC,CAAE,qBAAA,IAAqB,oBAAvB,CAA3C;AACE,kBAAU,IAAA,KAAA,CAAM,qBAAA,GAAqB,CAAC,GAAA,CAAI,OAAJ,CAAD,CAA3B,EADZ;WADF;SAPF;;MAWA,IAAG,oBAAA,IAAgB,UAAA,KAAgB,GAAnC;;AACE;QACA,IAAO,aAAc,KAAC,CAAA,MAAM,CAAC,KAAtB,EAAA,UAAA,KAAP;AACE,gBAAU,IAAA,KAAA,CAAM,gCAAA,GAAgC,CAAC,GAAA,CAAI,OAAJ,CAAD,CAAtC,EADZ;;QAEA,IAAG,mBAAH;;AACE;UACA,IAAO,CAAE,KAAC,CAAA,MAAM,CAAC,aAAR,CAAsB,UAAtB,EAAkC,IAAlC,CAAF,CAAA,KAA8C,WAArD;AACE,kBAAU,IAAA,KAAA,CAAM,gCAAA,GAAgC,CAAC,GAAA,CAAI,OAAJ,CAAD,CAAtC,EADZ;WAFF;SAJF;;MAQA,IAAG,mBAAH;;AACE;QACA,IAAO,aAAe,KAAC,CAAA,MAAM,CAAC,MAAvB,EAAA,WAAA,KAAP;AACE,gBAAU,IAAA,KAAA,CAAM,iCAAA,GAAiC,CAAC,GAAA,CAAI,OAAJ,CAAD,CAAvC,EADZ;SAFF;;AAKA,aAAO,CAAE,UAAF,EAAc,IAAd,EAAoB,WAApB;IAzCO;EAAA,CAAA,CAAA,CAAA,IAAA;;EA4ChB,IAAC,CAAA,OAAO,CAAC,gBAAT,GAA4B;;EAG5B,IAAC,CAAA,OAAO,CAAC,WAAT,GAAuB,CAAA,SAAA,KAAA;WAAA,SAAA;AACrB,UAAA;MADuB;MACvB,KAAA,GAAQ;MAER,IAAA,GAAO,SAAE,KAAF;AAGL,YAAA;AAAA;AAAA,aAAA,cAAA;;UACI,QAAU,MAAV;UACF,IAAA,CAAgB,KAAK,CAAC,MAAN,cAAa,CAAA,KAAO,SAAA,WAAA,KAAA,CAAA,CAApB,CAAhB;AAAA,qBAAA;;4BACI,sBAAY,sBAAhB,EAAgC;UAC9B,eAAF,EAAQ;UACR,IAAG,IAAA,KAAQ,UAAX;YAEE,IAAI,CAAC,MAAL,CAAY,KAAZ,EAFF;WAAA,MAAA;YAKE,IAAI,CAAC,MAAL,CAAY,KAAZ;YACA,IAAyD,KAAO,CAAA,OAAA,CAAP,GAAmB,CAA5E;AAAA,oBAAU,IAAA,KAAA,CAAM,yBAAA,GAAyB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAA/B,EAAV;aANF;;AALF;AAYA,eAAO;MAfF;MAiBP,IAAI,CAAC,OAAL,GAAe;MAEf,IAAI,CAAC,UAAL,GAAkB,SAAE,OAAF;AAChB,YAAA;QAAA,IAA0D,mCAA1D;AAAA,gBAAU,IAAA,KAAA,CAAM,oBAAA,GAAoB,CAAC,GAAA,CAAI,OAAJ,CAAD,CAA1B,EAAV;;AACA,eAAO;MAFS;MAIlB,IAAI,CAAC,MAAL,GAAc,SAAA;AACZ,YAAA;QADc;AACd,aAAA,0CAAA;;UACE,IAAe,IAAI,CAAC,OAAL,CAAa,OAAb,CAAf;AAAA,mBAAO,KAAP;;AADF;AAEA,eAAO;MAHK;MAId,IAAI,CAAC,OAAL,GAAgB,SAAE,OAAF;eAAe,CAAE,IAAI,CAAC,UAAL,CAAgB,OAAhB,CAAF,CAA6B,CAAA,OAAA,CAA7B,GAAyC;MAAxD;MAEhB,IAAI,CAAC,KAAL,GAAgB,SAAE,OAAF;eAAe,IAAI,CAAC,MAAL,CAAY,IAAI,CAAC,UAAL,CAAgB,OAAhB,CAAZ;MAAf;MAChB,IAAI,CAAC,KAAL,GAAgB,SAAE,OAAF;eAAe,IAAI,CAAC,MAAL,CAAY,IAAI,CAAC,UAAL,CAAgB,OAAhB,CAAZ;MAAf;MAChB,IAAI,CAAC,MAAL,GAAgB,SAAE,KAAF;eAAe,KAAO,CAAA,OAAA,CAAP,IAAoB,CAAC;MAApC;;AAChB;MACA,IAAI,CAAC,MAAL,GAAgB,SAAE,KAAF;eAAe,KAAO,CAAA,OAAA,CAAP,IAAoB,CAAC;MAApC;MAEb,CAAA,SAAA;AACD,YAAA;AAAA;aAAA,0CAAA;;UACE,MAA8C,KAAK,CAAC,MAAM,CAAC,KAAb,CAAmB,OAAnB,CAA9C,EAAE,mBAAF,EAAc,qBAAd,EAA4B;UAC5B,KAAA,GACE;YAAA,KAAA,EAAU,CAAE,CAAE,UAAF,EAAc,WAAd,CAAF,EAAgC,YAAhC,CAAV;YACA,KAAA,EAAU,CADV;;uBAEF,IAAI,CAAC,OAAS,CAAA,OAAA,CAAd,GAA0B;AAL5B;;MADC,CAAA,CAAH,CAAA;AAQA,aAAO;IA9Cc;EAAA,CAAA,CAAA,CAAA,IAAA;;EAoDvB,IAAC,CAAA,2BAAD,GAA+B,SAAE,CAAF;AAC7B,QAAA;IAAA,cAAA,GAAkB;IAClB,QAAA,GAAkB;IAClB,QAAA,GAAkB,CAAE,CAAF,EAAK,CAAL;IAClB,KAAA,GAAkB;IAElB,YAAA,GAAe,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AACb,YAAA;QAAE,OAAU,MAAV;QACF,KAAA,CAAM,CAAE,GAAF,EAAO,IAAP,EAAa,KAAO,CAAA,SAAA,CAApB,EAAiC,IAAjC,CAAN;QACA,IAAgC,aAAQ,cAAR,EAAA,IAAA,KAAhC;iBAAA,cAAc,CAAC,IAAf,CAAoB,IAApB,EAAA;;MAHa;IAAA,CAAA,CAAA,CAAA,IAAA;AAKf,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT,EAAe,GAAf;AACP,YAAA;QAAA,KAAA,GAAQ;QACR,IAAG,aAAH;UAEI,aAAA,IAAF,EAAQ,YAAA;;YACR,MAAiB;;UACjB,OAAA,GAAiB,gCAAa,CAAb,CAAA,GAAmB;UACpC,MAAA,GAAiB,kCAAa,CAAb,CAAA,GAAmB;UAEpC,IAAA,GAAO;YACL,SAAA,OADK;YAEL,QAAA,MAFK;;UAIP,IAAG,QAAH;YACE,QAAA,GAAW;YACX,IAAA,CAAK,CAAE,GAAF,EAAO,UAAP,EAAmB,IAAnB,EAAyB,IAAzB,CAAL,EAFF;;UAIA,IAAA,CAAO,CAAC,CAAC,SAAT;AACE,oBAAO,IAAP;AAAA,mBAEO,cAFP;gBAEiC,IAAA,CAAK,CAAE,GAAF,EAAO,KAAO,CAAA,KAAA,CAAd,EAAwB,IAAxB,EAA4C,IAA5C,CAAL;AAA1B;AAFP,mBAGO,eAHP;gBAGiC,IAAA,CAAK,CAAE,GAAF,EAAO,KAAO,CAAA,KAAA,CAAd,EAAwB,IAAxB,EAA4C,IAA5C,CAAL;AAA1B;AAHP,mBAIO,gBAJP;gBAIiC;AAA1B;AAJP,mBAKO,iBALP;gBAKiC,IAAA,CAAK,CAAE,GAAF,EAAO,GAAP,EAAwB,IAAxB,EAA4C,IAA5C,CAAL;AAA1B;AALP,mBAMO,gBANP;gBAMiC,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAwB,IAAxB,EAA4C,IAA5C,CAAL;AAA1B;AANP,mBAOO,iBAPP;gBAOiC,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAwB,IAAxB,EAA4C,IAA5C,CAAL;AAA1B;AAPP,mBASO,aATP;gBASiC,IAAA,CAAK,CAAE,GAAF,EAAO,QAAP,EAAwB,IAAxB,EAA4C,IAA5C,CAAL;AAA1B;AATP,mBAUO,cAVP;gBAUiC,IAAA,CAAK,CAAE,GAAF,EAAO,QAAP,EAAwB,IAAxB,EAA4C,IAA5C,CAAL;AAA1B;AAVP,mBAWO,SAXP;gBAWiC,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAwB,IAAxB,EAA4C,IAA5C,CAAL;AAA1B;AAXP,mBAYO,UAZP;gBAYiC,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAwB,IAAxB,EAA4C,IAA5C,CAAL;AAA1B;AAZP,mBAcO,MAdP;gBAciC,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAwB,KAAO,CAAA,SAAA,CAA/B,EAA4C,IAA5C,CAAL;AAA1B;AAdP,mBAeO,IAfP;gBAeiC,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAwB,KAAO,CAAA,QAAA,CAA/B,EAA4C,IAA5C,CAAL;AAA1B;AAfP,mBAkBO,aAlBP;gBAmBI,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,IAAf,EAA4C,IAA5C,CAAL;gBACA,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,KAAO,CAAA,SAAA,CAAtB,EAAqC,KAAC,CAAA,IAAD,CAAM,IAAN,CAArC,CAAL;gBACA,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,IAAf,EAAqC,KAAC,CAAA,IAAD,CAAM,IAAN,CAArC,CAAL;AAHG;AAlBP,mBAuBO,YAvBP;gBAyBI,KAAA,CAAM,OAAN,EAAe,KAAC,CAAA,eAAD,CAAiB,KAAO,CAAA,SAAA,CAAxB,CAAf;AACA,sBAAU,IAAA,KAAA,CAAM,qBAAN;AAHP;AAvBP,mBA4BO,OA5BP;AA6BI,wBAAO,KAAO,CAAA,KAAA,CAAd;AAAA,uBACO,MADP;oBAEI,aAAA,GAAgB,KAAO,CAAA,MAAA;oBACvB,IAA0B,aAAa,CAAC,MAAd,KAAwB,CAAlD;sBAAA,aAAA,GAAgB,OAAhB;;oBACA,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,aAAf,EAA4C,IAA5C,CAAL;oBACA,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,KAAO,CAAA,SAAA,CAAtB,EAAqC,KAAC,CAAA,IAAD,CAAM,IAAN,CAArC,CAAL;oBACA,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,aAAf,EAAqC,KAAC,CAAA,IAAD,CAAM,IAAN,CAArC,CAAL;AALG;AADP;oBAOO,YAAA,CAAa,KAAb,EAAoB,IAApB;AAPP;AADG;AA5BP,mBAsCO,aAtCP;gBAuCI,OAA6B,KAAC,CAAA,eAAD,CAAiB,KAAO,CAAA,SAAA,CAAxB,CAA7B,EAAE,kBAAF,EAAY,cAAZ,EAAkB;AAClB,wBAAO,QAAP;AAAA,uBACO,SADP;oBAEI,IAAA,CAAK,CAAE,GAAF,EAAO,SAAP,EAAkB,KAAK,CAAC,IAAN,CAAA,CAAlB,EAAgC,IAAhC,CAAL;AADG;AADP,uBAGO,OAHP;oBAII,IAAO,IAAA,KAAQ,GAAf;sBACE,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAa,KAAb,EAAoB,IAApB,CAAL,EADF;;AADG;AAHP,uBAMO,KANP;oBAOI,IAAG,IAAA,KAAQ,GAAX;sBAAoB,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAL,EAApB;qBAAA,MAAA;sBACoB,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAL,EADpB;;AADG;AANP;AASO,0BAAU,IAAA,KAAA,CAAM,4BAAA,GAA4B,CAAC,GAAA,CAAI,QAAJ,CAAD,CAAlC;AATjB;AAFG;AAtCP;gBAkDO,YAAA,CAAa,KAAb,EAAoB,IAApB;AAlDP;YAoDA,QAAA,GAAW,IArDb;WAfF;;QAsEA,IAAG,WAAH;UACE,IAAG,cAAc,CAAC,MAAf,GAAwB,CAA3B;YACE,IAAA,CAAK,kBAAA,GAAkB,CAAC,cAAc,CAAC,IAAf,CAAA,CAAqB,CAAC,IAAtB,CAA2B,IAA3B,CAAD,CAAvB,EADF;;UAEA,IAAA,CAAK,CAAE,GAAF,EAAO,UAAP,EAAmB,IAAnB,EAAyB,EAAzB,CAAL;UACA,GAAA,CAAA,EAJF;;AAKA,eAAO;MA7EA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EAXsB;;EA2F/B,IAAC,CAAA,qBAAD,GAAyB,SAAE,CAAF;;AACvB;;;AAAA,QAAA;IAEA,eAAA,GAAsB;IACtB,gBAAA,GAAsB;IACtB,WAAA,GAAsB;IACtB,aAAA,GAAsB,MAAA,CAClB,eAAD,GAAiB,GAAjB,GAAoB,WAApB,GAAgC,WAAhC,GAGO,gBAHP,GAGwB,KAHxB,GAIQ,gBAJR,GAIyB,IAJzB,GAKK,gBALL,GAKsB,GALtB,GAKyB,CAAC,WAAA,GAAc,CAAf,CALzB,GAK0C,MAL1C,GAKmD,gBALnD,GAKoE,MALpE,GAQC,gBARD,GAQkB,GARlB,GAQqB,WARrB,GAQiC,GATd;IAWtB,cAAA,GAAsB;IACtB,SAAA,GAAsB;IACtB,KAAA,GAAsB,IAAC,CAAA,OAAO,CAAC,WAAT,CAAqB,QAArB,EAA+B,QAA/B,EAAyC,SAAzC,EAAoD,SAApD;AAEtB,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AACP,YAAA;QAAA,cAAA,GAAiB,KAAK,CAAC,MAAN,CAAa,QAAb,EAAuB,QAAvB,EAAiC,SAAjC,EAA4C,SAA5C;QACjB,KAAA,CAAM,KAAN;QACE,eAAF,EAAQ,eAAR,EAAc,eAAd,EAAoB;QACpB,IAAG,CAAE,CAAI,cAAN,CAAA,IAA2B,KAAC,CAAA,MAAD,CAAQ,KAAR,EAAe,GAAf,EAAoB,MAApB,CAA9B;UACE,UAAA,GAAa;AACb;AAAA,eAAA,qCAAA;;YACE,UAAA,GAAc,CAAI;YAClB,UAAA,GAAc;YACd,WAAA,GAAc;YACd,IAAG,UAAH;cACE,QAAA,GAAc,IAAI,CAAC,MAAL,GAAc;cAC5B,WAAkC,IAAa,CAAA,CAAA,CAAb,EAAA,aAAoB,KAAC,CAAA,MAAM,CAAC,KAA5B,EAAA,IAAA,MAAlC;gBAAA,UAAA,GAAc,IAAa,CAAA,CAAA,EAA3B;;cACA,WAAkC,IAAM,CAAA,QAAA,CAAN,EAAA,aAAoB,KAAC,CAAA,MAAM,CAAC,MAA5B,EAAA,IAAA,MAAlC;gBAAA,WAAA,GAAc,IAAM,CAAA,QAAA,EAApB;;cACA,IAAG,oBAAA,IAAgB,qBAAnB;gBACE,YAAA,GAAe,IAAM;gBACrB,IAAG,cAAc,CAAC,IAAf,CAAoB,YAApB,CAAH;kBACE,IAAA,CAAK,0BAAA,GAA0B,CAAC,GAAA,CAAI,IAAJ,CAAD,CAA/B;kBACA,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAa,IAAb,EAAqB,KAAC,CAAA,IAAD,CAAM,IAAN,CAArB,CAAL,EAFF;iBAAA,MAAA;kBAIE,IAAA,CAAK,CAAE,UAAF,EAAe,YAAf,EAA6B,IAA7B,EAAqC,KAAC,CAAA,IAAD,CAAM,IAAN,CAArC,CAAL;kBACA,IAAA,CAAK,CAAE,WAAF,EAAe,YAAf,EAA6B,IAA7B,EAAqC,KAAC,CAAA,IAAD,CAAM,IAAN,CAArC,CAAL,EALF;iBAFF;eAAA,MAQK,IAAG,kBAAH;gBACH,YAAA,GAAgB,IAAM;gBACtB,IAAG,oDAAH;kBACI,YAAF,EAAK,iBAAL,EAAa;AACb,0BAAO,MAAP;AAAA,yBACO,GADP;sBAEI,IAAA,CAAK,CAAE,UAAF,EAAc,MAAd,EAAsB,MAAtB,EAAgC,KAAC,CAAA,IAAD,CAAM,IAAN,CAAhC,CAAL;AADG;AADP;sBAII,IAAA,CAAK,SAAA,GAAS,CAAC,GAAA,CAAI,MAAJ,CAAD,CAAT,GAAqB,oBAArB,GAAwC,CAAC,GAAA,CAAI,IAAJ,CAAD,CAA7C;sBACA,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAa,IAAb,EAAqB,KAAC,CAAA,IAAD,CAAM,IAAN,CAArB,CAAL;AALJ,mBAFF;iBAAA,MAAA;kBASE,IAAA,CAAK,CAAE,UAAF,EAAc,YAAd,EAA4B,IAA5B,EAAoC,KAAC,CAAA,IAAD,CAAM,IAAN,CAApC,CAAL,EATF;iBAFG;eAAA,MAYA,IAAG,mBAAH;;AACH;gBACA,YAAA,GAAe,IAAM;gBACrB,IAAG,oDAAH;kBACI,YAAF,EAAK,iBAAL,EAAa;AAEb,0BAAO,MAAP;AAAA,yBACO,GADP;sBAEI,IAAA,CAAK,CAAE,WAAF,EAAe,MAAf,EAAuB,MAAvB,EAAiC,KAAC,CAAA,IAAD,CAAM,IAAN,CAAjC,CAAL;AADG;AADP;sBAII,IAAA,CAAK,SAAA,GAAS,CAAC,GAAA,CAAI,MAAJ,CAAD,CAAT,GAAqB,oBAArB,GAAwC,CAAC,GAAA,CAAI,IAAJ,CAAD,CAA7C;sBACA,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAa,IAAb,EAAqB,KAAC,CAAA,IAAD,CAAM,IAAN,CAArB,CAAL;AALJ,mBAHF;iBAAA,MAAA;kBAUE,IAAA,CAAK,CAAE,WAAF,EAAe,YAAf,EAA6B,IAA7B,EAAqC,KAAC,CAAA,IAAD,CAAM,IAAN,CAArC,CAAL,EAVF;iBAHG;eAAA,MAAA;gBAeH,KAAA,GAAQ,IAAI,CAAC,KAAL,CAAW,cAAX;gBACR,IAAO,aAAP;kBACE,IAAA,CAAK,uBAAA,GAAuB,CAAC,GAAA,CAAI,IAAJ,CAAD,CAA5B;kBACA,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAa,IAAb,EAAqB,KAAC,CAAA,IAAD,CAAM,IAAN,CAArB,CAAL,EAFF;iBAAA,MAAA;kBAII,YAAF,EAAK,iBAAL,EAAa;AACb,0BAAO,MAAP;AAAA,yBACO,GADP;sBAEI,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAe,IAAf,EAAuB,KAAC,CAAA,IAAD,CAAM,IAAN,CAAvB,CAAL;AADG;AADP;sBAII,IAAA,CAAK,SAAA,GAAS,CAAC,GAAA,CAAI,MAAJ,CAAD,CAAT,GAAqB,oBAArB,GAAwC,CAAC,GAAA,CAAI,IAAJ,CAAD,CAA7C;sBACA,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAa,IAAb,EAAqB,KAAC,CAAA,IAAD,CAAM,IAAN,CAArB,CAAL;AALJ,mBALF;iBAhBG;eAxBP;aAAA,MAAA;cAoDE,IAAA,CAAK,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAsB,KAAC,CAAA,IAAD,CAAM,IAAN,CAAtB,CAAL,EApDF;;AAJF,WAFF;SAAA,MAAA;UA6DE,IAAA,CAAK,KAAL,EA7DF;;AA+DA,eAAO;MAnEA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EArBgB;;EA2FzB,IAAC,CAAA,qBAAD,GAAyB,SAAE,CAAF;IACvB,CAAC,CAAC,SAAF,GAAc;AAEd,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AAEP,YAAA;QAAA,IAAG,KAAC,CAAA,MAAD,CAAQ,KAAR,EAAe,GAAf,EAAoB,KAApB,CAAH;UACI,YAAF,EAAK,YAAL,EAAQ,YAAR,EAAW;UACT,UAAsB,KAAtB;UACF,IAAA,CAAK,kCAAA,GAAmC,OAAnC,GAA2C,6BAAhD;UACA,CAAC,CAAC,SAAF,GAAc,KAJhB;SAAA,MAKK,IAAG,KAAC,CAAA,MAAD,CAAQ,KAAR,EAAe,GAAf,EAAoB,UAApB,CAAH;UACH,IAAA,CAAK,KAAL,EADG;SAAA,MAAA;UAGH,IAAA,CAAkB,CAAC,CAAC,SAApB;YAAA,IAAA,CAAK,KAAL,EAAA;WAHG;;AAKL,eAAO;MAZA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EAHgB;;EAkBzB,IAAC,CAAA,yBAAD,GAA6B,SAAE,CAAF;AAE3B,QAAA;IAAA,SAAA,GAAY;AAEZ,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AACP,YAAA;QAAE,eAAF,EAAQ,eAAR,EAAc,eAAd,EAAoB;QAEpB,IAAG,KAAC,CAAA,MAAD,CAAQ,KAAR,EAAe,GAAf,EAAoB,UAApB,CAAH;AACE,iBAAM,SAAS,CAAC,MAAV,GAAmB,CAAzB;YACE,SAAA,GAA8C,SAAS,CAAC,GAAV,CAAA;YAC5C,uBAAF,EAAY,uBAAZ,EAAsB,uBAAtB,EAAgC;AAChC,oBAAO,QAAP;AAAA,mBACO,GADP;gBACgB,QAAA,GAAW;AAApB;AADP,mBAEO,GAFP;gBAEgB,QAAA,GAAW;AAApB;AAFP,mBAGO,GAHP;gBAGgB,QAAA,GAAW;AAH3B;YAIA,CAAC,CAAC,MAAF,CAAS,CAAE,QAAF,EAAY,QAAZ,EAAsB,QAAtB,EAAkC,KAAC,CAAA,IAAD,CAAM,QAAN,CAAlC,CAAT;UAPF;UAQA,IAAA,CAAK,KAAL,EATF;SAAA,MAUK,IAAG,KAAC,CAAA,MAAD,CAAQ,KAAR,EAAe,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,CAAf,CAAH;UACH,SAAS,CAAC,IAAV,CAAe,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,CAAf;UACA,IAAA,CAAK,KAAL,EAFG;SAAA,MAGA,IAAG,KAAC,CAAA,MAAD,CAAQ,KAAR,EAAe,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,CAAf,CAAH;;AACH;UACA,SAAS,CAAC,GAAV,CAAA;UACA,IAAA,CAAK,KAAL,EAHG;SAAA,MAAA;UAKH,IAAA,CAAK,KAAL,EALG;;AAOL,eAAO;MAvBA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EAJoB;;EA8B7B,IAAC,CAAA,MAAD,GAAU,SAAE,KAAF,EAAS,IAAT,EAAe,IAAf;;AACR;;AACA;;;AADA,QAAA;IAGA,IAAgB,IAAC,CAAA,SAAD,CAAW,KAAX,CAAhB;AAAA,aAAO,MAAP;;IACA,IAAG,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAA,GAA+B,CAAlC;AACE,YAAU,IAAA,KAAA,CAAM,oCAAA,GAAqC,KAA3C,EADZ;;IAEA,IAAG,YAAH;AACE,cAAO,YAAA,GAAe,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAAtB;AAAA,aACO,MADP;UACmB,IAAoB,KAAO,CAAA,CAAA,CAAP,KAAc,IAAlC;AAAA,mBAAO,MAAP;;AAAZ;AADP,aAEO,MAFP;UAEmB,UAAoB,KAAO,CAAA,CAAA,CAAP,EAAA,aAAc,IAAd,EAAA,GAAA,KAApB;AAAA,mBAAO,MAAP;;AAAZ;AAFP;AAGO,gBAAU,IAAA,KAAA,CAAM,+BAAA,GAAgC,YAAtC;AAHjB,OADF;;IAKA,IAAG,YAAH;AACE,cAAO,YAAA,GAAe,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAAtB;AAAA,aACO,MADP;UACmB,IAAoB,KAAO,CAAA,CAAA,CAAP,KAAc,IAAlC;AAAA,mBAAO,MAAP;;AAAZ;AADP,aAEO,MAFP;UAEmB,WAAoB,KAAO,CAAA,CAAA,CAAP,EAAA,aAAc,IAAd,EAAA,IAAA,KAApB;AAAA,mBAAO,MAAP;;AAAZ;AAFP;AAGO,gBAAU,IAAA,KAAA,CAAM,+BAAA,GAAgC,YAAtC;AAHjB,OADF;;AAKA,WAAO;EAjBC;;EAuBV,IAAC,CAAA,KAAD,GAAS,SAAE,KAAF;;AACP;;;;IAGA,KAAO,CAAA,CAAA,CAAK,CAAA,SAAA,CAAZ,GAA0B;AAC1B,WAAO;EALA;;EAQT,IAAC,CAAA,UAAD,GAAgB,SAAE,KAAF;AAAa,QAAA;0CAAa,CAAA,SAAA,WAAb,KAA4B;EAAzC;;EAChB,IAAC,CAAA,YAAD,GAAgB,SAAE,KAAF;WAAa,CAAI,IAAC,CAAA,UAAD,CAAY,KAAZ;EAAjB;;EAGhB,IAAC,CAAA,IAAD,GAAQ,SAAE,KAAF;;AACN;;;;IAGA,KAAO,CAAA,CAAA,CAAK,CAAA,QAAA,CAAZ,GAAyB;AACzB,WAAO;EALD;;EAQR,IAAC,CAAA,SAAD,GAAa,SAAE,KAAF;AAAa,QAAA;0CAAa,CAAA,QAAA,WAAb,KAA2B;EAAxC;;EAGb,IAAC,CAAA,IAAD,GAAQ,SAAA;AACN,QAAA;IADQ,kBAAG;;AACX;;;;;IAIA,IAAG,CAAE,QAAA,GAAW,GAAG,CAAC,QAAJ,CAAa,CAAb,CAAb,CAAH;MAAsC,CAAA,GAAI,GAA1C;KAAA,MACK,IAAW,GAAG,CAAC,OAAJ,CAAa,CAAb,CAAX;MAAiC,CAAA,GAAI,GAArC;KAAA,MAAA;AACA,YAAU,IAAA,KAAA,CAAM,mBAAA,GAAmB,CAAC,GAAG,CAAC,OAAJ,CAAY,CAAZ,CAAD,CAAzB,EADV;;IAEL,CAAA,GAAU,MAAM,CAAC,MAAP,eAAc,CAAA,CAAA,EAAG,CAAG,SAAA,WAAA,OAAA,CAAA,CAApB;IACV,IAAoC,QAAA,IAAa,uBAAjD;MAAA,CAAG,CAAA,CAAA,CAAH,GAAU,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,IAAlB,EAAV;;AACA,WAAO;EAVD;;EAaR,IAAC,CAAA,oBAAD,GAAwB,SAAE,IAAF;AAAY,QAAA;AAAE;AAAA;SAAA,qCAAA;;UAA0C,IAAI,CAAC,MAAL,GAAc;qBAAxD;;AAAA;;EAAd;;EAGxB,IAAC,CAAA,qBAAD,GAAyB,SAAE,IAAF,EAAQ,SAAR,EAAmB,IAAnB;IACvB,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;MACE,IAAA,CAAK,CAAE,GAAF,EAAO,MAAP,EAAiB,SAAS,CAAC,IAAV,CAAe,EAAf,CAAjB,EAAsC,IAAtC,CAAL;MACA,SAAS,CAAC,MAAV,GAAmB,EAFrB;;AAGA,WAAO;EAJgB;;EAOzB,IAAC,CAAA,mBAAD,GAAuB,SAAE,CAAF;AACrB,QAAA;IAAA,cAAA,GAAoB;IACpB,WAAA,GAAoB;IACpB,SAAA,GAAoB;AACpB,WAAO,CAAC,CAAC,QAAF,CAAW,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,SAAT;AAChB,YAAA;QAAA,IAAG,aAAH;UACI,eAAF,EAAQ,eAAR,EAAc,eAAd,EAAoB;UACpB,IAAG,IAAA,KAAQ,GAAX;YACE,IAAgC,aAAQ,cAAR,EAAA,IAAA,KAAhC;cAAA,cAAc,CAAC,IAAf,CAAoB,IAApB,EAAA;;YACA,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,KAAf,CAAL,EAFF;WAAA,MAAA;YAIE,KAAA,GAAQ,GAAG,CAAC;YAEZ,IAAG,KAAC,CAAA,SAAD,CAAW,KAAX,CAAH;cACE,KAAA,GAAQ,GAAG,CAAC,MADd;aAAA,MAAA;AAGE,sBAAO,IAAP;AAAA,qBACO,GADP;AAAA,qBACY,GADZ;kBAC0B,KAAA,GAAQ,GAAG,CAAC;AAA1B;AADZ,qBAEO,GAFP;AAAA,qBAEW,GAFX;AAAA,qBAEiB,GAFjB;kBAE0B,KAAA,GAAQ,GAAG,CAAC;AAArB;AAFjB,qBAGO,GAHP;AAAA,qBAGY,GAHZ;AAAA,qBAGiB,GAHjB;kBAG0B,KAAA,GAAQ,GAAG,CAAC;AAArB;AAHjB,qBAIO,GAJP;kBAI0B,KAAA,GAAQ,GAAG,CAAC;AAA/B;AAJP,qBAKO,GALP;AAMI,0BAAO,IAAP;AAAA,yBACO,MADP;sBACmB,KAAA,GAAQ,GAAG,CAAC;AAD/B;AANJ,eAHF;;YAaA,IAAA,GAAU,YAAH,GAAgB,KAAA,CAAM,GAAA,CAAI,IAAJ,CAAN,CAAhB,GAAsC;AAC7C,oBAAO,IAAP;AAAA,mBACO,MADP;gBAEI,GAAA,CAAI,WAAA,GAAc,CAAE,KAAA,CAAM,IAAN,CAAF,CAAd,GAA+B,GAA/B,GAAqC,GAAA,CAAI,IAAJ,CAAzC;AADG;AADP,mBAGO,KAHP;gBAII,8CAAuB,KAAvB;kBACE,GAAA,CAAI,WAAA,GAAc,CAAE,KAAA,CAAM,IAAN,CAAF,CAAd,GAA+B,CAAE,KAAA,CAAM,IAAN,CAAF,CAA/B,GAAgD,GAAhD,GAAsD,IAA1D,EADF;;AADG;AAHP;gBAOI,GAAA,CAAI,WAAA,GAAc,CAAE,KAAA,CAAM,IAAN,CAAF,CAAd,GAA+B,CAAE,KAAA,CAAM,IAAN,CAAF,CAA/B,GAAgD,GAAhD,GAAsD,IAA1D;AAPJ;AASA,oBAAO,IAAP;AAAA,mBAEO,GAFP;AAAA,mBAEY,GAFZ;AAAA,mBAEiB,GAFjB;AAAA,mBAEsB,GAFtB;AAAA,mBAE2B,GAF3B;AAAA,mBAEgC,GAFhC;AAGI,wBAAO,IAAP;AAAA,uBACO,GADP;AAAA,uBACY,GADZ;AAAA,uBACiB,GADjB;oBAEI,SAAS,CAAC,IAAV,CAAe,CAAE,IAAF,EAAQ,IAAR,CAAf;AADa;AADjB,uBAGO,GAHP;AAAA,uBAGY,GAHZ;AAAA,uBAGiB,GAHjB;oBAII,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;sBACE,OAAkC,SAAS,CAAC,GAAV,CAAA,CAAlC,EAAE,sBAAF,EAAgB;sBAChB,IAAO,YAAA,KAAgB,IAAvB;wBACE,YAAA,GAAe;0BAAE,GAAA,EAAK,GAAP;0BAAY,GAAA,EAAK,GAAjB;0BAAsB,KAAA,GAAtB;0BAA2B,KAAA,GAA3B;yBAAmC,CAAA,YAAA;wBAClD,IAAA,CAAK,cAAA,GAAe,IAAf,GAAsB,IAAtB,GAA2B,QAA3B,GAAmC,YAAnC,GAAkD,YAAlD,GAA+D,eAApE,EAFF;uBAFF;qBAAA,MAAA;sBAME,IAAA,CAAK,kBAAL,EANF;;AAJJ;gBAWA,WAAA,GAAc,CAAM,IAAA,KAAA,CAAM,SAAS,CAAC,MAAhB,CAAN,CAA8B,CAAC,IAA/B,CAAoC,IAApC;AAdlB,aA7BF;WAFF;;QA+CA,IAAG,SAAH;UACE,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;YACE,IAAA,CAAK,iBAAA,GAAiB,CAAC,SAAS,CAAC,IAAV,CAAe,IAAf,CAAD,CAAtB,EADF;;UAEA,IAAG,cAAc,CAAC,MAAf,GAAwB,CAA3B;YACE,IAAA,CAAK,kBAAA,GAAkB,CAAC,cAAc,CAAC,IAAf,CAAA,CAAqB,CAAC,IAAtB,CAA2B,IAA3B,CAAD,CAAvB,EADF;WAHF;;AAKA,eAAO;MArDS;IAAA,CAAA,CAAA,CAAA,IAAA,CAAX;EAJc;;EA4DvB,IAAC,CAAA,gBAAD,GAAoB,SAAE,CAAF;AAClB,QAAA;IAAA,WAAA,GAAoB;IACpB,SAAA,GAAoB;IACpB,gBAAA,GAAoB,CAAC,CAAC,WAAa,CAAA,kBAAA;IACnC,MAAA,GAAoB,MAAM,CAAC,iBAAP,CAAyB,gBAAzB;IACpB,UAAA,GAAoB,CAAC,CAAC,oBAAF,CAAA;IACpB,KAAA,GAAoB,UAAU,CAAC,KAAK,CAAC,IAAjB,CAAsB,UAAtB;IACpB,UAAU,CAAC,IAAX,CAAgB,MAAhB;AAEA,WAAO,CAAC,CAAC,QAAF,CAAW,SAAE,KAAF,EAAS,SAAT;AAChB,UAAA;MAAA,IAAG,aAAH;QACI,eAAF,EAAQ,eAAR,EAAc,eAAd,EAAoB;QACpB,IAAO,IAAA,KAAU,KAAV,IAAA,IAAA,KAAiB,MAAxB;UACI,UAA4B,KAA5B;UACF,MAAA,GAA8B,IAAA,GAAK,OAAL,GAAa;AAE3C,kBAAO,IAAP;AAAA,iBACO,GADP;cAEI,KAAA,CAAM,IAAA,GAAK,MAAL,GAAc,IAAd,GAAqB,IAArB,GAA0B,IAAhC;AADG;AADP,iBAGO,GAHP;AAAA,iBAGY,GAHZ;AAAA,iBAGiB,GAHjB;cAII,KAAA,CAAM,EAAA,GAAG,MAAH,GAAY,IAAZ,GAAmB,IAAzB;AADa;AAHjB,iBAKO,GALP;AAAA,iBAKY,GALZ;AAAA,iBAKiB,GALjB;AAAA,iBAKsB,GALtB;cAMI,KAAA,CAAS,IAAD,GAAM,IAAd;AADkB;AALtB,iBAOO,GAPP;cAQI,KAAA,CAAM,EAAA,GAAG,IAAH,GAAU,IAAhB;AADG;AAPP,iBASO,GATP;cAUI,KAAA,CAAM,EAAA,GAAG,IAAT;AADG;AATP,iBAWO,GAXP;AAYI,sBAAO,IAAP;AAAA,qBACO,IADP;kBAEI,KAAA,CAAM,IAAA,GAAK,MAAL,GAAc,IAAd,GAAqB,IAArB,GAA0B,IAAhC;AADG;AADP,qBAGO,GAHP;kBAII,KAAA,CAAM,KAAN;AADG;AAHP,qBAKO,MALP;;AAMI;kBACA,QAAA,GAAW,CAAE,GAAA,CAAI,IAAJ,CAAF,CAAY,CAAC,OAAb,CAAqB,MAArB,EAA6B,IAA7B;kBACX,KAAA,CAAM,QAAN;AAHG;AALP;kBAUI,KAAA,CAAM,IAAA,GAAK,MAAL,GAAY,WAAZ,GAAsB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAA5B;AAVJ;AADG;AAXP;cAwBI,KAAA,CAAM,IAAA,GAAK,MAAL,GAAY,WAAZ,GAAsB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAA5B;AAxBJ,WAJF;SAFF;;MA+BA,IAAG,SAAH;QACE,MAAM,CAAC,GAAP,CAAA,EADF;;AAEA,aAAO;IAlCS,CAAX;EATW;;EA8CpB,IAAC,CAAA,sBAAD,GAA0B,SAAE,IAAF;AACxB,QAAA;IAAA,CAAA,GAAI;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,IAAV,EAAsB,IAAtB;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,SAAV,EAAsB,IAAtB;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,OAAV,EAAsB,IAAtB;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,OAAV,EAAsB,IAAtB;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,KAAV,EAAsB,IAAtB;AACJ,WAAO;EAPiB;;EAU1B,IAAC,CAAA,0BAAD,GAA8B,SAAE,IAAF;AAC5B,QAAA;IAAA,CAAA,GAAI;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,IAAjB;AACJ,WAAO;EAHqB;;EAM9B,IAAC,CAAA,0BAAD,GAA8B,SAAE,IAAF;AAC5B,QAAA;IAAA,CAAA,GAAI;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,IAAjB;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,IAAjB;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,IAAjB;IACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,GAAjB;AACJ,WAAO;EANqB;;EAS9B,IAAC,CAAA,cAAD,GAAkB,SAAE,CAAF,EAAK,MAAL;AAChB,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AACP,YAAA;QAAA,IAAG,KAAC,CAAC,MAAF,CAAS,KAAT,EAAgB,GAAhB,EAAqB,CAAE,MAAF,EAAU,MAAV,EAAkB,SAAlB,CAArB,CAAH;UACI,eAAF,EAAQ,eAAR,EAAc,eAAd,EAAoB;UACpB,KAAO,CAAA,CAAA,CAAP,GAAa,MAAA,CAAO,IAAP,EAFf;;eAGA,IAAA,CAAK,KAAL;MAJO;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EADS;;EAQlB,IAAC,CAAA,oBAAD,GAAwB,SAAE,CAAF;AACtB,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AACP,YAAA;QAAA,IAAG,KAAC,CAAC,MAAF,CAAS,KAAT,EAAgB,GAAhB,EAAqB,MAArB,CAAH;UACI,eAAF,EAAQ,eAAR,EAAc,eAAd,EAAoB;UACpB,IAAkB,IAAA,KAAQ,EAA1B;mBAAA,IAAA,CAAK,KAAL,EAAA;WAFF;SAAA,MAAA;iBAIE,IAAA,CAAK,KAAL,EAJF;;MADO;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EADe;;EASxB,IAAC,CAAA,6BAAD,GAAiC,SAAE,CAAF;AAC/B,QAAA;IAAA,mBAAA,GAAsB;AACtB,WAAO,CAAA,CAAE,CAAA,SAAA,KAAA;aAAA,SAAE,KAAF,EAAS,IAAT;AACP,YAAA;QAAA,IAAG,KAAC,CAAC,MAAF,CAAS,KAAT,EAAiB,GAAjB,EAAsB,GAAtB,CAAH;UACE,KAAA,CAAM,OAAN;UACA,mBAAA,GAAsB;iBACtB,IAAA,CAAK,KAAL,EAHF;SAAA,MAIK,IAAG,mBAAA,IAAwB,KAAC,CAAC,MAAF,CAAS,KAAT,EAAiB,GAAjB,EAAsB,CAAE,MAAF,EAAU,GAAV,CAAtB,CAA3B;UACD,eAAF,EAAQ,eAAR,EAAc,eAAd,EAAoB;UACpB,IAAG,IAAA,KAAQ,MAAX;YACE,KAAA,CAAM,OAAN;YACA,IAAK,OAAS,CAAC,IAAZ,CAAiB,IAAjB,CAAH;cACE,KAAA,CAAM,OAAN;qBACA,OAAA,CAAQ,8CAAR,EAFF;aAAA,MAAA;cAIE,KAAA,CAAM,OAAN;qBACA,IAAA,CAAK,KAAL,EALF;aAFF;WAAA,MAAA;YASE,KAAA,CAAM,OAAN;YACA,OAAA,CAAQ,uCAAR;mBACA,mBAAA,GAAsB,MAXxB;WAFG;SAAA,MAAA;UAeH,KAAA,CAAM,OAAN;UACA,mBAAA,GAAsB;iBACtB,IAAA,CAAK,KAAL,EAjBG;;MALE;IAAA,CAAA,CAAA,CAAA,IAAA,CAAF;EAFwB;;EA2BjC,IAAC,CAAA,mBAAD,GAAuB,SAAE,SAAF,EAAa,QAAb;AACrB,QAAA;IAAA,IAAoD,gBAApD;AAAA,YAAU,IAAA,KAAA,CAAM,gCAAN,EAAV;;IAEA,UAAA,GAAc,CAAC,CAAC,oBAAF,CAAA;IACd,CAAA,GAAc,CAAC,CAAC,oBAAF,CAAA;IACd,CAAC,CAAC,KAAF,CAAA;IAEA,KAAA,GACE;MAAA,UAAA,EAAsB,UAAtB;;IAEF,UACE,CAAC,IADH,CACQ,IAAC,CAAA,gBAAD,CAAkC,KAAlC,CADR,CAEE,CAAC,IAFH,CAEQ,IAAC,CAAA,sBAAD,CAAkC,KAAlC,CAFR,CAGE,CAAC,IAHH,CAGQ,IAAC,CAAA,2BAAD,CAAkC,KAAlC,CAHR,CAIE,CAAC,IAJH,CAIQ,IAAC,CAAA,cAAD,CAAkC,KAAlC,EAAyC,IAAC,CAAA,0BAA1C,CAJR,CAKE,CAAC,IALH,CAKQ,IAAC,CAAA,qBAAD,CAAkC,KAAlC,CALR,CAME,CAAC,IANH,CAMQ,IAAC,CAAA,cAAD,CAAkC,KAAlC,EAAyC,IAAC,CAAA,0BAA1C,CANR,CAOE,CAAC,IAPH,CAOQ,IAAC,CAAA,oBAAD,CAAkC,KAAlC,CAPR,CAQE,CAAC,IARH,CAQQ,IAAC,CAAA,6BAAD,CAAkC,KAAlC,CARR,CASE,CAAC,IATH,CASQ,IAAC,CAAA,qBAAD,CAAkC,KAAlC,CATR,CAUE,CAAC,IAVH,CAUQ,CAVR;IAYA,CAAC,CAAC,EAAF,CAAK,QAAL,EAAe,CAAA,SAAA,KAAA;aAAA,SAAA;AACb,YAAA;QAAA,SAAA,GAAc,KAAC,CAAA,oBAAD,CAAA;;AACd;;AACA;;AACA;QACA,WAAA,GAAc;QACd,SAAA,GAAc,KAAC,CAAA,sBAAD,CAAwB,SAAxB;QACd,MAAA,GAAc,SAAS,CAAC,KAAV,CAAgB,SAAhB,EAA2B,WAA3B;AAEd,aAAA,wCAAA;;UAAA,UAAU,CAAC,KAAX,CAAiB,KAAjB;AAAA;eACA,UAAU,CAAC,GAAX,CAAA;MAVa;IAAA,CAAA,CAAA,CAAA,IAAA,CAAf;AAYA,WAAO;EAlCc;;;AAoCvB;;;;;;;;;;;;;;;;AA/4BA","file":"MKTS.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\n# njs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/MKTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#-----------------------------------------------------------------------------------------------------------\nXNCHR                     = require './XNCHR'\n# ASYNC                     = require 'async'\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n# $async                    = D.remit_async.bind D\n#...........................................................................................................\nMarkdown_parser           = require 'markdown-it'\n# Html_parser               = ( require 'htmlparser2' ).Parser\nnew_md_inline_plugin      = require 'markdown-it-regexp'\n#...........................................................................................................\nmisfit                    = Symbol 'misfit'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_tex_escape_replacements = [\n  [ /// \\x01        ///g,  '\\x01\\x02',              ]\n  [ /// \\x5c        ///g,  '\\x01\\x01',              ]\n  [ ///  \\{         ///g,  '\\\\{',                   ]\n  [ ///  \\}         ///g,  '\\\\}',                   ]\n  [ ///  \\$         ///g,  '\\\\$',                   ]\n  [ ///  \\#         ///g,  '\\\\#',                   ]\n  [ ///  %          ///g,  '\\\\%',                   ]\n  [ ///  _          ///g,  '\\\\_',                   ]\n  [ ///  \\^         ///g,  '\\\\textasciicircum{}',   ]\n  [ ///  ~          ///g,  '\\\\textasciitilde{}',    ]\n  [ ///  &          ///g,  '\\\\&',                   ]\n  [ /// \\x01\\x01    ///g,  '\\\\textbackslash{}',     ]\n  [ /// \\x01\\x02    ///g,  '\\x01',                  ]\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\n@escape_for_tex = ( text ) ->\n  R = text\n  for [ pattern, replacement, ], idx in @_tex_escape_replacements\n    R = R.replace pattern, replacement\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$fix_typography_for_tex = ( options ) ->\n  return $ ( event, send ) =>\n    if @select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      meta[ 'raw' ] = text\n      text          = @fix_typography_for_tex text, options\n      send [ type, name, text, meta, ]\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@fix_typography_for_tex = ( text, options ) ->\n  ### An improved version of `XELATEX.tag_from_chr` ###\n  ### TAINT should accept settings, fall back to `require`d `options.coffee` ###\n  glyph_styles          = options[ 'tex' ]?[ 'glyph-styles'             ] ? {}\n  tex_command_by_rsgs   = options[ 'tex' ]?[ 'tex-command-by-rsgs'      ]\n  last_command          = null\n  R                     = []\n  stretch               = []\n  last_rsg              = null\n  #.........................................................................................................\n  unless tex_command_by_rsgs?\n    throw new Error \"need setting 'tex-command-by-rsgs'\"\n  #.........................................................................................................\n  advance = =>\n    if stretch.length > 0\n      # debug '©zDJqU', last_command, JSON.stringify stretch.join '.'\n      if last_command in [ null, 'latin', ]\n        R.push @escape_for_tex stretch.join ''\n      else\n        R.push stretch.join ''\n        R.push '}'\n    stretch.length = 0\n    return null\n  #.........................................................................................................\n  for chr in XNCHR.chrs_from_text text\n    chr_info    = XNCHR.analyze chr\n    { chr\n      uchr\n      fncr\n      rsg   }   = chr_info\n    #.......................................................................................................\n    switch rsg\n      when 'jzr-fig'  then chr = uchr\n      when 'u-pua'    then rsg = 'jzr-fig'\n    #.......................................................................................................\n    if ( replacement = glyph_styles[ chr ] )?\n      advance()\n      R.push replacement\n      last_command = null\n      continue\n    #.......................................................................................................\n    unless ( command = tex_command_by_rsgs[ rsg ] )?\n      warn \"unknown RSG #{rpr rsg}: #{fncr} #{chr}\"\n      advance()\n      stretch.push chr\n      continue\n    #.......................................................................................................\n    if last_command isnt command\n      advance()\n      last_command = command\n      stretch.push \"\\\\#{command}{\" unless command is 'latin'\n    #.......................................................................................................\n    stretch.push chr\n  #.........................................................................................................\n  advance()\n  return R.join ''\n\n\n#===========================================================================================================\n# MD / HTML PARSING\n#-----------------------------------------------------------------------------------------------------------\n@_new_markdown_parser = ->\n  #.........................................................................................................\n  ### https://markdown-it.github.io/markdown-it/#MarkdownIt.new ###\n  # feature_set = 'commonmark'\n  feature_set = 'zero'\n  #.........................................................................................................\n  settings    =\n    html:           yes,            # Enable HTML tags in source\n    xhtmlOut:       no,             # Use '/' to close single tags (<br />)\n    breaks:         no,             # Convert '\\n' in paragraphs into <br>\n    langPrefix:     'language-',    # CSS language prefix for fenced blocks\n    linkify:        yes,            # Autoconvert URL-like text to links\n    typographer:    yes,\n    quotes:         '“”‘’'\n    # quotes:         '\"\"\\'\\''\n    # quotes:         '\"\"`\\''\n    # quotes:         [ '<<', '>>', '!!!', '???', ]\n    # quotes:   ['«\\xa0', '\\xa0»', '‹\\xa0', '\\xa0›'] # French\n  #.........................................................................................................\n  R = new Markdown_parser feature_set, settings\n  # R = new Markdown_parser settings\n  R\n    .enable 'text'\n    # .enable 'newline'\n    .enable 'escape'\n    .enable 'backticks'\n    .enable 'strikethrough'\n    .enable 'emphasis'\n    .enable 'link'\n    .enable 'image'\n    .enable 'autolink'\n    .enable 'html_inline'\n    .enable 'entity'\n    # .enable 'code'\n    .enable 'fence'\n    .enable 'blockquote'\n    .enable 'hr'\n    .enable 'list'\n    .enable 'reference'\n    .enable 'heading'\n    .enable 'lheading'\n    .enable 'html_block'\n    .enable 'table'\n    .enable 'paragraph'\n    .enable 'normalize'\n    .enable 'block'\n    .enable 'inline'\n    .enable 'linkify'\n    .enable 'replacements'\n    .enable 'smartquotes'\n  #.......................................................................................................\n  R.use require 'markdown-it-footnote'\n  # R.use require 'markdown-it-mark'\n  # R.use require 'markdown-it-sub'\n  # R.use require 'markdown-it-sup'\n  # #.......................................................................................................\n  # ### sample plugin ###\n  # user_pattern  = /@(\\w+)/\n  # user_handler  = ( match, utils ) ->\n  #   url = 'http://example.org/u/' + match[ 1 ]\n  #   return '<a href=\"' + utils.escape(url) + '\">' + utils.escape(match[1]) + '</a>'\n  # user_plugin = new_md_inline_plugin user_pattern, user_handler\n  # R.use user_plugin\n  #.......................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$_flatten_tokens = ( S ) ->\n  return $ ( token, send ) ->\n    switch ( type = token[ 'type' ] )\n      when 'inline' then send sub_token for sub_token in token[ 'children' ]\n      else send token\n\n#-----------------------------------------------------------------------------------------------------------\n@$_reinject_html_blocks = ( S ) ->\n  ### re-inject HTML blocks ###\n  md_parser   = @_new_markdown_parser()\n  return $ ( token, send ) =>\n    { type, map, } = token\n    if type is 'html_block'\n      ### TAINT `map` location data is borked with this method ###\n      ### add extraneous text content; this causes the parser to parse the HTML block as a paragraph\n      with some inline HTML: ###\n      XXX_source  = \"XXX\" + token[ 'content' ]\n      ### for `environment` see https://markdown-it.github.io/markdown-it/#MarkdownIt.parse ###\n      ### TAINT what to do with useful data appearing environment? ###\n      environment = {}\n      tokens      = md_parser.parse XXX_source, environment\n      ### remove extraneous text content: ###\n      removed     = tokens[ 1 ]?[ 'children' ]?.splice 0, 1\n      unless removed[ 0 ]?[ 'content' ] is \"XXX\"\n        throw new Error \"should never happen\"\n      S.confluence.write token for token in tokens\n    else\n      send token\n\n#-----------------------------------------------------------------------------------------------------------\nget_parse_html_methods = ->\n  Parser      = ( require 'parse5' ).Parser\n  parser      = new Parser()\n  get_message = ( source ) -> \"expected single opening node, got #{rpr source}\"\n  R           = {}\n  #.........................................................................................................\n  R[ '_parse_html_open_tag' ] = ( source ) ->\n    tree    = parser.parseFragment source\n    throw new Error get_message source unless ( cns = tree[ 'childNodes' ] ).length is 1\n    cn = cns[ 0 ]\n    throw new Error get_message source unless cn[ 'childNodes' ]?.length is 0\n    return [ 'begin', cn[ 'tagName' ], cn[ 'attrs' ][ 0 ] ? {}, ]\n  #.........................................................................................................\n  R[ '_parse_html_block' ] = ( source ) ->\n    tree    = parser.parseFragment source\n    debug '@88817', tree\n    return null\n  #.........................................................................................................\n  return R\n#...........................................................................................................\nparse_methods = get_parse_html_methods()\n@_parse_html_open_tag = parse_methods[ '_parse_html_open_tag' ]\n@_parse_html_block    = parse_methods[ '_parse_html_block'    ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse_html_tag = ( source ) ->\n  if ( match = source.match @_parse_html_tag.close_tag_pattern )?\n    return [ 'end', match[ 1 ], ]\n  if ( match = source.match @_parse_html_tag.comment_pattern )?\n    return [ 'comment', 'comment', match[ 1 ], ]\n  return @_parse_html_open_tag source\n@_parse_html_tag.close_tag_pattern   = /^<\\/([^>]+)>$/\n@_parse_html_tag.comment_pattern     = /^<!--([\\s\\S]*)-->$/\n\n\n#===========================================================================================================\n# FENCES\n#-----------------------------------------------------------------------------------------------------------\n@FENCES = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@FENCES.xleft   = [ '<', '{', '[', '(', ]\n@FENCES.xright  = [ '>', '}', ']', ')', ]\n@FENCES.left    = [      '{', '[', '(', ]\n@FENCES.right   = [      '}', ']', ')', ]\n@FENCES.xpairs  =\n  '<':  '>'\n  '{':  '}'\n  '[':  ']'\n  '(':  ')'\n  '>':  '<'\n  '}':  '{'\n  ']':  '['\n  ')':  '('\n\n#-----------------------------------------------------------------------------------------------------------\n@FENCES._get_opposite = ( fence, fallback ) =>\n  unless ( R = @FENCES.xpairs[ fence ] )?\n    return fallback unless fallback is undefined\n    throw new Error \"unknown fence: #{rpr fence}\"\n  return R\n\n#===========================================================================================================\n# TRACKER\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER    = {}\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT shouldn't be defined at module level ###\nfences_rxcc     = /// < \\. \\{ \\[ \\( \\) \\] \\} > ///\nname_rx         = /// [^ \\s #{fences_rxcc.source} ]* ///\ntracker_pattern = /// ^\n    ( [ #{fences_rxcc.source} ]? )\n    ( #{name_rx.source}          )\n    ( [ #{fences_rxcc.source} ]? )\n    $ ///\n\n#-----------------------------------------------------------------------------------------------------------\n@FENCES.parse = ( pattern, settings ) =>\n  left_fence  = null\n  name        = null\n  right_fence = null\n  symmetric   = settings?[ 'symmetric' ] ? yes\n  #.........................................................................................................\n  if ( not pattern? ) or pattern.length is 0\n    throw new Error \"pattern must be non-empty, got #{rpr pattern}\"\n  #.........................................................................................................\n  match = pattern.match @TRACKER._tracker_pattern\n  throw new Error \"not a valid pattern: #{rpr pattern}\" unless match?\n  #.........................................................................................................\n  [ _, left_fence, name, right_fence, ] = match\n  left_fence  = null if  left_fence.length is 0\n  name        = null if        name.length is 0\n  right_fence = null if right_fence.length is 0\n  #.........................................................................................................\n  if left_fence is '.'\n    ### Can not have a right fence if left fence is a dot ###\n    if right_fence?\n      throw new Error \"fence '.' can not have right fence, got #{rpr pattern}\"\n  #.........................................................................................................\n  else\n    ### Except for dot fence, must always have no fence or both fences in case `symmetric` is set ###\n    if symmetric\n      if ( left_fence? and not right_fence? ) or ( right_fence? and not left_fence? )\n        throw new Error \"unmatched fence in #{rpr pattern}\"\n  #.........................................................................................................\n  if left_fence? and left_fence isnt '.'\n    ### Complain about unknown left fences ###\n    unless left_fence in @FENCES.xleft\n      throw new Error \"illegal left_fence in pattern #{rpr pattern}\"\n    if right_fence?\n      ### Complain about non-matching fences ###\n      unless ( @FENCES._get_opposite left_fence, null ) is right_fence\n        throw new Error \"fences don't match in pattern #{rpr pattern}\"\n  if right_fence?\n    ### Complain about unknown right fences ###\n    unless right_fence in @FENCES.xright\n      throw new Error \"illegal right_fence in pattern #{rpr pattern}\"\n  #.........................................................................................................\n  return [ left_fence, name, right_fence, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER._tracker_pattern = tracker_pattern\n\n#-----------------------------------------------------------------------------------------------------------\n@TRACKER.new_tracker = ( patterns... ) =>\n  _MKTS = @\n  #.........................................................................................................\n  self = ( event ) ->\n    # CND.dir self\n    # debug '@763', \"tracking event #{rpr event}\"\n    for pattern, state of self._states\n      { parts } = state\n      continue unless _MKTS.select event, parts...\n      [ [ left_fence, right_fence, ], pattern_name, ] = parts\n      [ type, event_name, ]                           = event\n      if type is left_fence\n        # debug '@1', pattern, yes\n        self._enter state\n      else\n        # debug '@2', pattern, no\n        self._leave state\n        throw new Error \"too many right fences: #{rpr event}\" if state[ 'count' ] < 0\n    return event\n  #.........................................................................................................\n  self._states = {}\n  #.........................................................................................................\n  self._get_state = ( pattern ) ->\n    throw new Error \"untracked pattern #{rpr pattern}\" unless ( R = self._states[ pattern ] )?\n    return R\n  #.........................................................................................................\n  self.within = ( patterns... ) ->\n    for pattern in patterns\n      return true if self._within pattern\n    return false\n  self._within  = ( pattern ) -> ( self._get_state pattern )[ 'count' ] > 0\n  #.........................................................................................................\n  self.enter    = ( pattern ) -> self._enter self._get_state pattern\n  self.leave    = ( pattern ) -> self._leave self._get_state pattern\n  self._enter   = ( state   ) -> state[ 'count' ] += +1\n  ### TAINT should validate count when leaving ###\n  self._leave   = ( state   ) -> state[ 'count' ] += -1\n  #.........................................................................................................\n  do ->\n    for pattern in patterns\n      [ left_fence, pattern_name, right_fence, ]  = _MKTS.FENCES.parse pattern\n      state =\n        parts:    [ [ left_fence, right_fence, ], pattern_name, ]\n        count:    0\n      self._states[ pattern ] = state\n  #.........................................................................................................\n  return self\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$_rewrite_markdownit_tokens = ( S ) ->\n  unknown_tokens  = []\n  is_first        = yes\n  last_map        = [ 0, 0, ]\n  _send           = null\n  #.........................................................................................................\n  send_unknown = ( token, meta ) =>\n    { type, } = token\n    _send [ '?', type, token[ 'content' ], meta, ]\n    unknown_tokens.push type unless type in unknown_tokens\n  #.........................................................................................................\n  return $ ( token, send, end ) =>\n    _send = send\n    if token?\n      # debug '@a20g1TH9yLG', token\n      { type, map, } = token\n      map           ?= last_map\n      line_nr        = ( map[ 0 ] ? 0 ) + 1\n      col_nr         = ( map[ 1 ] ? 0 ) + 1\n      #.....................................................................................................\n      meta = {\n        line_nr\n        col_nr\n        }\n      if is_first\n        is_first = no\n        send [ '<', 'document', null, meta, ]\n      #.....................................................................................................\n      unless S.has_ended\n        switch type\n          # blocks\n          when 'heading_open'       then send [ '[', token[ 'tag' ],  null,               meta, ]\n          when 'heading_close'      then send [ ']', token[ 'tag' ],  null,               meta, ]\n          when 'paragraph_open'     then null\n          when 'paragraph_close'    then send [ '.', 'p',             null,               meta, ]\n          when 'list_item_open'     then send [ '[', 'li',            null,               meta, ]\n          when 'list_item_close'    then send [ ']', 'li',            null,               meta, ]\n          # inlines\n          when 'strong_open'        then send [ '(', 'strong',        null,               meta, ]\n          when 'strong_close'       then send [ ')', 'strong',        null,               meta, ]\n          when 'em_open'            then send [ '(', 'em',            null,               meta, ]\n          when 'em_close'           then send [ ')', 'em',            null,               meta, ]\n          # singles\n          when 'text'               then send [ '.', 'text',          token[ 'content' ], meta, ]\n          when 'hr'                 then send [ '.', 'hr',            token[ 'markup' ],  meta, ]\n          #.................................................................................................\n          # specials\n          when 'code_inline'\n            send [ '(', 'code', null,                        meta,    ]\n            send [ '.', 'text', token[ 'content' ], ( @copy meta ),  ]\n            send [ ')', 'code', null,               ( @copy meta ),  ]\n          #.................................................................................................\n          when 'html_block'\n            # @_parse_html_block token[ 'content' ].trim()\n            debug '@8873', @_parse_html_tag token[ 'content' ]\n            throw new Error \"should never happen\"\n          #.................................................................................................\n          when 'fence'\n            switch token[ 'tag' ]\n              when 'code'\n                language_name = token[ 'info' ]\n                language_name = 'text' if language_name.length is 0\n                send [ '{', 'code', language_name,               meta,    ]\n                send [ '.', 'text', token[ 'content' ], ( @copy meta ),  ]\n                send [ '}', 'code', language_name,      ( @copy meta ),  ]\n              else send_unknown token, meta\n          #.................................................................................................\n          when 'html_inline'\n            [ position, name, extra, ] = @_parse_html_tag token[ 'content' ]\n            switch position\n              when 'comment'\n                send [ '.', 'comment', extra.trim(), meta, ]\n              when 'begin'\n                unless name is 'p'\n                  send [ '(', name, extra, meta, ]\n              when 'end'\n                if name is 'p' then send [ '.', name, null, meta, ]\n                else                send [ ')', name, null, meta, ]\n              else throw new Error \"unknown HTML tag position #{rpr position}\"\n          else send_unknown token, meta\n        #...................................................................................................\n        last_map = map\n    #.......................................................................................................\n    if end?\n      if unknown_tokens.length > 0\n        warn \"unknown tokens: #{unknown_tokens.sort().join ', '}\"\n      send [ '>', 'document', null, {}, ]\n      end()\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$_preprocess_commands = ( S ) ->\n  ### TAINT `<xxx>` translates as `(xxx`, which is generally correct, but it should translate\n  to `(xxx)` when `xxx` is a known HTML5 'lone' tag. ###\n  left_meta_fence     = '<'\n  right_meta_fence    = '>'\n  repetitions         = 2\n  fence_pattern       = ///\n    #{left_meta_fence}{#{repetitions}}\n    (\n      (?:\n        \\\\#{right_meta_fence}       |\n        [^ #{right_meta_fence} ]    |\n        #{right_meta_fence}{ #{repetitions - 1} } (?! #{right_meta_fence} )\n        )*\n      )\n    #{right_meta_fence}{#{repetitions}}\n    ///\n  prefix_pattern      = ///^ ( [ !: ] ) ( .* ) ///\n  collector           = []\n  track               = @TRACKER.new_tracker '{code}', '(code)', '(latex)', '(latex)'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_literal = track.within '{code}', '(code)', '(latex)', '(latex)'\n    track event\n    [ type, name, text, meta, ] = event\n    if ( not within_literal ) and @select event, '.', 'text'\n      is_command = yes\n      for part in text.split fence_pattern\n        is_command  = not is_command\n        left_fence  = null\n        right_fence = null\n        if is_command\n          last_idx    = part.length - 1\n          left_fence  = part[        0 ] if part[        0 ] in @FENCES.xleft\n          right_fence = part[ last_idx ] if part[ last_idx ] in @FENCES.xright\n          if left_fence? and right_fence?\n            command_name = part[ 1 ... last_idx ]\n            if prefix_pattern.test command_name\n              warn \"prefix not supported in #{rpr part}\"\n              send [ '?', part, null, ( @copy meta ), ]\n            else\n              send [ left_fence,  command_name, null, ( @copy meta ), ]\n              send [ right_fence, command_name, null, ( @copy meta ), ]\n          else if left_fence?\n            command_name  = part[ 1 ... ]\n            if ( match = command_name.match prefix_pattern )?\n              [ _, prefix, suffix, ] = match\n              switch prefix\n                when ':'\n                  send [ left_fence, prefix, suffix, ( @copy meta ), ]\n                else\n                  warn \"prefix #{rpr prefix} not supported in #{rpr part}\"\n                  send [ '?', part, null, ( @copy meta ), ]\n            else\n              send [ left_fence, command_name, null, ( @copy meta ), ]\n          else if right_fence?\n            ### TAINT code duplication ###\n            command_name = part[ ... last_idx ]\n            if ( match = command_name.match prefix_pattern )?\n              [ _, prefix, suffix, ] = match\n              # debug '©9nGvB', ( rpr command_name ), ( rpr prefix ), ( rpr suffix )\n              switch prefix\n                when ':'\n                  send [ right_fence, prefix, suffix, ( @copy meta ), ]\n                else\n                  warn \"prefix #{rpr prefix} not supported in #{rpr part}\"\n                  send [ '?', part, null, ( @copy meta ), ]\n            else\n              send [ right_fence, command_name, null, ( @copy meta ), ]\n          else\n            match = part.match prefix_pattern\n            unless match?\n              warn \"not a legal command: #{rpr part}\"\n              send [ '?', part, null, ( @copy meta ), ]\n            else\n              [ _, prefix, suffix, ] = match\n              switch prefix\n                when '!'\n                  send [ '!', suffix, null, ( @copy meta ), ]\n                else\n                  warn \"prefix #{rpr prefix} not supported in #{rpr part}\"\n                  send [ '?', part, null, ( @copy meta ), ]\n        else\n          send [ type, name, part, ( @copy meta ), ]\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$_process_end_command = ( S ) ->\n  S.has_ended = no\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # [ type, name, text, meta, ] = event\n    if @select event, '!', 'end'\n      [ _, _, _, meta, ]    = event\n      { line_nr, }          = meta\n      warn \"encountered `<<!end>>` on line ##{line_nr}, ignoring further material\"\n      S.has_ended = yes\n    else if @select event, '>', 'document'\n      send event\n    else\n      send event unless S.has_ended\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$close_dangling_open_tags = ( S ) ->\n  # throw new Error \"currently not used: `$close_dangling_open_tags`\"\n  tag_stack = []\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    [ type, name, text, meta, ] = event\n    # debug '©nLnB5', event\n    if @select event, '>', 'document'\n      while tag_stack.length > 0\n        sub_event                                   = tag_stack.pop()\n        [ sub_type, sub_name, sub_text, sub_meta, ] = sub_event\n        switch sub_type\n          when '{' then sub_type = '}'\n          when '[' then sub_type = ']'\n          when '(' then sub_type = ')'\n        S.resend [ sub_type, sub_name, sub_text, ( @copy sub_meta ), ]\n      send event\n    else if @select event, [ '{', '[', '(', ]\n      tag_stack.push [ type, name, null, meta, ]\n      send event\n    else if @select event, [ '}', ']', ')', ]\n      ### TAINT should check matching pairs ###\n      tag_stack.pop()\n      send event\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@select = ( event, type, name ) ->\n  ### TAINT should use the same syntax as accepted by `FENCES.parse` ###\n  ### check for arity as it's easy to write `select event, '(', ')', 'latex'` when what you meant\n  was `select event, [ '(', ')', ], 'latex'` ###\n  return false if @is_hidden event\n  if ( arity = arguments.length ) > 3\n    throw new Error \"expected at most 3 arguments, got #{arity}\"\n  if type?\n    switch type_of_type = CND.type_of type\n      when 'text' then return false unless event[ 0 ] is type\n      when 'list' then return false unless event[ 0 ] in type\n      else throw new Error \"expected text or list, got a #{type_of_type}\"\n  if name?\n    switch type_of_name = CND.type_of name\n      when 'text' then return false unless event[ 1 ] is name\n      when 'list' then return false unless event[ 1 ] in name\n      else throw new Error \"expected text or list, got a #{type_of_name}\"\n  return true\n\n\n#===========================================================================================================\n# STAMPING & HIDING\n#-----------------------------------------------------------------------------------------------------------\n@stamp = ( event ) ->\n  ### 'Stamping' an event means to mark it as 'processed'; hence, downstream transformers can choose to\n  ignore events that have already been marked upstream, or, inversely choose to look out for events\n  that have not yet found a representation in the target document. ###\n  event[ 3 ][ 'stamped' ] = yes\n  return event\n\n#-----------------------------------------------------------------------------------------------------------\n@is_stamped   = ( event ) -> event[ 3 ]?[ 'stamped' ] is true\n@is_unstamped = ( event ) -> not @is_stamped event\n\n#-----------------------------------------------------------------------------------------------------------\n@hide = ( event ) ->\n  ### 'Stamping' an event means to mark it as 'processed'; hence, downstream transformers can choose to\n  ignore events that have already been marked upstream, or, inversely choose to look out for events\n  that have not yet found a representation in the target document. ###\n  event[ 3 ][ 'hidden' ] = yes\n  return event\n\n#-----------------------------------------------------------------------------------------------------------\n@is_hidden = ( event ) -> event[ 3 ]?[ 'hidden' ] is true\n\n#-----------------------------------------------------------------------------------------------------------\n@copy = ( x, updates... ) ->\n  ### (Hopefully) fast semi-deep copying for events (i.e. lists with a possible `meta` object on\n  index 3) and plain objects. The value returned will be a shallow copy in the case of objects and\n  lists, but if a list has a value at index 3, that object will also be copied. Not guaranteed to\n  work for general values. ###\n  if ( isa_list = CND.isa_list x ) then R = []\n  else if         CND.isa_pod  x   then R = {}\n  else throw new Error \"unable to copy a #{CND.type_of x}\"\n  R       = Object.assign R, x, updates...\n  R[ 3 ]  = Object.assign {}, meta if isa_list and ( meta = R[ 3 ] )?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_split_lines_with_nl = ( text ) -> ( line for line in text.split /(.*\\n)/ when line.length > 0 )\n\n#-----------------------------------------------------------------------------------------------------------\n@_flush_text_collector = ( send, collector, meta ) ->\n  if collector.length > 0\n    send [ '.', 'text', ( collector.join '' ), meta, ]\n    collector.length = 0\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_mktsmd_events = ( S ) ->\n  unknown_events    = []\n  indentation       = ''\n  tag_stack         = []\n  return D.$observe ( event, has_ended ) =>\n    if event?\n      [ type, name, text, meta, ] = event\n      if type is '?'\n        unknown_events.push name unless name in unknown_events\n        warn JSON.stringify event\n      else\n        color = CND.blue\n        #...................................................................................................\n        if @is_hidden event\n          color = CND.brown\n        else\n          switch type\n            when '<', '>'      then color = CND.yellow\n            when '{','[',  '(' then color = CND.lime\n            when ')', ']', '}' then color = CND.olive\n            when '!'           then color = CND.indigo\n            when '.'\n              switch name\n                when 'text' then color = CND.BLUE\n                # when 'code' then color = CND.orange\n        #...................................................................................................\n        text = if text? then ( color rpr text ) else ''\n        switch type\n          when 'text'\n            log indentation + ( color type ) + ' ' + rpr name\n          when 'tex'\n            if S.show_tex_events ? no\n              log indentation + ( color type ) + ( color name ) + ' ' + text\n          else\n            log indentation + ( color type ) + ( color name ) + ' ' + text\n        #...................................................................................................\n        switch type\n          #.................................................................................................\n          when '{', '[', '(', ')', ']', '}'\n            switch type\n              when '{', '[', '('\n                tag_stack.push [ type, name, ]\n              when ')', ']', '}'\n                if tag_stack.length > 0\n                  [ topmost_type, topmost_name, ] = tag_stack.pop()\n                  unless topmost_name is name\n                    topmost_type = { '{': '}', '[': ']', '(', ')', }[ topmost_type ]\n                    warn \"encountered #{type}#{name} when #{topmost_type}#{topmost_name} was expected\"\n                else\n                  warn \"level below zero\"\n            indentation = ( new Array tag_stack.length ).join '  '\n    #.......................................................................................................\n    if has_ended\n      if tag_stack.length > 0\n        warn \"unclosed tags: #{tag_stack.join ', '}\"\n      if unknown_events.length > 0\n        warn \"unknown events: #{unknown_events.sort().join ', '}\"\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$write_mktscript = ( S ) ->\n  indentation       = ''\n  tag_stack         = []\n  mkscript_locator  = S.layout_info[ 'mkscript-locator' ]\n  output            = njs_fs.createWriteStream mkscript_locator\n  confluence        = D.create_throughstream()\n  write             = confluence.write.bind confluence\n  confluence.pipe output\n  #.........................................................................................................\n  return D.$observe ( event, has_ended ) ->\n    if event?\n      [ type, name, text, meta, ] = event\n      unless type in [ 'tex', 'text', ]\n        { line_nr, }                = meta\n        anchor                      = \"█ #{line_nr} █ \"\n        #.....................................................................................................\n        switch type\n          when '?'\n            write \"\\n#{anchor}#{type}#{name}\\n\"\n          when '<', '{', '['\n            write \"#{anchor}#{type}#{name}\"\n          when '>', '}', ']', '!'\n            write \"#{type}\\n\"\n          when '('\n            write \"#{type}#{name}\"\n          when ')'\n            write \"#{type}\"\n          when '.'\n            switch name\n              when 'hr'\n                write \"\\n#{anchor}#{type}#{name}\\n\"\n              when 'p'\n                write \"¶\\n\"\n              when 'text'\n                ### TAINT doesn't recognize escaped backslash ###\n                text_rpr = ( rpr text ).replace /\\\\n/g, '\\n'\n                write text_rpr\n              else\n                write \"\\n#{anchor}IGNORED: #{rpr event}\"\n          else\n            write \"\\n#{anchor}IGNORED: #{rpr event}\"\n    if has_ended\n      output.end()\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_escape_command_fences = ( text ) ->\n  R = text\n  R = R.replace /♎/g,       '♎0'\n  R = R.replace /\\\\<\\\\</g,  '♎1'\n  R = R.replace /\\\\<</g,    '♎2'\n  R = R.replace /<\\\\</g,    '♎3'\n  R = R.replace /<</g,      '♎4'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_unescape_command_fences_A = ( text ) ->\n  R = text\n  R = R.replace /♎4/g, '<<'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_unescape_command_fences_B = ( text ) ->\n  R = text\n  R = R.replace /♎3/g, '<<'\n  R = R.replace /♎2/g, '<<'\n  R = R.replace /♎1/g, '<<'\n  R = R.replace /♎0/g, '♎'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$_replace_text = ( S, method ) ->\n  return $ ( event, send ) =>\n    if @.select event, '.', [ 'text', 'code', 'comment', ]\n      [ type, name, text, meta, ] = event\n      event[ 2 ] = method text\n    send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$_remove_empty_texts = ( S ) ->\n  return $ ( event, send ) =>\n    if @.select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      send event unless text is ''\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$_remove_postdef_dispensables = ( S ) ->\n  last_was_definition = no\n  return $ ( event, send ) =>\n    if @.select event,  ')', ':'\n      debug '>>> 1'\n      last_was_definition = yes\n      send event\n    else if last_was_definition and @.select event,  '.', [ 'text', 'p', ]\n      [ type, name, text, meta, ] = event\n      if name is 'text'\n        debug '>>> 2'\n        if ( /^\\n*$/ ).test text\n          debug '>>> 3'\n          whisper \"ignoring blank text after command definition\"\n        else\n          debug '>>> 4'\n          send event\n      else\n        debug '>>> 5'\n        whisper \"ignoring `p` after command definition\"\n        last_was_definition = no\n    else\n      debug '>>> 6'\n      last_was_definition = no\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@create_mdreadstream = ( md_source, settings ) ->\n  throw new Error \"settings currently unsupported\" if settings?\n  #.........................................................................................................\n  confluence  = D.create_throughstream()\n  R           = D.create_throughstream()\n  R.pause()\n  #.........................................................................................................\n  state       =\n    confluence:           confluence\n  #.........................................................................................................\n  confluence\n    .pipe @$_flatten_tokens                 state\n    .pipe @$_reinject_html_blocks           state\n    .pipe @$_rewrite_markdownit_tokens      state\n    .pipe @$_replace_text                   state, @_unescape_command_fences_A\n    .pipe @$_preprocess_commands            state\n    .pipe @$_replace_text                   state, @_unescape_command_fences_B\n    .pipe @$_remove_empty_texts             state\n    .pipe @$_remove_postdef_dispensables    state\n    .pipe @$_process_end_command            state\n    .pipe R\n  #.........................................................................................................\n  R.on 'resume', =>\n    md_parser   = @_new_markdown_parser()\n    ### for `environment` see https://markdown-it.github.io/markdown-it/#MarkdownIt.parse ###\n    ### TAINT what to do with useful data appearing environment? ###\n    ### TAINT environment becomes important for footnotes ###\n    environment = {}\n    md_source   = @_escape_command_fences md_source\n    tokens      = md_parser.parse md_source, environment\n    # @set_meta R, 'environment', environment\n    confluence.write token for token in tokens\n    confluence.end()\n  #.........................................................................................................\n  return R\n\n### TAINT currently not used, but 'potentially useful'\n#-----------------------------------------------------------------------------------------------------------\n@_meta  = Symbol 'meta'\n\n#-----------------------------------------------------------------------------------------------------------\n@set_meta = ( x, name, value = true ) ->\n  target          = x[ @_meta ]?= {}\n  target[ name ]  = value\n  return x\n\n#-----------------------------------------------------------------------------------------------------------\n@get_meta = ( x, name = null ) ->\n  R = x[ @_meta ]\n  R = R[ name ] if name\n  return R\n###\n\n\n"]}