{"version":3,"sources":["compare-recent-cjkvi-ids-data.coffee"],"names":[],"mappings":"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","file":"compare-recent-cjkvi-ids-data.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/compare-cjkvi-ids'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nHOLLERITH                 = require 'hollerith'\n# DEMO                      = require './demo'\nCHR                       = require 'coffeenode-chr'\nƒ                         = CND.format_number.bind CND\nillegal_component         = Symbol 'illegal_component'\n\n#-----------------------------------------------------------------------------------------------------------\noptions =\n  'comment-marks':              [ '#', ';', ]\n  'cjkvi-ncr-kernel-pattern':   /^(?:(U)\\+|(CDP)-)([0-9A-F]{4,5})$/\n  'cjkvi-ncr-pattern':          /&([^;]+);/g\n  'blank-line-tester':          /^\\s*$/\n  'known-ref-mismatches':\n    '鿉鿈':                     '鿉'\n  'cjvki-jzr-sims':\n    'α':        '§'\n    'ℓ':        '§'\n    # '△':        '△'\n    '①':        '〓'\n    '②':        '〓'\n    '③':        '〓'\n    '④':        '〓'\n    '⑤':        '〓'\n    '⑥':        '〓'\n    '⑦':        '〓'\n    '⑧':        '〓'\n    '⑨':        '〓'\n    '⑩':        '〓'\n    '⑪':        '〓'\n    '⑫':        '〓'\n    '⑬':        '〓'\n    '⑭':        '〓'\n    '⑮':        '〓'\n    '⑯':        '〓'\n    '⑰':        '〓'\n    '⑱':        '〓'\n    '⑲':        '〓'\n    '⑳':        '〓'\n    'い':        illegal_component\n    'よ':        illegal_component\n    'キ':        illegal_component\n    'サ':        illegal_component\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_progress = ( size ) ->\n  size         ?= 1e3\n  phrase_count  = 0\n  glyph_count   = 0\n  last_glyph    = null\n  return D.$observe ( _, has_ended ) =>\n    unless has_ended\n      phrase_count += 1\n      echo ƒ phrase_count if phrase_count % size is 0\n    else\n      help \"read #{ƒ phrase_count} records\"\n\n#-----------------------------------------------------------------------------------------------------------\n@read_glyph_categories = ( db, handler ) ->\n  Z     = {}\n  count = 0\n  query = { prefix: [ 'pos', 'cp/' ], star: '*', }\n  input = HOLLERITH.create_phrasestream db, query\n  input\n    # .pipe D.$show()\n    .pipe $ ( phrase, send ) =>\n      [ _, prd, _, glyph, ] = phrase\n      if prd in [ 'cp/inner/original', 'cp/inner/mapped', 'cp/outer/original', 'cp/outer/mapped', ]\n        Z[ glyph ]  = prd\n        count      += +1\n        send glyph\n    .pipe @$show_progress 1e4\n    .pipe D.$on_end =>\n      help \"read categories for #{ƒ count} glyphs\"\n      njs_fs.writeFileSync '/tmp/glyph-categories.json', JSON.stringify Z, null, '  '\n      handler null, Z\n\n#-----------------------------------------------------------------------------------------------------------\n@read_global_sims = ( db, handler ) ->\n  count = 0\n  Z     = {}\n  for source_glyph, target_glyph of options[ 'cjvki-jzr-sims' ]\n    count            += +1\n    Z[ source_glyph ] = target_glyph\n  ### TAINT we schouldn't need `star: '*'` here, since the phrases concerned look like\n  `[ 'pos', 'sim/global', '鼅', '&c3#x5c2f;' ]` ###\n  # query = { prefix: [ 'pos', 'sim/global' ], }\n  query = { prefix: [ 'pos', 'sim/global' ], star: '*', }\n  input = HOLLERITH.create_phrasestream db, query\n  input\n    # .pipe D.$show()\n    .pipe $ ( phrase, send ) =>\n      [ _, _, target_glyph, source_glyph, ] = phrase\n      Z[ source_glyph ]   = target_glyph\n      count              += +1\n      send source_glyph\n    .pipe @$show_progress 1e4\n    .pipe D.$on_end =>\n      help \"read global SIMs for #{ƒ count} glyphs\"\n      njs_fs.writeFileSync '/tmp/global-sims.json', JSON.stringify Z, null, '  '\n      handler null, Z\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter_comments_and_empty_lines = ->\n  return $ ( line, send ) =>\n    if ( options[ 'blank-line-tester' ].test line ) or line[ 0 ] in options[ 'comment-marks' ]\n      null # warn line\n    else\n      send line\n\n#-----------------------------------------------------------------------------------------------------------\n@chr_from_cjkvi_ncr_kernel = ( cjkvi_ncr_kernel ) ->\n  match = cjkvi_ncr_kernel.match options[ 'cjkvi-ncr-kernel-pattern' ]\n  unless match?\n    throw new Error \"unexpected CJVKI NCR kernel: #{rpr cjkvi_ncr_kernel}\"\n  else\n    csg = ( match[ 1 ] ? match[ 2 ] ).toLowerCase()\n    cid = parseInt match[ 3 ], 16\n    return CHR._as_chr csg, cid\n\n#-----------------------------------------------------------------------------------------------------------\n@$resolve_cjkvi_kernel = ->\n  return $ ( fields, send ) =>\n    return if fields.length is 0\n    [ cjkvi_ncr_kernel, glyph, cjkvi_formulas..., ] = fields\n    glyph_reference = @chr_from_cjkvi_ncr_kernel cjkvi_ncr_kernel\n    send [ glyph_reference, glyph, cjkvi_formulas..., ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$normalize_cjkvi_ncrs = ->\n  pattern = options[ 'cjkvi-ncr-pattern' ]\n  return $ ( fields, send ) =>\n    for field_idx in [ 1 ... fields.length ]\n      fields[ field_idx ] = fields[ field_idx ].replace pattern, ( $0, $1 ) =>\n        return @chr_from_cjkvi_ncr_kernel $1\n    send fields\n\n#-----------------------------------------------------------------------------------------------------------\n@$check_glyph_reference = ->\n  return $ ( fields, send ) =>\n    [ glyph_reference, glyph, cjkvi_formulas..., ] = fields\n    unless glyph_reference is glyph\n      key         = glyph_reference + glyph\n      replacement = options[ 'known-ref-mismatches' ][ key ]\n      unless replacement?\n        warn \"unknown glyph reference mismatch: #{rpr glyph_reference}, #{rpr glyph}\"\n      glyph = replacement\n    send [ glyph, cjkvi_formulas, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter_outer_mapped_and_unknown_glyphs_A = ( glyph_categories ) ->\n  counts =\n    'unknown':                  0\n    'cp/inner/original':        0\n    'cp/inner/mapped':          0\n    'cp/outer/original':        0\n    'cp/outer/mapped':          0\n  unknown_non_cjk_xe = []\n  #.........................................................................................................\n  return $ ( fields, send, end ) =>\n    #.......................................................................................................\n    if fields?\n      [ glyph, cjkvi_formulas, ]  = fields\n      category                    = glyph_categories[ glyph ] ? 'unknown'\n      counts[ category ]         += +1\n      rsg = CHR.as_rsg glyph, input: 'xncr'\n      if category is 'unknown' and not ( rsg in [ 'cdp', 'u-cjk-xe', ] )\n        fncr = CHR.as_fncr glyph, input: 'xncr'\n        unknown_non_cjk_xe.push \"glyph #{fncr} #{glyph}\"\n      send [ glyph, cjkvi_formulas, ] if category is 'cp/inner/original'\n    #.......................................................................................................\n    if end?\n      help \"filtering counts:\"\n      help '\\n' + rpr counts\n      help()\n      help \"of the #{ƒ counts[ 'unknown' ]} unknown codepoints,\"\n      help \"#{ƒ unknown_non_cjk_xe.length} are *not* from Unicode V8 CJK Ext. E:\"\n      help '\\n' + rpr unknown_non_cjk_xe\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter_outer_mapped_and_unknown_glyphs_B = ( global_sims ) ->\n  counts =\n    'cp/inner/original':        0\n    'cp/inner/mapped':          0\n    'cp/outer/original':        0\n    'cp/outer/mapped':          0\n  unknown_non_cjk_xe = []\n  #.........................................................................................................\n  return $ ( fields, send, end ) =>\n    #.......................................................................................................\n    if fields?\n      [ source_glyph, cjkvi_formulas, ] = fields\n      csg                               = CHR.as_csg source_glyph, input: 'xncr'\n      target_glyph                      = global_sims[ source_glyph ]\n      if csg in [ 'u', 'jzr', ]\n        if target_glyph? then category = 'cp/inner/mapped'\n        else                  category = 'cp/inner/original'\n      else\n        if target_glyph? then category = 'cp/outer/mapped'\n        else                  category = 'cp/outer/original'\n      counts[ category ] += +1\n      send [ source_glyph, cjkvi_formulas, ] if category is 'cp/inner/original'\n    #.......................................................................................................\n    if end?\n      help \"filtering counts:\"\n      help '\\n' + rpr counts\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@$remove_region_annotations = ->\n  return $ ( fields, send ) =>\n    [ glyph, cjkvi_formulas, ]    = fields\n    for formula, idx in cjkvi_formulas\n      cjkvi_formulas[ idx ] = formula.replace /\\[[^\\]]+\\]/g, ''\n    send [ glyph, cjkvi_formulas, ]\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$retrieve_jzr_formulas = ( db ) ->\n  return $async ( fields, done ) =>\n    step ( resume ) =>\n      [ glyph, cjkvi_formulas, ]    = fields\n      prefix                        = [ 'spo', glyph, 'formula', ]\n      query                         = { prefix: prefix, fallback: [ null, null, null, [], ], }\n      phrase                        = yield HOLLERITH.read_one_phrase db, query, resume\n      [ _, _, _, jzr_formulas, ]    = phrase\n      done [ glyph, cjkvi_formulas, jzr_formulas, ]\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@normalize_formula = ( global_sims, formula ) =>\n  chrs = CHR.chrs_from_text formula, input: 'xncr'\n  for chr, idx in chrs\n    chrs[ idx ] = new_chr = global_sims[ chr ] ? chr\n    throw new Error \"illegal component in formula #{rpr formula}\" if new_chr is illegal_component\n  return chrs.join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@$normalize_formulas = ( global_sims ) ->\n  counts =\n    'jzr':      0\n    'cjkvi':    0\n  #.........................................................................................................\n  return $ ( fields, send, end ) =>\n    if fields?\n      [ glyph, cjkvi_formulas, jzr_formulas, ] = fields\n      #.....................................................................................................\n      for formula, idx in cjkvi_formulas\n        normalized_formula    = @normalize_formula global_sims, formula\n        if normalized_formula isnt formula\n          counts[ 'cjkvi' ]    += +1\n          cjkvi_formulas[ idx ] = normalized_formula\n      ### skipping JZR formulas since they're normalized already ###\n      ###\n      #.....................................................................................................\n      for formula, idx in jzr_formulas\n        normalized_formula    = @normalize_formula global_sims, formula\n        if normalized_formula isnt formula\n          counts[ 'jzr' ]      += +1\n          jzr_formulas[ idx ]   = normalized_formula\n      ###\n      #.....................................................................................................\n      send fields\n    #.......................................................................................................\n    if end?\n      help \"formula normalization counts:\"\n      help '\\n' + rpr counts\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@$compare_formulas = ->\n  glyph_count   = 0\n  diff_count    = 0\n  missing_count = 0\n  #.........................................................................................................\n  return $ ( fields, send, end ) =>\n    #.......................................................................................................\n    if fields?\n      [ glyph, cjkvi_formulas, jzr_formulas, ] = fields\n      glyph_count += +1\n      if jzr_formulas.length is 0\n        fncr = CHR.as_fncr glyph, input: 'xncr'\n        warn \"no formulas found for glyph #{fncr} #{glyph}\"\n        missing_count += +1\n      else\n        for cjkvi_formula in cjkvi_formulas\n          ### Skip identity formulas like `X = X` which we express as `X = ●` ###\n          continue if cjkvi_formula is glyph\n          if not ( cjkvi_formula in jzr_formulas )\n            fncr = CHR.as_fncr glyph, input: 'xncr'\n            diff_count += +1\n            echo 'difference:', \"#{fncr} #{glyph} #{cjkvi_formula} #{rpr jzr_formulas}\"\n    #.......................................................................................................\n    if end?\n      help \"differences in formulas:\"\n      help \"glyphs:             #{ƒ glyph_count}\"\n      help \"missing formulas:   #{ƒ missing_count}\"\n      help \"different formulas: #{ƒ diff_count}\"\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@compare = ->\n  home            = join __dirname, '../../jizura-datasources'\n  cjkvi_route     = join home, 'data/flat-files/shape/github.com´cjkvi´cjkvi-ids/ids.txt'\n  input           = njs_fs.createReadStream cjkvi_route\n  #.........................................................................................................\n  db_route        = join home, 'data/leveldb-v2'\n  db              = HOLLERITH.new_db db_route\n  #.........................................................................................................\n  step ( resume ) =>\n    # glyph_categories = yield @read_glyph_categories db, resume\n    global_sims = yield @read_global_sims db, resume\n    input\n      .pipe D.$split()\n      .pipe @$filter_comments_and_empty_lines()\n      # .pipe D.$sample 0.001, seed: 1\n      .pipe D.$parse_csv headers: no, delimiter: '\\t'\n      .pipe @$resolve_cjkvi_kernel()\n      .pipe @$normalize_cjkvi_ncrs()\n      .pipe @$check_glyph_reference()\n      .pipe @$show_progress 1e4\n      # .pipe @$filter_outer_mapped_and_unknown_glyphs_A glyph_categories\n      .pipe @$filter_outer_mapped_and_unknown_glyphs_B global_sims\n      .pipe @$remove_region_annotations()\n      .pipe @$retrieve_jzr_formulas db\n      .pipe @$normalize_formulas global_sims\n      .pipe @$compare_formulas()\n      # .pipe D.$show()\n\n\n############################################################################################################\nunless module.parent?\n  @compare()\n"]}