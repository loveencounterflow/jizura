{"version":3,"sources":["copy-jizuradb-to-Hollerith2-format.coffee"],"names":[],"mappings":"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","file":"copy-jizuradb-to-Hollerith2-format.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/copy-jizuradb-to-Hollerith2-format'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nHOLLERITH                 = require 'hollerith'\n# DEMO                      = require './demo'\nKWIC                      = require 'kwic'\nIDLX                      = require 'idlx'\nXNCHR                     = require './XNCHR'\nƒ                         = CND.format_number.bind CND\n\n#-----------------------------------------------------------------------------------------------------------\noptions =\n  sample:         null\n  # sample:         [ '國', ]\n  # sample:         [ '⿓', '龍', '龍', '邔', '𨙬', '國', '金', '釒', ]\n  # sample:         [ '高', ]\n  # sample:         [ '𡬜', '國', '𠵓', ]\n  # sample:         [ '𡬜', '國', '𠵓', '后', '花', '醒', ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$show_progress = ( size ) ->\n#   size   ?= 1e3\n#   count   = 0\n#   return $ ( data, send ) =>\n#     count += 1\n#     echo ƒ count if count % size is 0\n#     send data\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_progress = ( size ) ->\n  size         ?= 1e3\n  phrase_count  = 0\n  glyph_count   = 0\n  last_glyph    = null\n  return D.$observe ( phrase, has_ended ) =>\n    unless has_ended\n      phrase_count += 1\n      echo ƒ phrase_count if phrase_count % size is 0\n      glyph_count  += +1 if ( glyph = phrase[ 0 ] ) isnt last_glyph\n      last_glyph    = glyph\n    else\n      help \"read #{ƒ phrase_count} phrases for #{ƒ glyph_count} glyphs\"\n      help \"(#{( phrase_count / glyph_count ).toFixed 2} phrases per glyph)\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$keep_small_sample = ->\n  return $ ( key, send ) =>\n    return send key unless options[ 'sample' ]?\n    [ glyph, prd, obj, idx, ] = key\n    send key if glyph in options[ 'sample' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$throw_out_pods = ->\n  return $ ( key, send ) =>\n    [ glyph, prd, obj, idx, ] = key\n    send key unless prd is 'pod'\n\n#-----------------------------------------------------------------------------------------------------------\n@$remove_duplicate_kana_readings = ->\n  readings_by_glyph = {}\n  return $ ( key, send ) =>\n    [ glyph, prd, obj, idx, ] = key\n    if prd in [ 'reading/hi', ]\n      target = readings_by_glyph[ glyph ]?= []\n      if obj in target\n        return warn \"skipping duplicate reading #{glyph} #{obj}\"\n      target.push obj\n    send key\n\n#-----------------------------------------------------------------------------------------------------------\n@$cast_types = ( ds_options ) ->\n  return $ ( [ sbj, prd, obj, idx, ], send ) =>\n    type_description = ds_options[ 'schema' ][ prd ]\n    unless type_description?\n      warn \"no type description for predicate #{rpr prd}\"\n    else\n      switch type = type_description[ 'type' ]\n        when 'int'\n          obj = parseInt obj, 10\n        when 'text'\n          ### TAINT we have no booleans configured ###\n          if      obj is 'true'   then obj = true\n          else if obj is 'false'  then obj = false\n    send if idx? then [ sbj, prd, obj, idx, ] else [ sbj, prd, obj, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_lists = ->\n  objs          = null\n  sbj_prd       = null\n  last_digest   = null\n  context_keys  = []\n  has_errors    = false\n  #.........................................................................................................\n  return $ ( key, send, end ) =>\n    #.......................................................................................................\n    if key?\n      context_keys.push key; context_keys.shift() if context_keys.length > 10\n      [ sbj, prd, obj, idx, ] = key\n      digest                  = JSON.stringify [ sbj, prd, ]\n      #.....................................................................................................\n      if digest is last_digest\n        if idx?\n          objs[ idx ] = obj\n        else\n          ### A certain subject/predicate combination can only ever be repeated if an index is\n          present in the key ###\n          alert()\n          alert \"erroneous repeated entry; context:\"\n          alert context_keys\n          has_errors = true\n      else\n        send [ sbj_prd..., objs, ] if objs?\n        objs            = null\n        last_digest     = digest\n        if idx?\n          objs            = []\n          objs[ idx ]     = obj\n          sbj_prd         = [ sbj, prd, ]\n        else\n          send key\n    #.......................................................................................................\n    if end?\n      send [ sbj_prd..., objs, ] if objs?\n      return send.error new Error \"there were errors; see alerts above\" if has_errors\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$compact_lists = ->\n  return $ ( [ sbj, prd, obj, ], send ) =>\n    ### Compactify sparse lists so all `undefined` elements are removed; warn about this ###\n    if ( CND.type_of obj ) is 'list'\n      new_obj = ( element for element in obj when element isnt undefined )\n      if obj.length isnt new_obj.length\n        warn \"phrase #{rpr [ sbj, prd, obj, ]} contained undefined elements; compactified\"\n      obj = new_obj\n    send [ sbj, prd, obj, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_version_to_kwic_v1 = ->\n  ### mark up all predicates `guide/kwic/*` as `guide/kwic/v1/*` ###\n  return $ ( [ sbj, prd, obj, ], send ) =>\n    if prd.startsWith 'guide/kwic/'\n      prd = prd.replace /^guide\\/kwic\\//, 'guide/kwic/v1/'\n    send [ sbj, prd, obj, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_long_wrapped_lineups_from_guides = ( guides ) ->\n  ### Extending lineups to accommodate for glyphs with 'overlong' factorials (those with more than 6\n  factors; these were previously excluded from the gamut in `feed-db.coffee`, line 2135,\n  `@KWIC.$compose_lineup_facets`). ###\n  ### TAINT here be magic numbers ###\n  lineup      = guides[ .. ]\n  last_idx    = lineup.length - 1 + 6\n  lineup.push    '\\u3000' while lineup.length < 19\n  lineup.unshift '\\u3000' while lineup.length < 25\n  R           = []\n  for idx in [ 6 .. last_idx ]\n    infix   = lineup[ idx ]\n    suffix  = lineup[ idx + 1 .. idx + 6 ].join ''\n    prefix  = lineup[ idx - 6 .. idx - 1 ].join ''\n    R.push [ infix, suffix, prefix, ].join ','\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_kwic_v2 = ->\n  ### see `demo/show_kwic_v2_and_v3_sample` ###\n  last_glyph            = null\n  long_wrapped_lineups  = null\n  return $ ( [ sbj, prd, obj, ], send ) =>\n    #.......................................................................................................\n    if prd is 'guide/has/uchr'\n      last_glyph            = sbj\n      long_wrapped_lineups  = @_long_wrapped_lineups_from_guides obj\n    #.......................................................................................................\n    return send [ sbj, prd, obj, ] unless prd.startsWith 'guide/kwic/v1/'\n    #.......................................................................................................\n    switch prd.replace /^guide\\/kwic\\/v1\\//, ''\n      when 'lineup/wrapped/infix', 'lineup/wrapped/prefix', 'lineup/wrapped/suffix', 'lineup/wrapped/single'\n        ### copy to target ###\n        send [ sbj, prd, obj, ]\n      when 'sortcode'\n        [ glyph, _, sortcodes_v1, ] = [ sbj, prd, obj, ]\n        sortcodes_v2                = []\n        #...................................................................................................\n        ### The difference between KWIC sortcodes of version 1 and version 2 lies in the re-arrangement\n        of the factor codes and the index codes. In v1, the index codes appeared interspersed with\n        the factor codes; in v2, the index codes come up front and the index codes come in the latter half\n        of the sortcode strings. The effect of this rearrangement is that now that all of the indexes\n        (which indicate the position of each factor in the lineup) are weaker than any of the factor codes,\n        like sequences of factor codes (and, therefore, factors) will always be grouped together (whereas\n        in v1, only like factors with like positions appeared together, and often like sequences appeared\n        with other sequences interspersed where their indexes demanded it so). ###\n        for sortcode_v1 in sortcodes_v1\n          sortrow_v1 = ( x for x in sortcode_v1.split /(........,..),/ when x.length > 0 )\n          sortrow_v1 = ( x.split ',' for x in sortrow_v1 )\n          sortrow_v2 = []\n          sortrow_v2.push sortcode for [ sortcode, _, ] in sortrow_v1\n          sortrow_v2.push position for [ _, position, ] in sortrow_v1\n          sortcodes_v2.push sortrow_v2.join ','\n        #...................................................................................................\n        unless glyph is last_glyph\n          return send.error new Error \"unexpected mismatch: #{rpr glyph}, #{rpr last_glyph}\"\n        #...................................................................................................\n        unless long_wrapped_lineups?\n          return send.error new Error \"missing long wrapped lineups for glyph #{rpr glyph}\"\n        #...................................................................................................\n        unless sortcodes_v2.length is long_wrapped_lineups.length\n          warn 'sortcodes_v2:         ', sortcodes_v2\n          warn 'long_wrapped_lineups: ', long_wrapped_lineups\n          return send.error new Error \"length mismatch for glyph #{rpr glyph}\"\n        #...................................................................................................\n        sortcodes_v1[ idx ] += \";\" + lineup for lineup, idx in long_wrapped_lineups\n        sortcodes_v2[ idx ] += \";\" + lineup for lineup, idx in long_wrapped_lineups\n        send [ glyph, 'guide/kwic/v2/lineup/wrapped/single', long_wrapped_lineups, ]\n        long_wrapped_lineups  = null\n        #...................................................................................................\n        send [ glyph, prd, sortcodes_v1, ]\n        send [ glyph, 'guide/kwic/v2/sortcode', sortcodes_v2, ]\n      else\n        send.error new Error \"unhandled predicate #{rpr prd}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_kwic_v3 = ( factor_infos ) ->\n  ### see `demo/show_kwic_v2_and_v3_sample` ###\n  #.........................................................................................................\n  return $ ( [ sbj, prd, obj, ], send ) =>\n    return if prd.startsWith 'guide/kwic/v2/'\n    return send [ sbj, prd, obj, ] unless prd.startsWith 'guide/kwic/v1/'\n    return if prd isnt 'guide/kwic/v1/sortcode'\n    #.......................................................................................................\n    [ glyph, _, [ sortcode_v1, ... ], ] = [ sbj, prd, obj, ]\n    #.......................................................................................................\n    sortrow_v1    = ( x for x in sortcode_v1.split /(........,..),/ when x.length > 0 )\n    weights       = ( x.split ',' for x in sortrow_v1 )\n    weights.pop()\n    weights       = ( sortcode for [ sortcode, _, ] in weights )\n    weights       = ( sortcode for sortcode in weights when sortcode isnt '--------' )\n    weights       = ( ( sortcode.replace    /~/g, '-'    ) for sortcode in weights )\n    weights       = ( ( sortcode.replace /----/g, 'f---' ) for sortcode in weights )\n    #.......................................................................................................\n    factors       = ( factor_infos[ sortcode ] for sortcode in weights )\n    factors       = ( ( if factor? then factor else '〓' ) for factor in factors )\n    #.......................................................................................................\n    unless weights.length is factors.length\n      warn glyph, weights, factors, weights.length, factors.length\n      return\n    #.......................................................................................................\n    permutations = KWIC.get_permutations factors, weights\n    send [ glyph, 'guide/kwic/v3/sortcode', permutations, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_kwic_v3_wrapped_lineups = ( factor_infos ) ->\n  prefix_max_length   = 3\n  suffix_max_length   = 3\n  #.........................................................................................................\n  return $ ( [ sbj, prd, obj, ], send ) =>\n    send [ sbj, prd, obj, ]\n    return unless prd is 'guide/kwic/v3/sortcode'\n    [ glyph, _, permutations, ]   = [ sbj, prd, obj, ]\n    lineups                       = []\n    #.......................................................................................................\n    for permutation, idx in permutations\n      [ sortcode, infix, suffix, prefix, ] = permutation\n      #.....................................................................................................\n      prefix_length                 = prefix.length\n      suffix_length                 = suffix.length\n      prefix_delta                  = prefix_length - prefix_max_length\n      suffix_delta                  = suffix_length - suffix_max_length\n      prefix_excess_max_length      = suffix_max_length - suffix_length\n      suffix_excess_max_length      = prefix_max_length - prefix_length\n      prefix_excess                 = []\n      suffix_excess                 = []\n      prefix_padding                = []\n      suffix_padding                = []\n      #.....................................................................................................\n      if prefix_delta > 0\n        prefix_excess = prefix.splice 0, prefix_delta\n      if suffix_delta > 0\n        suffix_excess = suffix.splice suffix.length - suffix_delta, suffix_delta\n      #.....................................................................................................\n      while prefix_excess.length > 0 and prefix_excess.length > prefix_excess_max_length - 1\n        prefix_excess.pop()\n      while suffix_excess.length > 0 and suffix_excess.length > suffix_excess_max_length - 1\n        suffix_excess.shift()\n      #.....................................................................................................\n      while prefix_padding.length + suffix_excess.length + prefix.length < prefix_max_length\n        prefix_padding.unshift '\\u3000'\n      while suffix_padding.length + prefix_excess.length + suffix.length < suffix_max_length\n        suffix_padding.unshift '\\u3000'\n      #.....................................................................................................\n      prefix.splice 0, 0, prefix_padding...\n      prefix.splice 0, 0, suffix_excess...\n      suffix.splice suffix.length, 0, suffix_padding...\n      suffix.splice suffix.length, 0, prefix_excess...\n      #.....................................................................................................\n      prefix = prefix.join ''\n      suffix = suffix.join ''\n      lineups.push [ sortcode, infix, suffix, prefix, ]\n    #.......................................................................................................\n    send [ glyph, 'guide/kwic/v3/sortcode/wrapped-lineups', lineups, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_factor_membership = ( factor_infos ) ->\n  glyphs_by_factors = {}\n  #.........................................................................................................\n  return $ ( phrase, send, end ) =>\n    if phrase?\n      send phrase\n      [ glyph, prd, obj, ] = phrase\n      return unless prd is 'guide/has/uchr'\n      for factor in obj\n        continue if factor is glyph\n        ( glyphs_by_factors[ factor ]?= new Set() ).add glyph\n    if end?\n      for factor, glyphs of glyphs_by_factors\n        send [ factor, 'factor/has/glyph/uchr', Array.from glyphs.keys(), ]\n        # glyphs.forEach ( glyph ) =>\n        #   send [ factor, 'factor/has/glyph/uchr', glyph, ]\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_components = ( factor_infos ) ->\n  # factors       = new Set()\n  # factors.add factor for _, factor of factor_infos\n  ### Immediate Constituents (ICs) ###\n  ics_by_glyph  = {}\n  seen_glyphs   = new Set()\n  glyph_count   = 0\n  #.........................................................................................................\n  resolve_ics = ( glyph ) =>\n    return if seen_glyphs.has glyph\n    seen_glyphs.add glyph\n    if ( entry = ics_by_glyph[ glyph ] )?\n      for ic in Array.from entry.keys()\n        resolve_ics ic\n        if ( sub_entry = ics_by_glyph[ ic ] )?\n          for sub_ic in Array.from sub_entry\n            entry.add sub_ic\n  #.........................................................................................................\n  return $ ( phrase, send, end ) =>\n    #.......................................................................................................\n    if phrase?\n      send phrase\n      [ glyph, prd, obj, ] = phrase\n      return unless prd is 'formula'\n      ### TAINT collecting ICs from outer glyphs might aid in resolving more inner glyphs ###\n      return unless XNCHR.is_inner_glyph glyph\n      glyph         = XNCHR.as_uchr glyph\n      glyph_count  += +1\n      for formula, formula_idx in obj\n        ics     = IDLX.find_all_non_operators formula\n        target  = ics_by_glyph[ glyph ]?= new Set()\n        target.add ( XNCHR.as_uchr ic ) for ic in ics\n    #.......................................................................................................\n    if end?\n      resolve_ics glyph                         for glyph of ics_by_glyph\n      ics_by_glyph[ glyph ] = Array.from entry  for glyph, entry of ics_by_glyph\n      for glyph, ics of ics_by_glyph\n        send [ glyph, 'component/uchr', ics, ]\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_sims = ->\n  sims_by_glyph = {}\n  #.........................................................................................................\n  return $ ( phrase, send, end ) =>\n    if phrase?\n      send phrase\n      [ source_glyph, prd, target_glyph, ] = phrase\n      return unless prd.startsWith 'sim/'\n      return unless XNCHR.is_inner_glyph source_glyph\n      [ _, tag, ] = prd.match /\\/(.+)$/\n      target      = sims_by_glyph[ target_glyph ]?= {}\n      ( target[ tag ]?= [] ).push source_glyph\n    if end?\n      for target_glyph, sims of sims_by_glyph\n        send [ target_glyph, \"sims/from\", sims, ]\n        # for tag, source_glyphs of sims\n        #   send [ target_glyph, \"sims/from/#{tag}\", source_glyphs, ]\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_guide_pairs = ( factor_infos ) ->\n  sortcode_by_factors = {}\n  sortcode_by_factors[ guide_uchr ] = sortcode for sortcode, guide_uchr of factor_infos\n  #.........................................................................................................\n  ### TAINT code duplication ###\n  ### TAIN make configurable / store in options ###\n  home              = njs_path.resolve __dirname, '../../jizura-datasources'\n  derivatives_home  = njs_path.resolve home, 'data/5-derivatives'\n  derivatives_route = njs_path.resolve derivatives_home, 'guide-pairs.txt'\n  derivatives       = njs_fs.createWriteStream derivatives_route, { encoding: 'utf-8', }\n  collector         = []\n  excludes          = [ '一', ]\n  help \"writing results of `add_guide_pairs` to #{derivatives_route}\"\n  derivatives.write \"\"\"\n    # generated on #{new Date()}\n    # by #{__filename}\n    \\n\\n\"\"\"\n  #.........................................................................................................\n  get_pairs = ( glyph, guides ) ->\n    ### TAINT allow or eliminate duplicates? use pairs and reversed pairs? ###\n    length      = guides.length\n    chrs        = []\n    sortcodes   = []\n    entries     = []\n    seen        = {}\n    R           = { chrs, entries, }\n    #.......................................................................................................\n    return R if length < 2\n    #.......................................................................................................\n    for i in [ 0 ... length - 1 ]\n      for j in [ i + 1 ... length ]\n        guide_0     = guides[ i ]\n        guide_1     = guides[ j ]\n        continue if guide_0 in excludes or guide_1 in excludes\n        sortcode_0  = sortcode_by_factors[ guide_0 ]\n        sortcode_1  = sortcode_by_factors[ guide_1 ]\n        sortcode_0 ?= 'zzzzzzzz'\n        sortcode_1 ?= 'zzzzzzzz'\n        # return send.error new Error \"unknown guide: #{guide_0}\" unless sortcode_0?\n        # return send.error new Error \"unknown guide: #{guide_1}\" unless sortcode_1?\n        #...................................................................................................\n        key         = guide_0 + guide_1\n        unless key of seen\n          chrs.push key\n          entries.push \"#{sortcode_0} #{sortcode_1}\\t#{key}\\t#{glyph}\"\n          seen[ key ] = 1\n        #...................................................................................................\n        key         = guide_1 + guide_0\n        unless key of seen\n          chrs.push key\n          entries.push \"#{sortcode_1} #{sortcode_0}\\t#{key}\\t#{glyph}\"\n          seen[ key ] = 1\n    #.......................................................................................................\n    return R\n  #.........................................................................................................\n  return $ ( phrase, send, end ) =>\n    #.......................................................................................................\n    if phrase?\n      send phrase\n      [ sbj, prd, obj, ] = phrase\n      #.....................................................................................................\n      if prd is 'guide/has/uchr'\n        [ glyph, _, guides, ] = [ sbj, prd, obj, ]\n        if XNCHR.is_inner_glyph glyph\n          { chrs, entries, }    = get_pairs glyph, guides\n          # debug '©VrqrO', glyph, chrs\n          # debug '©VrqrO', glyph, entries\n          collector.push entry for entry in entries\n          send [ glyph, 'guide/pair/uchr',    chrs, ]\n          send [ glyph, 'guide/pair/entry',   entries, ]\n    #.......................................................................................................\n    if end?\n      debug '©70RRX', new Date()\n      whisper \"sorting guide pairs...\"\n      collector.sort()\n      whisper \"done\"\n      debug '©70RRX', new Date()\n      whisper \"writing guide pairs...\"\n      for entry in collector\n        derivatives.write entry + '\\n'\n      derivatives.end()\n      whisper \"done\"\n      debug '©70RRX', new Date()\n      end()\n\n# #===========================================================================================================\n# find_duplicated_guides = ->\n#   D = require 'pipedreams'\n#   $ = D.remit.bind D\n#   ### TAINT code duplication ###\n#   ### TAIN make configurable / store in options ###\n#   home              = njs_path.resolve __dirname, '../../jizura-datasources'\n#   derivatives_home  = njs_path.resolve home, 'data/5-derivatives'\n#   # derivatives_route = njs_path.resolve derivatives_home, 'guide-pairs.txt'\n#   input             = njs_fs.createReadStream  njs_path.resolve derivatives_home, 'guide-pairs.txt'\n#   output            = njs_fs.createWriteStream njs_path.resolve derivatives_home, 'guide-pairs-duplicated.txt'\n#   input\n#     .pipe D.$split()\n#     # .pipe D.$parse_csv headers: no\n#     .pipe $ ( line, send ) => send line unless line.length is 0\n#     .pipe $ ( line, send ) => send line unless line.startsWith '#'\n#     .pipe $ ( line, send ) => send [ line, ( line.split '\\t' )... ]\n#     .pipe $ ( [ line, _, guides, glyph, ], send ) => send [ line, glyph, guides, ]\n#     .pipe $ ( fields, send ) =>\n#       [ line, glyph, guides, ] = fields\n#       # debug '0912', rpr fields\n#       unless CND.isa_text guides\n#         warn line, fields\n#       send fields\n#     .pipe $ ( [ line, glyph, guides, ], send ) =>\n#       send [ line, glyph, ( Array.from guides )... ]\n#     .pipe $ ( fields, send ) =>\n#       [ line, glyph, guide_0, guide_1, ] = fields\n#       send fields unless guide_0 is '一' or guide_1 is '一'\n#     .pipe $ ( fields, send ) =>\n#       [ line, glyph, guide_0, guide_1, ] = fields\n#       send fields if guide_0 is guide_1\n#     # .pipe D.$show()\n#     .pipe $ ( [ line, glyph, guide_0, guide_1, ], send ) => send line + '\\n'\n#     .pipe output\n# find_duplicated_guides()\n\n#-----------------------------------------------------------------------------------------------------------\n@v1_split_so_bkey = ( bkey ) ->\n  R       = bkey.toString 'utf-8'\n  R       = R.split '|'\n  idx_txt = R[ 3 ]\n  R       = [ ( R[ 1 ].split ':' )[ 1 ], ( R[ 2 ].split ':' )..., ]\n  R.push ( parseInt idx_txt, 10 ) if idx_txt? and idx_txt.length > 0\n  for r, idx in R\n    continue unless CND.isa_text r\n    continue unless 'µ' in r\n    R[ idx ] = @v1_unescape r\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@v1_$split_so_bkey = -> $ ( bkey, send ) => send @v1_split_so_bkey bkey\n\n#-----------------------------------------------------------------------------------------------------------\n@v1_lte_from_gte = ( gte ) ->\n  R = new Buffer ( last_idx = Buffer.byteLength gte ) + 1\n  R.write gte\n  R[ last_idx ] = 0xff\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@v1_unescape = ( text_esc ) ->\n  matcher = /µ([0-9a-f]{2})/g\n  return text_esc.replace matcher, ( _, cid_hex ) ->\n    return String.fromCharCode parseInt cid_hex, 16\n\n#-----------------------------------------------------------------------------------------------------------\n@read_factors = ( db, handler ) ->\n  #.........................................................................................................\n  Z         = {}\n  #.......................................................................................................\n  gte         = 'os|factor/sortcode'\n  lte         = @v1_lte_from_gte gte\n  input       = db[ '%self' ].createKeyStream { gte, lte, }\n  #.......................................................................................................\n  input\n    .pipe @v1_$split_so_bkey()\n    .pipe D.$observe ( [ sortcode, _, factor, ] ) =>\n      Z[ sortcode ] = XNCHR.as_uchr factor\n    .pipe D.$on_end -> handler null, Z\n\n#-----------------------------------------------------------------------------------------------------------\n@copy_jizura_db = ->\n  home            = njs_path.resolve __dirname, '../../jizura-datasources'\n  source_route    = njs_path.resolve home, 'data/leveldb'\n  target_route    = njs_path.resolve home, 'data/leveldb-v2'\n  # ### # # # # # # # # # # # # # # # # # # # # # ###\n  # target_route    = '/tmp/leveldb-v2'; alert \"using temp DB\"\n  # ### # # # # # # # # # # # # # # # # # # # # # ###\n  target_db_size  = 1e6\n  ds_options      = require njs_path.resolve home, 'options'\n  source_db       = HOLLERITH.new_db source_route\n  target_db       = HOLLERITH.new_db target_route, size: target_db_size, create: yes\n  #.........................................................................................................\n  ### TAINT this setting should come from Jizura DB options ###\n  # solids          = [ 'guide/kwic/v3/sortcode', ]\n  solids          = []\n  #.........................................................................................................\n  help \"using DB at #{source_db[ '%self' ][ 'location' ]}\"\n  help \"using DB at #{target_db[ '%self' ][ 'location' ]}\"\n  #.........................................................................................................\n  step ( resume ) =>\n    yield HOLLERITH.clear target_db, resume\n    #.........................................................................................................\n    factor_infos  = yield @read_factors source_db, resume\n    # for key, factor of factor_infos\n    #   debug key, factor if ( XNCHR.as_uchr factor ) in '羊⺶丷䒑'\n    # process.exit 1\n    help \"read #{( Object.keys factor_infos ).length} entries for factor_infos\"\n    #.........................................................................................................\n    # gte         = 'so|glyph:中'\n    if ( CND.isa_list sample = options[ 'sample' ] ) and ( sample.length is 1 )\n      gte         = \"so|glyph:#{sample[ 0 ]}\"\n    else\n      gte         = 'so|'\n    lte         = @v1_lte_from_gte gte\n    input       = source_db[ '%self' ].createKeyStream { gte, lte, }\n    batch_size  = 1e4\n    output      = HOLLERITH.$write target_db, { batch: batch_size, solids }\n    #.........................................................................................................\n    help \"copying from  #{source_route}\"\n    help \"to            #{target_route}\"\n    help \"reading records with prefix #{rpr gte}\"\n    help \"writing with batch size #{ƒ batch_size}\"\n    #.........................................................................................................\n    input\n      #.......................................................................................................\n      .pipe @v1_$split_so_bkey()\n      .pipe @$show_progress 1e4\n      .pipe @$keep_small_sample()\n      .pipe @$throw_out_pods()\n      .pipe @$remove_duplicate_kana_readings()\n      .pipe @$cast_types ds_options\n      .pipe @$collect_lists()\n      .pipe @$compact_lists()\n      .pipe @$add_version_to_kwic_v1()\n      # .pipe @$add_kwic_v2()\n      .pipe @$add_kwic_v3                 factor_infos\n      .pipe @$add_kwic_v3_wrapped_lineups factor_infos\n      # .pipe @$add_guide_pairs             factor_infos\n      .pipe @$add_factor_membership       factor_infos\n      .pipe @$add_components      factor_infos\n      .pipe @$add_sims()\n      # .pipe D.$show()\n      .pipe D.$count ( count ) -> help \"kept #{ƒ count} phrases\"\n      .pipe D.$stop_time \"copy Jizura DB\"\n      .pipe output\n\n\n############################################################################################################\nunless module.parent?\n  @copy_jizura_db()\n"]}