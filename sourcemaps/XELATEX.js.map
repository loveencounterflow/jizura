{"version":3,"sources":["XELATEX.coffee"],"names":[],"mappings":"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","file":"XELATEX.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'XLTX'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nXNCHR                     = require './XNCHR'\nTEX                       = require 'coffeenode-tex'\n\n\n#===========================================================================================================\n#\n#...........................................................................................................\n@glyph_tag_by_rsg         =\n  'u-latn':                 TEX.make_command 'latin'\n  'u-latn-1':               TEX.make_command 'latin'\n  'u-cjk':                  TEX.make_command 'cn'\n  'u-halfull':              TEX.make_command 'cn'\n  'u-dingb':                TEX.make_command 'cn'\n  'u-cjk-xa':               TEX.make_command 'cnxa'\n  'u-cjk-xb':               TEX.make_command 'cnxb'\n  'u-cjk-xc':               TEX.make_command 'cnxc'\n  'u-cjk-xd':               TEX.make_command 'cnxd'\n  'u-cjk-cmpi1':            TEX.make_command 'cncone'\n  'u-cjk-cmpi2':            TEX.make_command 'cnctwo'\n  'u-cjk-rad1':             TEX.make_command 'cnrone'\n  'u-cjk-rad2':             TEX.make_command 'cnrtwo'\n  'u-cjk-sym':              TEX.make_command 'cnsym' # !!! should be able to control single codepoints\n  'u-cjk-strk':             TEX.make_command 'cnstrk'\n  'u-pua':                  TEX.make_command 'cnjzr'\n  'jzr-fig':                TEX.make_command 'cnjzr'\n  'u-cjk-kata':             TEX.make_command 'ka'\n  'u-cjk-hira':             TEX.make_command 'hi'\n  'u-hang-syl':             TEX.make_command 'hg'\n  #.........................................................................................................\n  # ### TAINT kludge to accommodate for the fact that Sun-ExtA is missing a few characters: ###\n  # 'xxx':                    TEX.make_command 'cnextra'\n\n#...........................................................................................................\n@stacked_fncr             = TEX.make_multicommand 'fncr', 2\n#...........................................................................................................\n@_py                      = TEX.make_command 'py'\n@ka                       = TEX.make_command 'ka'\n@hi                       = TEX.make_command 'hi'\n@hg                       = TEX.make_command 'hg'\n@gloss                    = TEX.make_command 'gloss'\n@mainentry                = TEX.make_command 'mainentry'\n@missing                  = TEX.make_command 'missing'\n@hbox                     = TEX.make_command 'hbox'\n@jzrplain                 = TEX.make_environment 'jzrplain'\n@tabular                  = TEX.make_environment 'tabular'\n# upaccent                  = TEX.make_command 'upaccent'\n# aboxshift                 = TEX.make_command 'aboxshift'\n#...........................................................................................................\n# @par                      = ( TEX.make_loner 'par'        )()\n@par                      = TEX.raw ' \\\\\\\\\\n' # i.e. space, double backslash, newline\n@hirabar                  = ( TEX.make_loner 'hirabar'    )()\n#...........................................................................................................\n# @next_cell                = TEX.raw '\\n&\\n'\n@next_cell                = TEX.raw ' & '\n# @_new_page                = ( TEX.make_loner 'newpage' )()\n@new_page                 = ( TEX.make_loner 'clearpage' )()\n\n\n############################################################################################################\n# HELPERS\n#===========================================================================================================\n@as_tex_text = ( text, settings ) ->\n  ### An improved version of `tag_from_chr`, below ###\n  glyph_styles          = settings?[ 'glyph-styles'             ] ? {}\n  ignore_latin          = settings?[ 'ignore-latin'             ] ? yes\n  tex_command_by_rsgs   = settings?[ 'tex-command-by-rsgs' ]\n  last_command          = null\n  #.........................................................................................................\n  unless tex_command_by_rsgs?\n    throw new Error \"need setting 'tex-command-by-rsgs'\"\n  #.........................................................................................................\n  R             = []\n  stretch       = []\n  last_tag_name = null\n  #.........................................................................................................\n  advance = =>\n    if stretch.length > 0\n      R.push stretch.join ''\n      R.push '}' unless ignore_latin and last_command is 'latin'\n    stretch.length = 0\n    return null\n  #.........................................................................................................\n  for chr in XNCHR.chrs_from_text text\n    chr_info    = XNCHR.analyze chr\n    { chr\n      uchr\n      fncr\n      rsg   }   = chr_info\n    #.......................................................................................................\n    switch rsg\n      when 'jzr-fig'  then chr = uchr\n      when 'u-pua'    then rsg = 'jzr-fig'\n    #.......................................................................................................\n    if ( replacement = glyph_styles[ chr ] )?\n      advance()\n      R.push replacement\n      continue\n    #.......................................................................................................\n    unless ( command = tex_command_by_rsgs[ rsg ] )?\n      warn \"unknown RSG #{rpr rsg}: #{fncr} #{chr}\"\n      advance()\n      stretch.push chr\n      continue\n    #.......................................................................................................\n    if last_command isnt command\n      advance()\n      last_command = command\n      unless ignore_latin and command is 'latin'\n        stretch.push \"\\\\#{command}{\"\n    #.......................................................................................................\n    stretch.push chr\n  #.........................................................................................................\n  advance()\n  return R.join ''\n\n#-----------------------------------------------------------------------------------------------------------\n@tag_from_chr = ( glyph_styles, chr ) ->\n  ### TAINT not well written ###\n  chr_info    = XNCHR.analyze chr\n  { chr\n    fncr\n    rsg   }   = chr_info\n  #.........................................................................................................\n  return TEX.raw R if ( R = glyph_styles[ chr ] )?\n  return TEX.raw \"\"\"\\\\cnjzr{#{chr_info[ 'uchr' ]}}\"\"\" if rsg is 'jzr-fig'\n  #.........................................................................................................\n  unless ( tag = @glyph_tag_by_rsg[ rsg ] )?\n    warn \"unknown RSG #{rpr rsg}: #{fncr} #{chr}\"\n    return chr_info[ 'chr' ]\n  return tag chr_info[ 'chr' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@tag_rpr_from_chr = ( glyph_styles, chr ) ->\n  return TEX.rpr @tag_from_chr glyph_styles, chr\n\n#-----------------------------------------------------------------------------------------------------------\n@py = ( text ) ->\n  return @_py @raw @_rewrite_pinyin text\n\n#-----------------------------------------------------------------------------------------------------------\n@_rewrite_pinyin = ( text ) ->\n  # return text unless text?\n  # log cyan '©4p0', rpr text\n  R = text\n  R = R.replace /ǖ/,  \"\\\\upaccent{\\\\aboxshift{ˉ}}{ü}\"\n  R = R.replace /ǘ/,  \"\\\\upaccent{\\\\aboxshift{´}}{ü}\"\n  R = R.replace /ǚ/,  \"\\\\upaccent{\\\\aboxshift{ˇ}}{ü}\"\n  R = R.replace /ǜ/,  \"\\\\upaccent{\\\\aboxshift{`}}{ü}\"\n  R = R.replace /ê1/, \"\\\\upaccent{\\\\aboxshift{ˉ}}{ê}\"\n  R = R.replace /ê2/, \"\\\\upaccent{\\\\aboxshift{´}}{ê}\"\n  R = R.replace /ê3/, \"\\\\upaccent{\\\\aboxshift{ˇ}}{ê}\"\n  R = R.replace /ê4/, \"\\\\upaccent{\\\\aboxshift{`}}{ê}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@rpr                      = TEX.rpr.bind TEX\n"]}