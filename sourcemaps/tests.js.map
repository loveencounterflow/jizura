{"version":3,"sources":["tests.coffee"],"names":[],"mappings":"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","file":"tests.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\n# eventually                = suspend.eventually\n### TAINT experimentally using `later` in place of `setImmediate` ###\nlater                     = suspend.immediately\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nMKTS                      = require './MKTS'\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.TRACKER.parse accepts dot patterns\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ '.',     [ '.', null,   null, ], ]\n    [ '.p',    [ '.', 'p',    null, ], ]\n    [ '.text', [ '.', 'text', null, ], ]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    # help ( rpr probe ), MKTS.TRACKER.parse probe\n    T.eq ( MKTS.TRACKER.parse probe ), matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.TRACKER.parse accepts empty fenced patterns\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ '<>', [ '<', null, '>', ], ]\n    [ '{}', [ '{', null, '}', ], ]\n    [ '[]', [ '[', null, ']', ], ]\n    [ '()', [ '(', null, ')', ], ]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    # help ( rpr probe ), MKTS.TRACKER.parse probe\n    T.eq ( MKTS.TRACKER.parse probe ), matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.TRACKER.parse accepts unfenced named patterns\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ 'document',       [ null, 'document',     null, ], ]\n    [ 'singlecolumn',   [ null, 'singlecolumn', null, ], ]\n    [ 'code',           [ null, 'code',         null, ], ]\n    [ 'blockquote',     [ null, 'blockquote',   null, ], ]\n    [ 'em',             [ null, 'em',           null, ], ]\n    [ 'xxx',            [ null, 'xxx',          null, ], ]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    # help ( rpr probe ), MKTS.TRACKER.parse probe\n    T.eq ( MKTS.TRACKER.parse probe ), matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.TRACKER.parse accepts fenced named patterns\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ '<document>',     [ '<', 'document',     '>', ], ]\n    [ '{singlecolumn}', [ '{', 'singlecolumn', '}', ], ]\n    [ '{code}',         [ '{', 'code',         '}', ], ]\n    [ '[blockquote]',   [ '[', 'blockquote',   ']', ], ]\n    [ '(em)',           [ '(', 'em',           ')', ], ]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    # help ( rpr probe ), MKTS.TRACKER.parse probe\n    T.eq ( MKTS.TRACKER.parse probe ), matcher\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.TRACKER.parse rejects empty string\" ] = ( T, done ) ->\n  T.throws \"pattern must be non-empty, got ''\", ( -> MKTS.TRACKER.parse '' )\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"MKTS.TRACKER.parse rejects non-matching fences etc\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ '(xxx}',  'fences don\\'t match in pattern \\'(xxx}\\'',          ]\n    [ '.)',     'fence \\'.\\' can not have right fence, got \\'.)\\'',  ]\n    [ '.p)',    'fence \\'.\\' can not have right fence, got \\'.p)\\'', ]\n    [ '.[',     'fence \\'.\\' can not have right fence, got \\'.[\\'',  ]\n    [ '<',      'unmatched fence in \\'<\\'',                          ]\n    [ '{',      'unmatched fence in \\'{\\'',                          ]\n    [ '[',      'unmatched fence in \\'[\\'',                          ]\n    [ '(',      'unmatched fence in \\'(\\'',                          ]\n    ]\n  for [ probe, matcher, ] in probes_and_matchers\n    T.throws matcher, ( -> MKTS.TRACKER.parse probe )\n  done()\n\n#===========================================================================================================\n# MAIN\n#-----------------------------------------------------------------------------------------------------------\n@_main = ( handler ) ->\n  test @, 'timeout': 2500\n\n\n############################################################################################################\nunless module.parent?\n  @_main()\n\n"]}