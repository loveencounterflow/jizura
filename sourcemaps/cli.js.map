{"version":3,"sources":["cli.coffee"],"names":[],"mappings":"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","file":"cli.js","sourceRoot":"/source/","sourcesContent":["\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/cli'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# ƒ                         = CND.format_number.bind CND\n# HELPERS                   = require './HELPERS'\n# # options                   = require './options'\n# TEXLIVEPACKAGEINFO        = require './TEXLIVEPACKAGEINFO'\n# options_route             = '../options.coffee'\n# { CACHE, OPTIONS, }       = require './OPTIONS'\n# SEMVER                    = require 'semver'\n# #...........................................................................................................\n# MKTS                      = require './MKTS'\n\n\n###\n\napp       = require 'commander'\napp_name  = process.argv[ 1 ]\n\napp\n  .version ( require '../package.json' )[ 'version' ]\n  .command 'mkts <filename>'\n  .action ( filename ) ->\n    help ( CND.grey \"#{app_name}\" ), ( CND.gold 'mkts' ), ( CND.lime filename )\n    MKTS = require './mkts-typesetter-interim'\n    CND.dir MKTS\n    MKTS.pdf_from_md filename\n\napp.parse process.argv\n# debug '©nES6R', process.argv\n\n###\n\n\n#-----------------------------------------------------------------------------------------------------------\napp       = require 'commander'\napp_name  = process.argv[ 1 ]\napp.version ( require '../package.json' )[ 'version' ]\n\n#-----------------------------------------------------------------------------------------------------------\nget_do_stats = ( input, fallback = false ) ->\n  return fallback unless input?\n  return input\n\n#-----------------------------------------------------------------------------------------------------------\nget_glyph_sample = ( input, fallback = Infinity ) ->\n  return fallback unless input?\n  return Infinity if input in [ Infinity, 'all', 'infinity', 'Infinity', ]\n  return R if CND.isa_number ( R = parseInt input, 10 )\n  return Array.from input\n\n#-----------------------------------------------------------------------------------------------------------\nget_factor_sample = ( input, fallback = null ) ->\n  return fallback unless input?\n  return Array.from input\n\n#-----------------------------------------------------------------------------------------------------------\nisa_folder = ( route ) ->\n  try\n    fstats = njs_fs.statSync route\n  catch error\n    return false if error.code is 'ENOENT'\n    throw error\n  return fstats.isDirectory()\n\n#-----------------------------------------------------------------------------------------------------------\napp\n  .command      \"mkts <filename>\"\n  .description  \"typeset MD source in <filename>, output PDF\"\n  #.........................................................................................................\n  .action ( filename ) ->\n    help ( CND.grey \"#{app_name}\" ), ( CND.gold 'mkts' ), ( CND.lime filename )\n    MKTS = require './mkts-typesetter-interim'\n    CND.dir MKTS\n    MKTS.pdf_from_md filename\n\n#-----------------------------------------------------------------------------------------------------------\napp\n  #.........................................................................................................\n  .command      \"kwic [output_route]\"\n  .description  \"render (excerpt of) KWIC index (to output_route where given; must be a folder)\"\n  .option       \"-s, --stats\",              \"show KWIC infix statistics [false]\"\n  .option       \"-g, --glyphs [glyphs]\",    \"which glyphs to include\"\n  .option       \"-f, --factors [factors]\",  \"which factors to include\"\n  #.........................................................................................................\n  .action ( output_route, options ) ->\n    help ( CND.white \"#{app_name}\" ), ( CND.gold 'kwic' )#, ( CND.lime kwic_route )\n    #.......................................................................................................\n    do_stats                    = get_do_stats      options[ 'stats'    ]\n    glyph_sample                = get_glyph_sample  options[ 'glyphs'   ]\n    factor_sample               = get_factor_sample options[ 'factors'  ]\n    output_route               ?= null\n    kwic_route                  = null\n    stats_route                 = null\n    #.......................................................................................................\n    if glyph_sample is Infinity         then glyph_sample_key = 'all'\n    else if CND.isa_number glyph_sample then glyph_sample_key = rpr glyph_sample\n    else                                     glyph_sample_key = glyph_sample.join ''\n    if factor_sample? then  key = \"g.#{glyph_sample_key}_f.#{factor_sample.join ''}\"\n    else                    key = \"g.#{glyph_sample_key}\"\n    key                         = \"kwic-#{CND.id_from_text key, 4}-#{key}\"\n    #.......................................................................................................\n    if output_route?\n      throw new Error \"#{output_route}:\\nnot a folder\" unless isa_folder output_route\n      output_route  = njs_path.resolve __dirname, output_route\n      kwic_route    = njs_path.join output_route, \"#{key}-glyphs.md\"\n      stats_route   = njs_path.join output_route, \"#{key}-stats.md\" if do_stats?\n    #.......................................................................................................\n    help \"key for this collection is #{key}\"\n    if output_route? then   help \"KWIC index will be written to #{kwic_route}\"\n    if stats_route? then    help \"statistics will be written to #{stats_route}\"\n    help \"glyph_sample is #{rpr glyph_sample}\"\n    if factor_sample? then  help \"factors: #{factor_sample.join ''}\"\n    else                    help \"all factors will be included\"\n    #.......................................................................................................\n    S = { glyph_sample, factor_sample, output_route, kwic_route, stats_route, key, }\n    #.......................................................................................................\n    SHOW_KWIC_V3 = require './show-kwic-v3'\n    SHOW_KWIC_V3.show_kwic_v3 S\n\n\n############################################################################################################\n# app.on '--help', -> info \"here's the rundown\"\napp.parse process.argv\n\nunless app.args?.length > 0\n  warn \"missing arguments\"\n  app.help()\n"]}