{"version":3,"sources":["cli.coffee"],"names":[],"mappings":"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","file":"cli.js","sourceRoot":"/source/","sourcesContent":["\n\n############################################################################################################\n# njs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/cli'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# ƒ                         = CND.format_number.bind CND\n# HELPERS                   = require './HELPERS'\n# # options                   = require './options'\n# TEXLIVEPACKAGEINFO        = require './TEXLIVEPACKAGEINFO'\n# options_route             = '../options.coffee'\n# { CACHE, OPTIONS, }       = require './OPTIONS'\n# SEMVER                    = require 'semver'\n# #...........................................................................................................\n# MKTS                      = require './MKTS'\n\n\n###\n\napp       = require 'commander'\napp_name  = process.argv[ 1 ]\n\napp\n  .version ( require '../package.json' )[ 'version' ]\n  .command 'mkts <filename>'\n  .action ( filename ) ->\n    help ( CND.grey \"#{app_name}\" ), ( CND.gold 'mkts' ), ( CND.lime filename )\n    MKTS = require './mkts-typesetter-interim'\n    CND.dir MKTS\n    MKTS.pdf_from_md filename\n\napp.parse process.argv\n# debug '©nES6R', process.argv\n\n###\n\n\n#-----------------------------------------------------------------------------------------------------------\napp       = require 'commander'\napp_name  = process.argv[ 1 ]\napp.version ( require '../package.json' )[ 'version' ]\n\n#-----------------------------------------------------------------------------------------------------------\nget_stats_route = ( input, fallback = null ) ->\n  return fallback unless input?\n  return input\n\n#-----------------------------------------------------------------------------------------------------------\nget_glyph_sample = ( input, fallback = 1000 ) ->\n  return fallback unless input?\n  return Infinity if input in [ Infinity, 'all', 'infinity', 'Infinity', ]\n  return R if CND.isa_number ( R = parseInt input, 10 )\n  return Array.from input\n\n#-----------------------------------------------------------------------------------------------------------\nget_factor_sample = ( input, fallback = null ) ->\n  return fallback unless input?\n  return Array.from input\n\n#-----------------------------------------------------------------------------------------------------------\napp\n  .command      \"mkts <filename>\"\n  .description  \"typeset MD source in <filename>, output PDF\"\n  #.........................................................................................................\n  .action ( filename ) ->\n    help ( CND.grey \"#{app_name}\" ), ( CND.gold 'mkts' ), ( CND.lime filename )\n    MKTS = require './mkts-typesetter-interim'\n    CND.dir MKTS\n    MKTS.pdf_from_md filename\n\n#-----------------------------------------------------------------------------------------------------------\napp\n  #.........................................................................................................\n  .command      \"kwic <output_route>\"\n  .description  \"render (excerpt of) KWIC index to <output_route>\"\n  .option       \"-s --stats [stats-filename]\",  \"render KWIC infix statistics\"\n  .option       \"-g --glyphs [glyphs]\",         \"which glyphs to include\"\n  .option       \"-f --factors [factors]\",       \"which factors to include\"\n  #.........................................................................................................\n  .action ( output_route, options ) ->\n    help ( CND.white \"#{app_name}\" ), ( CND.gold 'kwic' )#, ( CND.lime kwic_route )\n    #.......................................................................................................\n    stats_route     = get_stats_route   options.stats\n    glyph_sample    = get_glyph_sample  options.glyphs\n    factor_sample   = get_factor_sample options.factors\n    #.......................................................................................................\n    help \"KWIC index will be written to #{output_route}\"\n    if stats_route? then    help \"statistics will be written to #{stats_route}\"\n    else                    help \"no statistics will be written\"\n    help \"glyph_sample is #{rpr glyph_sample}\"\n    if factor_sample? then  help \"factors: #{factor_sample.join ''}\"\n    else                    help \"all factors will be included\"\n    #.......................................................................................................\n    S = { glyph_sample, factor_sample, output_route, stats_route, }\n    #.......................................................................................................\n    SHOW_KWIC_V3 = require './show-kwic-v3'\n    SHOW_KWIC_V3.show_kwic_v3 S\n\n\n############################################################################################################\n# app.on '--help', -> info \"here's the rundown\"\napp.parse process.argv\nunless app.args?.length > 0\n  warn \"missing arguments\"\n  app.help()\n"]}