{"version":3,"sources":["mkts-typesetter-interim.coffee"],"names":[],"mappings":"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","file":"mkts-typesetter-interim.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/MKTS-interim'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nƒ                         = CND.format_number.bind CND\nTYPESETTER                = require 'mingkwai-typesetter'\nHELPERS                   = require './HELPERS'\noptions                   = require './options'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@pdf_from_md = ( source_route, handler ) ->\n  ###\n  FI = require 'coffeenode-fillin'\n  text                    = FI.fill_in template, kwic_details\n  ###\n  HELPERS.provide_tmp_folder()\n  handler                ?= ->\n  layout_info             = HELPERS.new_layout_info source_route\n  source_locator          = layout_info[ 'source-locator']\n  tex_locator             = layout_info[ 'tex-locator']\n  tex_output              = njs_fs.createWriteStream tex_locator\n  ### TAINT should read MD source stream ###\n  text                    = njs_fs.readFileSync source_locator, encoding: 'utf-8'\n  #---------------------------------------------------------------------------------------------------------\n  tex_output.on 'close', =>\n    HELPERS.write_pdf layout_info, handler\n  #---------------------------------------------------------------------------------------------------------\n  input = TYPESETTER.create_html_readstream_from_mdx_text text\n  input\n    # .pipe @$transform_commands()\n    .pipe D.$show()\n    .pipe HELPERS.TYPO.$fix_typography_for_tex()\n    .pipe @$assemble_tex_events()\n    .pipe @$filter_tex()\n    .pipe @$insert_preamble()\n    .pipe @$insert_postscript()\n    .pipe tex_output\n  #---------------------------------------------------------------------------------------------------------\n  # D.resume input\n  input.resume()\n\n###\n#-----------------------------------------------------------------------------------------------------------\n@$transform_commands = ->\n  command_pattern = /^\\n?‡([^\\s][^\\n]*)\\n$/\n  return $ ( event, send ) =>\n    [ type, tail..., ]  = event\n    if ( type is 'text' ) and ( match = tail[ 0 ].match command_pattern )?\n      command = match[ 1 ]\n      match   = command.match /^(\\S+)\\s+(.+)$/\n      if match?\n        [ _, command, values, ] = match\n        send [ 'command', command, values, ]\n      else\n        send [ 'command', command, ]\n    else\n      send event\n###\n\n#-----------------------------------------------------------------------------------------------------------\n@$assemble_tex_events = ->\n  tag_stack               = []\n  within_multicol         = no\n  start_multicol_after    = null\n  add_newline_before_end  = null\n  list_level              = 0\n  keep_lines              = no\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    # if is_first_event\n    #   start_size 1\n    #   send [ 'doc', me, ]\n    #   is_first_event = no\n    #.......................................................................................................\n    if event?\n      [ type, tail..., ]  = event\n    #   ok                  = no\n      #.....................................................................................................\n      switch type\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'command'\n          [ command, values, ] = tail\n          switch command\n            when 'new-document'\n              document_name = values\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}\\n\\n' ]\n                within_multicol = no\n              send [ 'tex', \"\\\\null\\\\newpage%‡#{command} #{document_name}‡\\n\" ]\n              # send [ 'tex', \"\\\\null\\\\newpage\\n\" ]\n              # send [ 'tex', \"\\n%‡#{command} #{document_name}\\n\\n\" ]\n            when 'newpage'\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}\\n\\n' ]\n                within_multicol = no\n              send [ 'tex', \"\\\\null\\\\newpage%1\\n\" ]\n            else\n              warn \"ignored command #{rpr event}\"\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'text'\n          text = tail[ 0 ]\n          # text = @fix_quotes  text\n          # text = @escape_text text\n          text = text.replace /\\n/g, '\\\\\\\\\\n' if keep_lines\n          send [ 'text', text, ]\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'open-tag'\n          [ name, attributes, ] = tail\n          tag_stack.push name\n          #.................................................................................................\n          switch name\n    #         #...............................................................................................\n    #         when 'span'\n    #           if attributes[ 'class' ]? and ( match = attributes[ 'class' ].match /^size-([0-9]+)$/ )?\n    #             size = parseInt match[ 1 ], 10\n    #           else\n    #             size = get_size()\n    #           start_size size\n    #           ok = yes\n            #...............................................................................................\n            when 'newpage'\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}\\n\\n' ]\n                within_multicol = no\n              send [ 'tex', \"\\\\null\\\\newpage%2\\n\" ]\n            #...............................................................................................\n            when 'fullwidth'\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}\\n\\n' ]\n                within_multicol = no\n            #...............................................................................................\n            when 'h1'\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}\\n\\n' ]\n                within_multicol = no\n              # img_route = '/Volumes/Storage/temp/french-rule-swell-dash-englische-line/swell-dash.pdf'\n              # send [ 'tex', \"\\\\includegraphics[width=0.75\\\\linewidth]{#{img_route}}\", ]\n              # send [ 'tex', \"\\\\\\\\[3\\\\baselineskip]%\", ]\n              # send [ 'tex', '\\\\eline\\n', ]\n              # send [ 'tex', '\\n\\n', ]\n              send [ 'tex', \"\\\\jzrChapter{\", ]\n              # send [ 'tex', \"\\\\chapter{\", ]\n              add_newline_before_end  = name\n              start_multicol_after    = name\n            #...............................................................................................\n            when 'h2'\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}\\n\\n' ]\n                within_multicol = no\n              send [ 'tex', \"\\\\jzrSection{\", ]\n              start_multicol_after = name\n            #...............................................................................................\n            when 'h3'\n              send [ 'tex', \"\\\\subsection{\", ]\n            #...............................................................................................\n            when 'h4'\n              ### TAINT subsection or deeper? ###\n              send [ 'tex', \"\\\\subsection{\", ]\n            #...............................................................................................\n            when 'h5', 'h6'\n              send [ 'tex', \"\\\\subsection{\", ]\n            #...............................................................................................\n            when 'p'\n              unless within_multicol\n                send [ 'tex', '\\\\begin{multicols}{2}\\n' ]\n                within_multicol = yes\n              send [ 'tex', '\\n\\n', ]\n            #...............................................................................................\n            when 'br'\n              send [ 'tex', '\\\\\\\\', ]\n            #...............................................................................................\n            when 'blockquote'\n              send [ 'tex', '\\\\begin{blockquote}\\n', ]\n              # send [ 'tex', '\\\\begingroup\\n', ]\n              # send [ 'tex', '\\\\itshape\\n', ]\n            #...............................................................................................\n            when 'strong'\n              send [ 'tex', '\\\\bold{', ]\n            #...............................................................................................\n            when 'em'\n              send [ 'tex', '\\\\textit{', ]\n            #...............................................................................................\n            when 'ul'\n              # send [ 'tex', \"\\\\begin{itemize}\\n\", ]\n              send [ 'tex', \"\\\\begin{description}[leftmargin=0mm,itemsep=\\\\parskip,topsep=0mm]\" ]\n              # send [ 'tex', \"\\\\setlength{\\\\itemsep}{0mm}\\\\setlength{\\\\parskip}{0mm}\\\\setlength{\\\\parsep}{0mm}\\n\", ]\n              # send [ 'tex', \"\\\\setlength{\\\\itemsep}{\\\\parskip}\", ]\n              # send [ 'tex', \"\\\\setlength{\\\\topsep}{\\\\parskip}\\n\", ]\n              list_level += 1\n            #...............................................................................................\n            when 'li'\n              # send [ 'tex', \"\\\\item \", ]\n              # send [ 'tex', \"\\\\item[¶] \", ]\n              send [ 'tex', \"\\\\item[—] \", ]\n            #...............................................................................................\n            when 'code'\n              # send [ 'tex', \"\\\\begingroup\\\\setCodeLatin\\n\", ]\n              # send [ 'tex', \"\\\\begingroup\\\\jzrFontSunXA\\n\", ]\n              send [ 'tex', \"\\n\\n\\n\\\\begingroup\\\\jzrFontSourceCodePro\\n\", ]\n              keep_lines = yes\n            # #...............................................................................................\n            # when 'span'\n            #   switch clasz = attributes[ 'class' ]\n            #     when 'fullwidth'\n            #       if within_multicol\n            #         send [ 'tex', '\\\\end{multicols}\\n\\n' ]\n            #         within_multicol                   = no\n            #         start_multicol_after              = 'fullwidth'\n            #         tag_stack[ tag_stack.length - 1 ] = 'fullwidth'\n            #     else\n            #       warn \"ignored HTML span of class #{rpr clasz}\"\n            #...............................................................................................\n            else\n              warn \"ignored opening HTML tag #{rpr name}\"\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'close-tag'\n          if tag_stack.length < 1\n            warn \"empty tag stack\"\n          else\n            name = tag_stack.pop()\n            #...............................................................................................\n            if add_newline_before_end is name\n              send [ 'tex', '\\\\\\\\', ]\n              add_newline_before_end = null\n            #...............................................................................................\n            switch name\n              when 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'\n                send [ 'tex', \"}\", ]\n                send [ 'tex', \"\\n\\n\", ]\n              when 'strong', 'em'\n                send [ 'tex', \"}\", ]\n              when 'blockquote'\n                send [ 'tex', \"\\\\end{blockquote}\\n\\n\", ]\n                # send [ 'tex', \"\\\\endgroup\\n\\n\", ]\n              when 'p', 'li', 'br', 'newpage', 'fullwidth'\n                null\n              when 'code'\n                send [ 'tex', \"\\n\\\\endgroup\\n\", ]\n                keep_lines = no\n              when 'ul'\n                # send [ 'tex', \"\\\\end{itemize}\", ]\n                send [ 'tex', \"\\\\end{description}\", ]\n                list_level -= 1\n              else\n                warn \"ignored closing HTML tag #{rpr name}\"\n            #...............................................................................................\n            ### TAINT places multicols between h1, h2 etc ###\n            if start_multicol_after is name\n              send [ 'tex', '\\\\begin{multicols}{2}\\n' ]\n              start_multicol_after  = null\n              within_multicol       = yes\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'end'\n          send [ 'tex', '\\\\end{multicols}' ] if within_multicol\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        else\n          warn \"ignored event #{rpr event}\"\n    #.......................................................................................................\n    if end?\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter_tex = ->\n  return $ ( event, send ) =>\n    [ type, tail..., ] = event\n    switch type\n      when 'text', 'tex'\n        send tail[ 0 ]\n      else\n        send.error \"unknown event type #{rpr type}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$insert_preamble = ->\n  return D.$on_start ( send ) =>\n    send \"\"\"\n      \\\\documentclass[a4paper,twoside]{book}\n      \\\\usepackage{jzr2014}\n      \\\\usepackage{jzr2015-article}\n      \\\\begin{document}\n      \"\"\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$insert_postscript = ->\n  return D.$on_end ( send, end ) =>\n    send \"\"\"\n      \\\\end{document}\\n\n      \"\"\"\n    end()\n\n\n\n############################################################################################################\nunless module.parent?\n  # @pdf_from_md 'texts/A-Permuted-Index-of-Chinese-Characters/index.md'\n  @pdf_from_md 'texts/demo/demo.md'\n\n  # debug '©nL12s', HELPERS.TYPO.as_tex_text '亻龵helo さしすサシス 臺灣國語Ⓒ, Ⓙ, Ⓣ𠀤𠁥&jzr#e202;'\n  # debug '©nL12s', HELPERS.TYPO.as_tex_text 'helo さし'\n\n\n"]}