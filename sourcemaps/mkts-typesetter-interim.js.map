{"version":3,"sources":["mkts-typesetter-interim.coffee"],"names":[],"mappings":"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","file":"mkts-typesetter-interim.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/MKTS-interim'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nASYNC                     = require 'async'\n#...........................................................................................................\nƒ                         = CND.format_number.bind CND\nHELPERS                   = require './HELPERS'\nTYPO                      = HELPERS[ 'TYPO' ]\n# options                   = require './options'\nTEXLIVEPACKAGEINFO        = require './TEXLIVEPACKAGEINFO'\noptions_route             = '../options.coffee'\n{ CACHE, OPTIONS, }       = require './OPTIONS'\nSEMVER                    = require 'semver'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@compile_options = ->\n  options_locator                   = require.resolve njs_path.resolve __dirname, options_route\n  debug '©zNzKn', options_locator\n  options_home                      = njs_path.dirname options_locator\n  @options                          = OPTIONS.from_locator options_locator\n  @options[ 'home' ]                = options_home\n  cache_route                       = @options[ 'cache' ][ 'route' ]\n  @options[ 'cache' ][ 'locator' ]  = cache_locator = njs_path.resolve options_home, cache_route\n  @options[ 'tmp-home' ]            = njs_path.join options_home, 'tmp'\n  @options[ 'pdf-command' ]         = njs_path.resolve options_home, @options[ 'pdf-command' ]\n  #.........................................................................................................\n  unless njs_fs.existsSync cache_locator\n    @options[ 'cache' ][ '%self' ] = {}\n    CACHE.save options\n  #.........................................................................................................\n  @options[ 'cache' ][ '%self' ]    = require cache_locator\n  #.........................................................................................................\n  @options[ 'locators' ] = {}\n  for key, route of @options[ 'routes' ]\n    @options[ 'locators' ][ key ] = njs_path.resolve options_home, route\n  #.........................................................................................................\n  # debug '©ed8gv', JSON.stringify @options, null, '  '\n  CACHE.update options\n#...........................................................................................................\n@compile_options()\n\n#-----------------------------------------------------------------------------------------------------------\n@write_mkts_settings = ( handler ) ->\n  step ( resume ) =>\n    lines             = []\n    settings_locator  = @options[ 'locators' ][ 'settings' ]\n    #.......................................................................................................\n    unless settings_locator?\n      ### TAINT or use default value ###\n      throw new Error \"need option locators/settings\"\n    help \"writing #{settings_locator}\"\n    #-------------------------------------------------------------------------------------------------------\n    lines.push \"\"\n    lines.push \"% #{settings_locator}\"\n    lines.push \"% do not edit this file\"\n    lines.push \"% generated from options\"\n    lines.push \"\"\n    #-------------------------------------------------------------------------------------------------------\n    # DEFS\n    #.......................................................................................................\n    defs = @options[ 'defs' ]\n    lines.push \"\"\n    lines.push \"% DEFS\"\n    if defs?\n      lines.push \"\\\\def\\\\#{name}{#{value}}\" for name, value of defs\n    #-------------------------------------------------------------------------------------------------------\n    # NEWCOMMANDS\n    #.......................................................................................................\n    newcommands = @options[ 'newcommands' ]\n    lines.push \"\"\n    lines.push \"% NEWCOMMANDS\"\n    if newcommands?\n      lines.push \"\\\\newcommand{\\\\#{name}}{#{value}}\" for name, value of newcommands\n    #-------------------------------------------------------------------------------------------------------\n    # FONTS\n    #.......................................................................................................\n    fontspec_version  = yield TEXLIVEPACKAGEINFO.read_texlive_package_version @options, 'fontspec', resume\n    use_new_syntax    = SEMVER.satisfies fontspec_version, '>=2.4.0'\n    #.......................................................................................................\n    lines.push \"\"\n    lines.push \"% FONTS\"\n    lines.push \"% assuming fontspec@#{fontspec_version}\"\n    lines.push \"\\\\usepackage{fontspec}\"\n    #.......................................................................................................\n    for { texname, home, filename, } in @options[ 'fonts' ][ 'declarations' ]\n      if use_new_syntax\n        ### TAINT should properly escape values ###\n        lines.push \"\\\\newfontface\\\\#{texname}{#{filename}}[Path=#{home}/]\"\n      else\n        lines.push \"\\\\newfontface\\\\#{texname}[Path=#{home}/]{#{filename}}\"\n    #-------------------------------------------------------------------------------------------------------\n    lines.push \"\"\n    lines.push \"\"\n    #-------------------------------------------------------------------------------------------------------\n    text = lines.join '\\n'\n    whisper text\n    njs_fs.writeFile settings_locator, text, handler\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@pdf_from_md = ( source_route, handler ) ->\n  step ( resume ) =>\n    HELPERS.provide_tmp_folder @options\n    yield @write_mkts_settings resume\n    handler                ?= ->\n    layout_info             = HELPERS.new_layout_info source_route\n    source_locator          = layout_info[ 'source-locator']\n    tex_locator             = layout_info[ 'tex-locator']\n    tex_output              = njs_fs.createWriteStream tex_locator\n    ### TAINT should read MD source stream ###\n    text                    = njs_fs.readFileSync source_locator, encoding: 'utf-8'\n    #---------------------------------------------------------------------------------------------------------\n    state =\n      within_multicol:      no\n      within_keeplines:     no\n      within_pre:           no\n      within_single_column: no\n      layout_info:          layout_info\n    #---------------------------------------------------------------------------------------------------------\n    tex_output.on 'close', =>\n      tasks = []\n      tasks.push ( done ) -> HELPERS.write_pdf layout_info, done\n      # ### TAINT put into HELPERS ###\n      # tasks.push ( done ) ->\n      #   html          = TYPO.get_meta input, 'html'\n      #   html_locator  = HELPERS.tmp_locator_for_extension layout_info, 'html'\n      #   help \"writing HTML to #{html_locator}\"\n      #   njs_fs.writeFile html_locator, html, done\n      ASYNC.parallel tasks, handler\n    #---------------------------------------------------------------------------------------------------------\n    input = TYPO.create_mdreadstream text\n    input\n      # .pipe TYPO.$resolve_html_entities()\n      .pipe TYPO.$fix_typography_for_tex()\n      .pipe TYPO.$show_mktsmd_events()\n      .pipe @MKTX.COMMAND.$new_page       state\n      # .pipe @MKTX.REGION.$single_column   state\n      .pipe @MKTX.REGION.$keep_lines      state\n      .pipe @MKTX.BLOCK.$heading          state\n      .pipe @MKTX.BLOCK.$paragraph        state\n      .pipe @MKTX.BLOCK.$hr               state\n      # .pipe D.$show()\n      .pipe @MKTX.INLINE.$code            state\n      .pipe @MKTX.INLINE.$em_and_strong   state\n      .pipe @$filter_tex()\n      .pipe @$insert_preamble state\n      .pipe @$insert_postscript()\n      .pipe tex_output\n    #---------------------------------------------------------------------------------------------------------\n    # D.resume input\n    input.resume()\n    # debug '©Fad1u', TYPO.get_meta input\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX =\n  COMMAND:    {}\n  REGION:     {}\n  BLOCK:      {}\n  INLINE:     {}\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$new_page = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    return send event unless TYPO.isa event, '∆', 'new-page'\n    # [ type, name, text, meta, ] = event\n    send [ 'tex', \"\\\\null\\\\newpage{}\", ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.change_column_count = ( S, send, end ) =>\n\n### Pending ###\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.REGION.$single_column = ( S ) =>\n#   ### TAINT consider to implement command `change_column_count = ( send, n )` ###\n#   #.........................................................................................................\n#   return $ ( event, send, end ) =>\n#     if event?\n#       if TYPO.isa event, [ '{', '}', ], 'single-column'\n#         [ type, name, text, meta, ] = event\n#         #...................................................................................................\n#         if type is '{'\n#           send [ 'tex', '% ### MKTS @@@single-column ###\\n', ]\n#           debug '©x1ESw', '---------------------------single-column('\n#           S.within_single_column = yes\n#           if S.within_multicol\n#             send [ 'tex', '\\\\end{multicols}' ]\n#             S.within_multicol = no\n#           send [ 'tex', '\\n\\n', ]\n#         #...................................................................................................\n#         else\n#           debug '©x1ESw', ')single-column---------------------------'\n#           send [ 'tex', '\\\\begin{multicols}{2}\\n' ]\n#           S.within_multicol       = yes\n#           S.within_single_column  = no\n#       #.....................................................................................................\n#       else\n#         send event\n#     #.......................................................................................................\n#     if end?\n#       if S.within_multicol\n#         send [ 'tex', '\\\\end{multicols}' ]\n#         S.within_multicol = no\n#       end()\n#     #.......................................................................................................\n#     return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$keep_lines = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, '.', 'text'\n      ### TAINT differences between pre and keep-lines? ###\n      [ type, name, text, meta, ] = event\n      # if S.within_keeplines\n      #   text = text.replace /\\n\\n/g, '~\\\\\\\\\\n'\n      if S.within_pre\n        text = text.replace /\\u0020/g, '\\u00a0'\n      send [ type, name, text, meta, ]\n    #.......................................................................................................\n    else if TYPO.isa event, [ '{', '}', ], 'keep-lines'\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      if type is '{'\n        # send [ 'tex', '% ### MKTS @@@keep-lines ###\\n', ]\n        S.within_pre        = yes\n        S.within_keeplines  = yes\n        send [ 'tex', \"\\\\begingroup\\\\obeyalllines{}\", ]\n      else\n        send [ 'tex', \"\\\\endgroup{}\", ]\n        S.within_keeplines    = no\n        S.within_pre          = no\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$heading = ( S ) =>\n  restart_multicols = no\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, [ '[', ']', ], [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', ]\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      # OPEN\n      #.....................................................................................................\n      if type is '['\n        #...................................................................................................\n        ### TAINT Pending\n        if S.within_multicol and name in [ 'h1', 'h2', ]\n          send [ 'tex', '\\\\end{multicols}' ]\n          S.within_multicol = no\n          restart_multicols = yes\n        ###\n        #...................................................................................................\n        send [ 'tex', \"\\n\", ]\n        #...................................................................................................\n        switch name\n          when 'h1' then  send [ 'tex', \"\\\\jzrChapter{\", ]\n          when 'h2' then  send [ 'tex', \"\\\\jzrSection{\", ]\n          else            send [ 'tex', \"\\\\subsection{\", ]\n      #.....................................................................................................\n      # CLOSE\n      #.....................................................................................................\n      else\n        ### Placing the closing brace on a new line seems to improve line breaking ###\n        send [ 'tex', \"\\n\", ]\n        send [ 'tex', \"}\", ]\n        send [ 'tex', \"\\n\", ]\n        ### TAINT Pending\n        if restart_multicols\n          send [ 'tex', '\\\\begin{multicols}{2}\\n' ]\n          S.within_multicol = yes\n        ###\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$paragraph = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, [ '[', ']', ], 'p'\n      [ type, name, text, meta, ] = event\n      if type is '['\n        send [ 'text', '\\n\\n' ]\n      else\n        send [ 'tex', '\\\\par' ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$hr = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, '.', 'hr'\n      [ type, name, text, meta, ] = event\n      switch chr = text[ 0 ]\n        when '-' then send [ 'text', '\\n--------------\\n' ]\n        when '*' then send [ 'text', '\\n**************\\n' ]\n        else warn \"ignored hr markup #{rpr text}\"\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$code = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, [ '(', ')', ], 'code'\n      [ type, name, text, meta, ] = event\n      ### TAINT should use proper command ###\n      if type is '(' then send [ 'tex', \"{\\\\jzrFontSourceCodePro{}\", ]\n      else                send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$em_and_strong = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, [ '(', ')', ], [ 'em', 'strong', ]\n      [ type, name, text, meta, ] = event\n      if type is '('\n        if name is 'em'\n          send [ 'tex', '\\\\textit{', ]\n        else\n          send [ 'tex', '\\\\bold{', ]\n      else\n        send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$assemble_tex_events_v1 = ->\n  tag_stack               = []\n  within_multicol         = no\n  start_multicol_after    = null\n  add_newline_before_end  = null\n  list_level              = 0\n  within_keeplines        = no\n  within_pre              = no\n  within_single_column    = no\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    #.......................................................................................................\n    if event?\n      [ type, tail..., ]  = event\n    #   ok                  = no\n      #.....................................................................................................\n      switch type\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'command'\n          [ command, values, ] = tail\n          switch command\n            when 'new-document'\n              send [ 'tex', '% ### MKTS ∆∆∆new-document ###\\n', ]\n              document_name = values\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}' ]\n                within_multicol = no\n              send [ 'tex', \"\\\\null\\\\newpage%‡#{command} #{document_name}‡\\n\" ]\n            when 'new-page'\n              send [ 'tex', '% ### MKTS ∆∆∆new-page ###\\n', ]\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}' ]\n                within_multicol = no\n              send [ 'tex', \"\\\\null\\\\newpage%1\\n\" ]\n            else\n              warn \"ignored command #{rpr event}\"\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'comment'\n          for line in tail[ 0 ].split '\\n'\n            send [ 'tex', \"% #{line}\\n\", ]\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'text'\n          text = tail[ 0 ]\n          # if within_keeplines\n          #   text = text.replace /\\n\\n/g, '~\\\\\\\\\\n'\n          if within_pre\n            text = text.replace /\\u0020/g, '\\u00a0'\n          send [ 'text', text, ]\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'start-region'\n          [ name, ] = tail\n          switch name\n            #...............................................................................................\n            when 'single-column'\n              send [ 'tex', '% ### MKTS @@@single-column ###\\n', ]\n              debug '©x1ESw', '---------------------------single-column('\n              within_single_column = yes\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}' ]\n                within_multicol = no\n              send [ 'tex', '\\n\\n', ]\n            #...............................................................................................\n            when 'keep-lines'\n              send [ 'tex', '% ### MKTS @@@keep-lines ###\\n', ]\n              ### TAINT differences between pre and keep-lines? ###\n              debug '©x1ESw', '---------------------------keep-lines('\n              within_pre        = yes\n              within_keeplines  = yes\n              send [ 'tex', \"\\\\begingroup\\\\obeyalllines{}\", ]\n              # ignore_next_nl          = yes\n            #...............................................................................................\n            else\n              warn \"ignored start-region #{rpr name}\"\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'end-region'\n          send [ 'tex', '% ### MKTS @@@ ###\\n', ]\n          [ name, ] = tail\n          switch name\n            #...............................................................................................\n            when 'single-column'\n              debug '©x1ESw', ')single-column---------------------------'\n              send [ 'tex', '\\\\begin{multicols}{2}\\n' ]\n              within_multicol       = yes\n              within_single_column  = no\n            #...............................................................................................\n            when 'keep-lines'\n              debug '©x1ESw', ')keep-lines---------------------------'\n              send [ 'tex', \"\\\\endgroup{}\\n\", ]\n              # send [ 'tex', \"\\n\\n\", ]\n              within_keeplines  = no\n              within_pre        = no\n            #...............................................................................................\n            else\n              warn \"ignored start-region #{rpr name}\"\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'open-tag'\n          [ name, attributes, ] = tail\n          tag_stack.push name\n          #.................................................................................................\n          switch name\n            #...............................................................................................\n            # when 'div'\n            #   ### modify tag stack so we know which tag was popped: ###\n            #   clasz                             = attributes[ 'class' ]\n            #   tag_stack[ tag_stack.length - 1 ] = clasz\n            #   switch clasz\n            #     when 'keep-lines'\n            #       within_keeplines        = yes\n            #       ignore_next_nl          = yes\n            #     else\n            #       warn \"ignored unknown div class #{rpr clasz}\"\n            #...............................................................................................\n            when 'newpage'\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}' ]\n                within_multicol = no\n              send [ 'tex', \"\\\\null\\\\newpage%2\\n\" ]\n            #...............................................................................................\n            when 'fullwidth'\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}' ]\n                within_multicol = no\n            #...............................................................................................\n            when 'h1'\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}' ]\n                within_multicol = no\n              # img_route = '/Volumes/Storage/temp/french-rule-swell-dash-englische-line/swell-dash.pdf'\n              # send [ 'tex', \"\\\\includegraphics[width=0.75\\\\linewidth]{#{img_route}}\", ]\n              # send [ 'tex', \"\\\\\\\\[3\\\\baselineskip]%\", ]\n              # send [ 'tex', '\\\\eline\\n', ]\n              # send [ 'tex', '\\n\\n', ]\n              send [ 'tex', \"\\\\jzrChapter{\", ]\n              # send [ 'tex', \"\\\\chapter{\", ]\n              add_newline_before_end  = name\n              start_multicol_after    = name\n            #...............................................................................................\n            when 'h2'\n              if within_multicol\n                send [ 'tex', '\\\\end{multicols}' ]\n                within_multicol = no\n              send [ 'tex', \"\\\\jzrSection{\", ]\n              start_multicol_after = name\n            #...............................................................................................\n            when 'h3'\n              send [ 'tex', \"\\\\subsection{\", ]\n            #...............................................................................................\n            when 'h4'\n              ### TAINT subsection or deeper? ###\n              send [ 'tex', \"\\\\subsection{\", ]\n            #...............................................................................................\n            when 'h5', 'h6'\n              send [ 'tex', \"\\\\subsection{\", ]\n            #...............................................................................................\n            when 'p'\n              if ( not within_single_column ) and ( not within_multicol )\n                send [ 'tex', '\\\\begin{multicols}{2}\\n' ]\n                within_multicol = yes\n              send [ 'tex', '\\n', ]\n            #...............................................................................................\n            when 'br'\n              send [ 'tex', '\\\\\\\\', ]\n            #...............................................................................................\n            when 'blockquote'\n              send [ 'tex', '\\\\begin{blockquote}\\n', ]\n              # send [ 'tex', '\\\\begingroup\\n', ]\n              # send [ 'tex', '\\\\itshape\\n', ]\n            #...............................................................................................\n            when 'strong'\n              send [ 'tex', '\\\\bold{', ]\n            #...............................................................................................\n            when 'em'\n              send [ 'tex', '\\\\textit{', ]\n            #...............................................................................................\n            when 'ul'\n              # send [ 'tex', \"\\\\begin{itemize}\\n\", ]\n              send [ 'tex', \"\\\\begin{description}[leftmargin=0mm,itemsep=\\\\parskip,topsep=0mm]\" ]\n              # send [ 'tex', \"\\\\setlength{\\\\itemsep}{0mm}\\\\setlength{\\\\parskip}{0mm}\\\\setlength{\\\\parsep}{0mm}\\n\", ]\n              # send [ 'tex', \"\\\\setlength{\\\\itemsep}{\\\\parskip}\", ]\n              # send [ 'tex', \"\\\\setlength{\\\\topsep}{\\\\parskip}\\n\", ]\n              list_level += 1\n            #...............................................................................................\n            when 'ol'\n              ### TAINT doing an unordered list here ###\n              send [ 'tex', \"\\\\begin{enumerate}\\n\", ]\n              list_level += 1\n            #...............................................................................................\n            when 'li'\n              # send [ 'tex', \"\\\\item \", ]\n              # send [ 'tex', \"\\\\item[¶] \", ]\n              send [ 'tex', \"\\\\item[—] \", ]\n            #...............................................................................................\n            when 'pre'\n              # send [ 'tex', \"\\n\\n\", ]\n              send [ 'tex', \"\\\\begingroup\\\\obeyalllines\\n\", ]\n              within_pre        = yes\n              within_keeplines  = yes\n            #...............................................................................................\n            when 'code'\n              # send [ 'tex', \"\\\\begingroup\\\\setCodeLatin\\n\", ]\n              # send [ 'tex', \"\\\\begingroup\\\\jzrFontSunXA\\n\", ]\n              send [ 'tex', \"\\\\begingroup\\\\jzrFontSourceCodePro{}\", ]\n            #...............................................................................................\n            else\n              warn \"ignored opening HTML tag #{rpr name}\"\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'close-tag'\n          if tag_stack.length < 1\n            warn \"empty tag stack\"\n          else\n            ### TAINT wrongly pops tags that got omitted ###\n            name = tag_stack.pop()\n            #...............................................................................................\n            if add_newline_before_end is name\n              send [ 'tex', '\\\\\\\\', ]\n              add_newline_before_end = null\n            #...............................................................................................\n            switch name\n              when 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'\n                send [ 'tex', \"}\", ]\n                send [ 'tex', \"\\n\\n\", ]\n              when 'strong', 'em'\n                send [ 'tex', \"}\", ]\n              when 'blockquote'\n                send [ 'tex', \"\\\\end{blockquote}\\n\\n\", ]\n                # send [ 'tex', \"\\\\endgroup\\n\\n\", ]\n              when 'p', 'li', 'br', 'newpage', 'fullwidth'\n                null\n              when 'pre'\n                send [ 'tex', \"\\\\endgroup\\n\", ]\n                within_keeplines  = no\n                within_pre        = no\n              when 'code'\n                send [ 'tex', \"\\\\endgroup{}\", ]\n              when 'ul', 'ol'\n                send [ 'tex', \"\\\\end{enumerate}\", ]\n                # send [ 'tex', \"\\\\end{description}\", ]\n                list_level += -1\n              else\n                warn \"ignored closing HTML tag #{rpr name}\"\n            #...............................................................................................\n            ### TAINT places multicols between h1, h2 etc ###\n            if start_multicol_after is name\n              send [ 'tex', '\\\\begin{multicols}{2}\\n' ]\n              start_multicol_after  = null\n              within_multicol       = yes\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        when 'end'\n          send [ 'tex', '\\\\end{multicols}' ] if within_multicol\n        #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n        else\n          warn \"ignored event #{rpr event}\"\n    #.......................................................................................................\n    if end?\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter_tex = ->\n  return $ ( event, send ) =>\n    if event[ 0 ] in [ 'tex', 'text', ]\n      send event[ 1 ]\n    else if TYPO.isa event, '.', 'text'\n      send event[ 2 ]\n    else\n      warn \"unhandled event: #{JSON.stringify event}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$insert_preamble = ( state ) ->\n  { layout_info } = state\n  return D.$on_start ( send ) =>\n    tex_inputs_home = layout_info[ 'tex-inputs-home' ]\n    ### TAINT should escape locators to prevent clashes with LaTeX syntax ###\n    ### TAINT should be located in style / document folder / file ###\n    send \"\"\"\n      \\\\documentclass[a4paper,twoside]{book}\n      \\\\usepackage{#{njs_path.join tex_inputs_home, 'mkts2015-main'}}\n      \\\\usepackage{#{njs_path.join tex_inputs_home, 'mkts2015-fonts'}}\n      \\\\usepackage{#{njs_path.join tex_inputs_home, 'mkts2015-article'}}\n      \\\\begin{document}\\n\\n\n      \"\"\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$insert_postscript = ->\n  return D.$on_end ( send, end ) =>\n    send \"\"\"\n      \\\\end{document}\\n\n      \"\"\"\n    end()\n\n\n\n############################################################################################################\nunless module.parent?\n  # @pdf_from_md 'texts/A-Permuted-Index-of-Chinese-Characters/index.md'\n  @pdf_from_md 'texts/demo/demo.md'\n\n  # debug '©nL12s', TYPO.as_tex_text '亻龵helo さしすサシス 臺灣國語Ⓒ, Ⓙ, Ⓣ𠀤𠁥&jzr#e202;'\n  # debug '©nL12s', TYPO.as_tex_text 'helo さし'\n  # event = [ '{', 'single-column', ]\n  # event = [ '}', 'single-column', ]\n  # event = [ '{', 'new-page', ]\n  # debug '©Gpn1J', TYPO.isa event, [ '{', '}'], [ 'single-column', 'new-page', ]\n\n"]}