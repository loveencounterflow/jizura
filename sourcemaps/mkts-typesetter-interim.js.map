{"version":3,"sources":["mkts-typesetter-interim.coffee"],"names":[],"mappings":"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","file":"mkts-typesetter-interim.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/MKTS-interim'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nASYNC                     = require 'async'\n#...........................................................................................................\nƒ                         = CND.format_number.bind CND\nHELPERS                   = require './HELPERS'\n# options                   = require './options'\nTEXLIVEPACKAGEINFO        = require './TEXLIVEPACKAGEINFO'\noptions_route             = '../options.coffee'\n{ CACHE, OPTIONS, }       = require './OPTIONS'\nSEMVER                    = require 'semver'\n#...........................................................................................................\nMKTS                      = require './MKTS'\nhide                      = MKTS.hide.bind        MKTS\ncopy                      = MKTS.copy.bind        MKTS\nstamp                     = MKTS.stamp.bind       MKTS\nselect                    = MKTS.select.bind      MKTS\nis_hidden                 = MKTS.is_hidden.bind   MKTS\nis_stamped                = MKTS.is_stamped.bind  MKTS\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@compile_options = ->\n  ### TAINT this method should go to OPTIONS ###\n  options_locator                   = require.resolve njs_path.resolve __dirname, options_route\n  # debug '©zNzKn', options_locator\n  options_home                      = njs_path.dirname options_locator\n  @options                          = OPTIONS.from_locator options_locator\n  @options[ 'home' ]                = options_home\n  @options[ 'locator' ]             = options_locator\n  cache_route                       = @options[ 'cache' ][ 'route' ]\n  @options[ 'cache' ][ 'locator' ]  = cache_locator = njs_path.resolve options_home, cache_route\n  @options[ 'xelatex-command' ]     = njs_path.resolve options_home, @options[ 'xelatex-command' ]\n  #.........................................................................................................\n  unless njs_fs.existsSync cache_locator\n    @options[ 'cache' ][ '%self' ] = {}\n    CACHE.save options\n  #.........................................................................................................\n  @options[ 'cache' ][ '%self' ]    = require cache_locator\n  #.........................................................................................................\n  if ( texinputs_routes = @options[ 'texinputs' ]?[ 'routes' ] )?\n    locators = []\n    for route in texinputs_routes\n      has_single_slash  = ( /\\/$/   ).test route\n      has_double_slash  = ( /\\/\\/$/ ).test route\n      locator           = njs_path.resolve options_home, route\n      if      has_double_slash then locator += '//'\n      else if has_single_slash then locator += '/'\n      locators.push locator\n    ### TAINT duplication: tex_inputs_home, texinputs_value ###\n    ### TAINT path separator depends on OS ###\n    @options[ 'texinputs' ][ 'value' ] = locators.join ':'\n  # @options[ 'locators' ] = {}\n  # for key, route of @options[ 'routes' ]\n  #   @options[ 'locators' ][ key ] = njs_path.resolve options_home, route\n  #.........................................................................................................\n  # debug '©ed8gv', JSON.stringify @options, null, '  '\n  CACHE.update @options\n#...........................................................................................................\n@compile_options()\n\n#-----------------------------------------------------------------------------------------------------------\n@write_mkts_master = ( layout_info, handler ) ->\n  step ( resume ) =>\n    lines             = []\n    write             = lines.push.bind lines\n    master_locator    = layout_info[ 'master-locator'  ]\n    content_locator   = layout_info[ 'content-locator' ]\n    help \"writing #{master_locator}\"\n    #-------------------------------------------------------------------------------------------------------\n    write \"\"\n    write \"% #{master_locator}\"\n    write \"% do not edit this file\"\n    write \"% generated from #{@options[ 'locator' ]}\"\n    write \"\"\n    write \"\\\\documentclass[a4paper,twoside]{book}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    # DEFS\n    #.......................................................................................................\n    defs = @options[ 'defs' ]\n    write \"\"\n    write \"% DEFS\"\n    if defs?\n      write \"\\\\def\\\\#{name}{#{value}}\" for name, value of defs\n    #-------------------------------------------------------------------------------------------------------\n    # NEWCOMMANDS\n    #.......................................................................................................\n    newcommands = @options[ 'newcommands' ]\n    write \"\"\n    write \"% NEWCOMMANDS\"\n    if newcommands?\n      for name, value of newcommands\n        warn \"implicitly converting newcommand value for #{name}\"\n        value = njs_path.resolve __dirname, '..', value\n        write \"\\\\newcommand{\\\\#{name}}{%\\n#{value}%\\n}\"\n    #-------------------------------------------------------------------------------------------------------\n    # PACKAGES\n    #.......................................................................................................\n    write \"\"\n    write \"% PACKAGES\"\n    write \"\\\\usepackage{cxltx-style-base}\"\n    write \"\\\\usepackage{cxltx-style-trm}\"\n    # write \"\\\\usepackage{cxltx-style-accentbox}\"\n    write \"\\\\usepackage{cxltx-style-pushraise}\"\n    write \"\\\\usepackage{cxltx-style-hyphenation-tolerance}\"\n    write \"\\\\usepackage{cxltx-style-oddeven}\"\n    write \"\\\\usepackage{cxltx-style-position-absolute}\"\n    write \"\\\\usepackage{cxltx-style-pushraise}\"\n    write \"\\\\usepackage{cxltx-style-smashbox}\"\n    write \"\\\\usepackage{mkts2015-main}\"\n    write \"\\\\usepackage{mkts2015-fonts}\"\n    write \"\\\\usepackage{mkts2015-article}\"\n\n    #-------------------------------------------------------------------------------------------------------\n    # FONTS\n    #......................................................................................................\n    fontspec_version  = yield TEXLIVEPACKAGEINFO.read_texlive_package_version @options, 'fontspec', resume\n    use_new_syntax    = SEMVER.satisfies fontspec_version, '>=2.4.0'\n    fonts_home        = @options[ 'fonts' ][ 'home' ]\n    #.......................................................................................................\n    write \"\"\n    write \"% FONTS\"\n    write \"% assuming fontspec@#{fontspec_version}\"\n    write \"\\\\usepackage{fontspec}\"\n    #.......................................................................................................\n    for { texname, home, filename, } in @options[ 'fonts' ][ 'files' ]\n      home ?= fonts_home\n      if use_new_syntax\n        ### TAINT should properly escape values ###\n        write \"\\\\newfontface{\\\\#{texname}}{#{filename}}[Path=#{home}/]\"\n        # write \"\\\\newcommand{\\\\#{texname}}{\"\n        # write \"\\\\typeout{\\\\trmWhite{redefining #{texname}}}\"\n        # write \"\\\\newfontface{\\\\#{texname}XXX}{#{filename}}[Path=#{home}/]\"\n        # write \"\\\\renewcommand{\\\\#{texname}}{\\\\#{texname}XXX}\"\n        # write \"}\"\n      else\n        write \"\\\\newfontface\\\\#{texname}[Path=#{home}/]{#{filename}}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    # STYLES\n    #......................................................................................................\n    write \"\"\n    write \"% STYLES\"\n    if ( styles = @options[ 'styles' ] )?\n      write \"\\\\newcommand{\\\\#{name}}{%\\n#{value}%\\n}\" for name, value of styles\n    #-------------------------------------------------------------------------------------------------------\n    main_font_name = @options[ 'fonts' ][ 'main' ]\n    throw new Error \"need entry options/fonts/name\" unless main_font_name?\n    write \"\"\n    write \"% CONTENT\"\n    write \"\\\\begin{document}#{main_font_name}\"\n    #-------------------------------------------------------------------------------------------------------\n    # INCLUDES\n    #.......................................................................................................\n    write \"\"\n    write \"\\\\input{#{content_locator}}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    write \"\\\\end{document}\"\n    #-------------------------------------------------------------------------------------------------------\n    text = lines.join '\\n'\n    # whisper text\n    njs_fs.writeFile master_locator, text, handler\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@MKTX =\n  DOCUMENT:   {}\n  COMMAND:    {}\n  REGION:     {}\n  BLOCK:      {}\n  INLINE:     {}\n  MIXED:      {}\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$definition = ( S ) =>\n  ### TAINT reject nested definitions ###\n  track           = MKTS.TRACKER.new_tracker '(:)', '[:]'\n  last_identifier = null\n  values          = {}\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_definition = track.within '(:)', '[:]'\n    track event\n    #.......................................................................................................\n    if select event, [ '(', '[', ], ':'\n      [ type, _, last_identifier, meta, ] = event\n      warn \"re-defining command #{rpr last_identifier}\" if values[ last_identifier ]?\n      values[ last_identifier ] = []\n      send stamp hide event\n    #.......................................................................................................\n    else if select event, [ ')', ']', ], ':'\n      send stamp hide event\n    #.......................................................................................................\n    else if within_definition\n      unless ( target = values[ last_identifier ] )?\n        throw new Error \"should never happen; unknown identifier #{rpr last_identifier}\"\n      target.push event\n      send stamp hide copy event\n    #.......................................................................................................\n    else if select event, '∆'\n      [ _, identifier, _, _, ] = event\n      if ( definition = values[ identifier ] )?\n        send stamp hide event\n        send copy sub_event for sub_event in definition\n      else\n        send event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$new_page = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    return send event unless select event, '∆', 'new-page'\n    send stamp event\n    send [ 'tex', \"\\\\null\\\\newpage{}\", ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$comment = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    return send event unless select event, '.', 'comment'\n    whisper \"ignoring comment #{rpr event[ 2 ]}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.DOCUMENT.$begin= ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '<', 'document'\n      send stamp event\n      send [ 'tex', \"\\n% begin of MD document\\n\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.DOCUMENT.$end = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '>', 'document'\n      send stamp event\n      send [ 'tex', \"\\n% end of MD document\\n\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION._begin_multi_column = =>\n  ### TAINT Column count must come from layout / options / MKTS-MD command ###\n  return [ 'tex', '\\\\begin{multicols}{2}' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION._end_multi_column = =>\n  return [ 'tex', '\\\\end{multicols}' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$multi_column = ( S ) =>\n  track = MKTS.TRACKER.new_tracker '{multi-column}'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_multi_column = track.within '{multi-column}'\n    track event\n    if select event, [ '{', '}', ], 'multi-column'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      if type is '{'\n        if within_multi_column\n          whisper \"ignored #{type}#{name}\"\n        else\n          send track @MKTX.REGION._begin_multi_column()\n      #.....................................................................................................\n      else\n        if within_multi_column\n          send track @MKTX.REGION._end_multi_column()\n        else\n          whisper \"ignored #{type}#{name}\"\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$single_column = ( S ) =>\n  ### TAINT consider to implement command `change_column_count = ( send, n )` ###\n  track = MKTS.TRACKER.new_tracker '{multi-column}'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_multi_column = track.within '{multi-column}'\n    track event\n    #.......................................................................................................\n    if select event, [ '{', '}', ], 'single-column'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      if type is '{'\n        if within_multi_column\n          send track @MKTX.REGION._end_multi_column()\n        else\n          whisper \"ignored #{type}#{name}\"\n      #.....................................................................................................\n      else\n        if within_multi_column\n          send track @MKTX.REGION._begin_multi_column()\n        else\n          whisper \"ignored #{type}#{name}\"\n    #.......................................................................................................\n    else\n      send event\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$correct_p_tags_before_regions = ( S ) =>\n  last_was_p              = no\n  last_was_begin_document = no\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    # debug '©MwBAv', event\n    #.......................................................................................................\n    if select event, 'tex'\n      send event\n    #.......................................................................................................\n    else if select event, '<', 'document'\n      # debug '©---1', last_was_begin_document\n      # debug '©---2', last_was_p\n      last_was_p              = no\n      last_was_begin_document = yes\n      send event\n    #.......................................................................................................\n    else if select event, '.', 'p'\n      # debug '©---3', last_was_begin_document\n      # debug '©---4', last_was_p\n      last_was_p              = yes\n      last_was_begin_document = no\n      send event\n    #.......................................................................................................\n    else if select event, [ '{', '[', ]\n      # debug '©---5', last_was_begin_document\n      # debug '©---6', last_was_p\n      if ( not last_was_begin_document ) and ( not last_was_p )\n        [ ..., meta, ] = event\n        send [ '.', 'p', null, ( MKTS.copy meta ), ]\n      send event\n      last_was_p              = no\n      last_was_begin_document = no\n    #.......................................................................................................\n    else\n      last_was_p              = no\n      last_was_begin_document = no\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$keep_lines = ( S ) =>\n  track = MKTS.TRACKER.new_tracker '{keep-lines}'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_keep_lines = track.within '{keep-lines}'\n    track event\n    #.......................................................................................................\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      ### TAINT other replacements possible; use API ###\n      ### TAINT U+00A0 (nbsp) might be too wide ###\n      text = text.replace /\\u0020/g, '\\u00a0' if within_keep_lines\n      send [ type, name, text, meta, ]\n    #.......................................................................................................\n    else if select event, [ '{', '}', ], 'keep-lines'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      if type is '{'\n        track.enter '{keep-lines}'\n        send [ 'tex', \"\\\\begingroup\\\\obeyalllines{}\", ]\n      else\n        send [ 'tex', \"\\\\endgroup{}\", ]\n        track.leave '{keep-lines}'\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$code = ( S ) =>\n  ### TAINT code duplication with `REGION.$keep_lines` possible ###\n  track = MKTS.TRACKER.new_tracker '{code}'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_code = track.within '{code}'\n    track event\n    #.......................................................................................................\n    if select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      if within_code\n        text = text.replace /\\u0020/g, '\\u00a0'\n      send [ type, name, text, meta, ]\n    #.......................................................................................................\n    else if select event, [ '{', '}', ], 'code'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      if type is '{'\n        send [ 'tex', \"\\\\begingroup\\\\obeyalllines\\\\mktsStyleCode{}\", ]\n      else\n        send [ 'tex', \"\\\\endgroup{}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$remove_empty_p_tags = ( S ) =>\n  text_count = 0\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ ']', '}', ]\n      text_count = 0\n      send event\n    #.......................................................................................................\n    else if select event, '.', 'text'\n      text_count += +1\n      send event\n    #.......................................................................................................\n    else if select event, '.', 'p'\n      if text_count > 0 then send event\n      else whisper \"ignoring empty `p` tag\"\n      text_count = 0\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$heading = ( S ) =>\n  restart_multicols = no\n  track             = MKTS.TRACKER.new_tracker '{multi-column}'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_multi_column = track.within '{multi-column}'\n    track event\n    #.......................................................................................................\n    if select event, [ '[', ']', ], [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', ]\n      # debug '@rg19TQ', event\n      send stamp event\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      # OPEN\n      #.....................................................................................................\n      if type is '['\n        #...................................................................................................\n        if within_multi_column and ( name in [ 'h1', 'h2', ] )\n          send track @MKTX.REGION._end_multi_column meta\n          restart_multicols = yes\n        #...................................................................................................\n        send [ 'tex', \"\\n\", ]\n        #...................................................................................................\n        switch name\n          when 'h1' then  send [ 'tex', \"\\\\chapter{\", ]\n          when 'h2' then  send [ 'tex', \"\\\\section{\", ]\n          else            send [ 'tex', \"\\\\subsection{\", ]\n      #.....................................................................................................\n      # CLOSE\n      #.....................................................................................................\n      else\n        ### Placing the closing brace on a new line seems to improve line breaking ###\n        send [ 'tex', \"\\n\", ]\n        send [ 'tex', \"}\", ]\n        send [ 'tex', \"\\n\", ]\n        if restart_multicols\n          send track @MKTX.REGION._begin_multi_column meta\n          restart_multicols = no\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$paragraph = ( S ) =>\n  ### TAINT should unify the two observers ###\n  track = MKTS.TRACKER.new_tracker '{code}', '{keep-lines}'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_code       = track.within '{code}'\n    within_keep_lines = track.within '{keep-lines}'\n    track event\n    #.......................................................................................................\n    if select event, '.', 'p'\n      [ type, name, text, meta, ] = event\n      if within_code or within_keep_lines\n        send stamp event\n        send [ 'tex', '\\n\\n' ]\n      else\n        send stamp event\n        send @MKTX.BLOCK._end_paragraph()\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK._end_paragraph = =>\n  ### TAINT use command from sty ###\n  ### TAINT make configurable ###\n  return [ 'tex', '\\\\mktsShowpar\\\\par\\n' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$hr = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, '.', 'hr'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      switch chr = text[ 0 ]\n        when '-' then send [ 'tex', '\\n--------------\\n' ]\n        when '*' then send [ 'tex', '\\n**************\\n' ]\n        else warn \"ignored hr markup #{rpr text}\"\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$code = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ '(', ')', ], 'code'\n      send stamp event\n      [ type, name, text, meta, ] = event\n      if type is '('\n        send [ 'tex', '{\\\\mktsStyleCode{}', ]\n      else\n        send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.MIXED.$raw = ( S ) =>\n  track = MKTS.TRACKER.new_tracker '{raw}', '[raw]', '(raw)'\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    within_raw = track.within '{raw}', '[raw]', '(raw)'\n    track event\n    #.......................................................................................................\n    if within_raw and select event, '.', 'text'\n      [ type, name, text, meta, ] = event\n      raw_text = meta[ 'raw' ]\n      ### TAINT could the added `{}` conflict with some (La)TeX commands? ###\n      send stamp [ '.', 'raw', raw_text, meta, ]\n    #.......................................................................................................\n    # else if select event, [ '{', '}', '[', ']', '(', ')', ], 'raw'\n    else if select event, [ '}', ']', ], 'raw'\n      send stamp event\n      send @MKTX.BLOCK._end_paragraph()\n    else if select event, [ '{', '[', '(', ')', ], 'raw'\n      send stamp event\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$translate_i_and_b = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ '(', ')', ], [ 'i', 'b', ]\n      [ type, name, text, meta, ] = event\n      new_name = if name is 'i' then 'em' else 'strong'\n      send [ type, new_name, text, meta, ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$em_and_strong = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if select event, [ '(', ')', ], [ 'em', 'strong', ]\n      send stamp event\n      [ type, name, text, meta, ] = event\n      if type is '('\n        if name is 'em'\n          send [ 'tex', '{\\\\mktsStyleItalic{}', ]\n          ### TAINT must not be sent when in vertical mode ###\n          # send [ 'tex', '\\\\/', ]\n        else\n          send [ 'tex', '{\\\\mktsStyleBold{}', ]\n      else\n        send [ 'tex', '\\\\/', ] if name is 'em'\n        send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$show_unhandled_tags = ( S ) ->\n  return $ ( event, send ) =>\n    ### TAINT selection could be simpler, less repetitive ###\n    if event[ 0 ] in [ 'tex', 'text', ]\n      send event\n    else if select event, '.', 'text'\n      send event\n    else unless is_stamped event\n      [ type, name, text, meta, ] = event\n      if text?\n        if ( CND.isa_pod text )\n          if ( Object.keys text ).length is 0\n            text = ''\n          else\n            text = rpr text\n      else\n        text = ''\n      if type in [ '.', '∆', ] or type in MKTS.FENCES.xleft\n        first             = type\n        last              = name\n        pre               = '█'\n        post              = ''\n      else\n        first             = name\n        last              = type\n        pre               = ''\n        post              = '█'\n      event_txt         = first + last + ' ' + text\n      event_tex         = MKTS.fix_typography_for_tex event_txt, @options\n      ### TAINT use mkts command ###\n      send [ 'tex', \"{\\\\mktsStyleBold\\\\color{violet}{\\\\mktsStyleSymbol#{pre}}#{event_tex}{\\\\mktsStyleSymbol#{post}}}\" ]\n      send event\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter_tex = ->\n  return $ ( event, send ) =>\n    if select event, 'tex'                        then send event[ 1 ]\n    else if select event, '.', [ 'text', 'raw', ] then send event[ 2 ]\n    else warn \"unhandled event: #{JSON.stringify event}\" unless is_stamped event\n\n#===========================================================================================================\n# PDF FROM MD\n#-----------------------------------------------------------------------------------------------------------\n@pdf_from_md = ( source_route, handler ) ->\n  step ( resume ) =>\n    handler                ?= ->\n    layout_info             = HELPERS.new_layout_info @options, source_route\n    yield @write_mkts_master layout_info, resume\n    source_locator          = layout_info[ 'source-locator'  ]\n    content_locator         = layout_info[ 'content-locator' ]\n    tex_output              = njs_fs.createWriteStream content_locator\n    # debug '©y9meI', layout_info\n    # process.exit()\n    ### TAINT should read MD source stream ###\n    text                    = njs_fs.readFileSync source_locator, encoding: 'utf-8'\n    input                   = MKTS.create_mdreadstream text\n    #---------------------------------------------------------------------------------------------------------\n    state =\n      options:              @options\n      layout_info:          layout_info\n      input:                input\n      resend:               ( event ) => input.write event\n    #---------------------------------------------------------------------------------------------------------\n    tex_output.on 'close', =>\n      HELPERS.write_pdf layout_info, ( error ) =>\n        throw error if error?\n        handler null if handler?\n    #---------------------------------------------------------------------------------------------------------\n    input\n      .pipe MKTS.$fix_typography_for_tex                    @options\n      .pipe @MKTX.DOCUMENT.$begin                           state\n      .pipe @MKTX.DOCUMENT.$end                             state\n      .pipe @MKTX.COMMAND.$definition                       state\n      .pipe @MKTX.COMMAND.$new_page                         state\n      .pipe @MKTX.COMMAND.$comment                          state\n      .pipe @MKTX.REGION.$correct_p_tags_before_regions     state\n      .pipe @MKTX.REGION.$multi_column                      state\n      .pipe @MKTX.REGION.$single_column                     state\n      .pipe @MKTX.REGION.$keep_lines                        state\n      .pipe @MKTX.REGION.$code                              state\n      .pipe @MKTX.BLOCK.$heading                            state\n      .pipe @MKTX.BLOCK.$hr                                 state\n      .pipe @MKTX.INLINE.$code                              state\n      .pipe @MKTX.MIXED.$raw                               state\n      # .pipe @MKTX.INLINE.$italic_correction                 state\n      .pipe @MKTX.INLINE.$translate_i_and_b                 state\n      .pipe @MKTX.INLINE.$em_and_strong                     state\n      .pipe @MKTX.BLOCK.$remove_empty_p_tags                state\n      .pipe @MKTX.BLOCK.$paragraph                          state\n      # .pipe D.$observe ( event ) =>\n      #   if MKTS.select event, 'text'\n      #     # info JSON.stringify event\n      #     debug event\n      #   else\n      #     # whisper JSON.stringify event\n      .pipe MKTS.$close_dangling_open_tags                  state\n      .pipe MKTS.$show_mktsmd_events                        state\n      .pipe MKTS.$write_mktscript                           state\n      .pipe @$show_unhandled_tags                           state\n      .pipe @$filter_tex()\n      .pipe tex_output\n    #---------------------------------------------------------------------------------------------------------\n    # D.resume input\n    input.resume()\n    # debug '©Fad1u', MKTS.get_meta input\n\n\n\n\n############################################################################################################\nunless module.parent?\n  # @pdf_from_md 'texts/A-Permuted-Index-of-Chinese-Characters/index.md'\n  @pdf_from_md 'texts/demo'\n\n  # debug '©nL12s', MKTS.as_tex_text '亻龵helo さしすサシス 臺灣國語Ⓒ, Ⓙ, Ⓣ𠀤𠁥&jzr#e202;'\n  # debug '©nL12s', MKTS.as_tex_text 'helo さし'\n  # event = [ '{', 'single-column', ]\n  # event = [ '}', 'single-column', ]\n  # event = [ '{', 'new-page', ]\n  # debug '©Gpn1J', select event, [ '{', '}'], [ 'single-column', 'new-page', ]\n\n"]}