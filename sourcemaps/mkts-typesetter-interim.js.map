{"version":3,"sources":["mkts-typesetter-interim.coffee"],"names":[],"mappings":"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","file":"mkts-typesetter-interim.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/MKTS-interim'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nASYNC                     = require 'async'\n#...........................................................................................................\nƒ                         = CND.format_number.bind CND\nHELPERS                   = require './HELPERS'\nTYPO                      = HELPERS[ 'TYPO' ]\n# options                   = require './options'\nTEXLIVEPACKAGEINFO        = require './TEXLIVEPACKAGEINFO'\noptions_route             = '../options.coffee'\n{ CACHE, OPTIONS, }       = require './OPTIONS'\nSEMVER                    = require 'semver'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@compile_options = ->\n  options_locator                   = require.resolve njs_path.resolve __dirname, options_route\n  # debug '©zNzKn', options_locator\n  options_home                      = njs_path.dirname options_locator\n  @options                          = OPTIONS.from_locator options_locator\n  @options[ 'home' ]                = options_home\n  @options[ 'locator' ]             = options_locator\n  cache_route                       = @options[ 'cache' ][ 'route' ]\n  @options[ 'cache' ][ 'locator' ]  = cache_locator = njs_path.resolve options_home, cache_route\n  @options[ 'xelatex-command' ]     = njs_path.resolve options_home, @options[ 'xelatex-command' ]\n  #.........................................................................................................\n  unless njs_fs.existsSync cache_locator\n    @options[ 'cache' ][ '%self' ] = {}\n    CACHE.save options\n  #.........................................................................................................\n  @options[ 'cache' ][ '%self' ]    = require cache_locator\n  #.........................................................................................................\n  if ( texinputs_routes = @options[ 'texinputs' ]?[ 'routes' ] )?\n    locators = []\n    for route in texinputs_routes\n      has_single_slash  = ( /\\/$/   ).test route\n      has_double_slash  = ( /\\/\\/$/ ).test route\n      locator           = njs_path.resolve options_home, route\n      if      has_double_slash then locator += '//'\n      else if has_single_slash then locator += '/'\n      locators.push locator\n    ### TAINT duplication: tex_inputs_home, texinputs_value ###\n    ### TAINT path separator depends on OS ###\n    @options[ 'texinputs' ][ 'value' ] = locators.join ':'\n  # @options[ 'locators' ] = {}\n  # for key, route of @options[ 'routes' ]\n  #   @options[ 'locators' ][ key ] = njs_path.resolve options_home, route\n  #.........................................................................................................\n  # debug '©ed8gv', JSON.stringify @options, null, '  '\n  CACHE.update options\n#...........................................................................................................\n@compile_options()\n\n#-----------------------------------------------------------------------------------------------------------\n@write_mkts_master = ( layout_info, handler ) ->\n  step ( resume ) =>\n    lines             = []\n    write             = lines.push.bind lines\n    master_locator    = layout_info[ 'master-locator'  ]\n    content_locator   = layout_info[ 'content-locator' ]\n    help \"writing #{master_locator}\"\n    #-------------------------------------------------------------------------------------------------------\n    write \"\"\n    write \"% #{master_locator}\"\n    write \"% do not edit this file\"\n    write \"% generated from #{@options[ 'locator' ]}\"\n    write \"\"\n    write \"\\\\documentclass[a4paper,twoside]{book}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    # DEFS\n    #.......................................................................................................\n    defs = @options[ 'defs' ]\n    write \"\"\n    write \"% DEFS\"\n    if defs?\n      write \"\\\\def\\\\#{name}{#{value}}\" for name, value of defs\n    #-------------------------------------------------------------------------------------------------------\n    # NEWCOMMANDS\n    #.......................................................................................................\n    newcommands = @options[ 'newcommands' ]\n    write \"\"\n    write \"% NEWCOMMANDS\"\n    if newcommands?\n      for name, value of newcommands\n        warn \"implicitly converting newcommand value for #{name}\"\n        value = njs_path.resolve __dirname, '..', value\n        write \"\\\\newcommand{\\\\#{name}}{%\\n#{value}%\\n}\"\n    #-------------------------------------------------------------------------------------------------------\n    # PACKAGES\n    #.......................................................................................................\n    write \"\"\n    write \"% PACKAGES\"\n    write \"\\\\usepackage{cxltx-style-base}\"\n    # write \"\\\\usepackage{cxltx-style-trm}\"\n    # write \"\\\\usepackage{cxltx-style-accentbox}\"\n    write \"\\\\usepackage{cxltx-style-pushraise}\"\n    write \"\\\\usepackage{cxltx-style-hyphenation-tolerance}\"\n    write \"\\\\usepackage{cxltx-style-oddeven}\"\n    write \"\\\\usepackage{cxltx-style-position-absolute}\"\n    write \"\\\\usepackage{cxltx-style-pushraise}\"\n    write \"\\\\usepackage{cxltx-style-smashbox}\"\n    write \"\\\\usepackage{mkts2015-main}\"\n    write \"\\\\usepackage{mkts2015-fonts}\"\n    write \"\\\\usepackage{mkts2015-article}\"\n\n    #-------------------------------------------------------------------------------------------------------\n    # FONTS\n    #......................................................................................................\n    fontspec_version  = yield TEXLIVEPACKAGEINFO.read_texlive_package_version @options, 'fontspec', resume\n    use_new_syntax    = SEMVER.satisfies fontspec_version, '>=2.4.0'\n    fonts_home        = @options[ 'fonts' ][ 'home' ]\n    #.......................................................................................................\n    write \"\"\n    write \"% FONTS\"\n    write \"% assuming fontspec@#{fontspec_version}\"\n    write \"\\\\usepackage{fontspec}\"\n    #.......................................................................................................\n    for { texname, home, filename, } in @options[ 'fonts' ][ 'files' ]\n      home ?= fonts_home\n      if use_new_syntax\n        ### TAINT should properly escape values ###\n        write \"\\\\newfontface\\\\#{texname}{#{filename}}[Path=#{home}/]\"\n      else\n        write \"\\\\newfontface\\\\#{texname}[Path=#{home}/]{#{filename}}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    # STYLES\n    #......................................................................................................\n    write \"\"\n    write \"% STYLES\"\n    if ( styles = @options[ 'styles' ] )?\n      write \"\\\\newcommand{\\\\#{name}}{%\\n#{value}%\\n}\" for name, value of styles\n    #-------------------------------------------------------------------------------------------------------\n    main_font_name = @options[ 'fonts' ][ 'main' ]\n    throw new Error \"need entry options/fonts/name\" unless main_font_name?\n    write \"\"\n    write \"% CONTENT\"\n    write \"\\\\begin{document}#{main_font_name}\"\n    #-------------------------------------------------------------------------------------------------------\n    # INCLUDES\n    #.......................................................................................................\n    write \"\"\n    write \"\\\\input{#{content_locator}}\"\n    write \"\"\n    #-------------------------------------------------------------------------------------------------------\n    write \"\\\\end{document}\"\n    #-------------------------------------------------------------------------------------------------------\n    text = lines.join '\\n'\n    # whisper text\n    njs_fs.writeFile master_locator, text, handler\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@pdf_from_md = ( source_route, handler ) ->\n  step ( resume ) =>\n    handler                ?= ->\n    layout_info             = HELPERS.new_layout_info @options, source_route\n    yield @write_mkts_master layout_info, resume\n    source_locator          = layout_info[ 'source-locator'  ]\n    content_locator         = layout_info[ 'content-locator' ]\n    tex_output              = njs_fs.createWriteStream content_locator\n    # debug '©y9meI', layout_info\n    # process.exit()\n    ### TAINT should read MD source stream ###\n    text                    = njs_fs.readFileSync source_locator, encoding: 'utf-8'\n    #---------------------------------------------------------------------------------------------------------\n    state =\n      within_multicol:      no\n      within_keeplines:     no\n      within_pre:           no\n      within_single_column: no\n      layout_info:          layout_info\n    #---------------------------------------------------------------------------------------------------------\n    tex_output.on 'close', =>\n      tasks = []\n      tasks.push ( done ) -> HELPERS.write_pdf layout_info, done\n      # ### TAINT put into HELPERS ###\n      # tasks.push ( done ) ->\n      #   html          = TYPO.get_meta input, 'html'\n      #   html_locator  = HELPERS.tmp_locator_for_extension layout_info, 'html'\n      #   help \"writing HTML to #{html_locator}\"\n      #   njs_fs.writeFile html_locator, html, done\n      ASYNC.parallel tasks, handler\n    #---------------------------------------------------------------------------------------------------------\n    input = TYPO.create_mdreadstream text\n    input\n      # .pipe TYPO.$resolve_html_entities()\n      .pipe TYPO.$fix_typography_for_tex()\n      .pipe TYPO.$show_mktsmd_events()\n      .pipe @MKTX.DOCUMENT.$open          state\n      .pipe @MKTX.COMMAND.$new_page       state\n      # .pipe @MKTX.REGION.$single_column   state\n      .pipe @MKTX.REGION.$keep_lines      state\n      .pipe @MKTX.BLOCK.$heading          state\n      .pipe @MKTX.BLOCK.$paragraph        state\n      .pipe @MKTX.BLOCK.$hr               state\n      # .pipe D.$show()\n      .pipe @MKTX.INLINE.$code            state\n      .pipe @MKTX.INLINE.$em_and_strong   state\n      .pipe @MKTX.DOCUMENT.$close         state\n      .pipe @$filter_tex()\n      .pipe tex_output\n    #---------------------------------------------------------------------------------------------------------\n    # D.resume input\n    input.resume()\n    # debug '©Fad1u', TYPO.get_meta input\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX =\n  DOCUMENT:   {}\n  COMMAND:    {}\n  REGION:     {}\n  BLOCK:      {}\n  INLINE:     {}\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.COMMAND.$new_page = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    return send event unless TYPO.isa event, '∆', 'new-page'\n    # [ type, name, text, meta, ] = event\n    send [ 'tex', \"\\\\null\\\\newpage{}\", ]\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.DOCUMENT.$open = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, '{', 'document'\n      send [ 'tex', \"\\n% begin of MD document\\n\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.DOCUMENT.$close = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, '}', 'document'\n      send [ 'tex', \"\\n% end of MD document\\n\", ]\n    #.......................................................................................................\n    else\n      send event\n\n### Pending ###\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.change_column_count = ( S, send, end ) =>\n\n# #-----------------------------------------------------------------------------------------------------------\n# @MKTX.REGION.$single_column = ( S ) =>\n#   ### TAINT consider to implement command `change_column_count = ( send, n )` ###\n#   #.........................................................................................................\n#   return $ ( event, send, end ) =>\n#     if event?\n#       if TYPO.isa event, [ '{', '}', ], 'single-column'\n#         [ type, name, text, meta, ] = event\n#         #...................................................................................................\n#         if type is '{'\n#           send [ 'tex', '% ### MKTS @@@single-column ###\\n', ]\n#           debug '©x1ESw', '---------------------------single-column('\n#           S.within_single_column = yes\n#           if S.within_multicol\n#             send [ 'tex', '\\\\end{multicols}' ]\n#             S.within_multicol = no\n#           send [ 'tex', '\\n\\n', ]\n#         #...................................................................................................\n#         else\n#           debug '©x1ESw', ')single-column---------------------------'\n#           send [ 'tex', '\\\\begin{multicols}{2}\\n' ]\n#           S.within_multicol       = yes\n#           S.within_single_column  = no\n#       #.....................................................................................................\n#       else\n#         send event\n#     #.......................................................................................................\n#     if end?\n#       if S.within_multicol\n#         send [ 'tex', '\\\\end{multicols}' ]\n#         S.within_multicol = no\n#       end()\n#     #.......................................................................................................\n#     return null\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.REGION.$keep_lines = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, '.', 'text'\n      ### TAINT differences between pre and keep-lines? ###\n      [ type, name, text, meta, ] = event\n      # if S.within_keeplines\n      #   text = text.replace /\\n\\n/g, '~\\\\\\\\\\n'\n      if S.within_pre\n        text = text.replace /\\u0020/g, '\\u00a0'\n      send [ type, name, text, meta, ]\n    #.......................................................................................................\n    else if TYPO.isa event, [ '{', '}', ], 'keep-lines'\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      if type is '{'\n        # send [ 'tex', '% ### MKTS @@@keep-lines ###\\n', ]\n        S.within_pre        = yes\n        S.within_keeplines  = yes\n        send [ 'tex', \"\\\\begingroup\\\\obeyalllines{}\", ]\n      else\n        send [ 'tex', \"\\\\endgroup{}\", ]\n        S.within_keeplines    = no\n        S.within_pre          = no\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$heading = ( S ) =>\n  restart_multicols = no\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, [ '[', ']', ], [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', ]\n      [ type, name, text, meta, ] = event\n      #.....................................................................................................\n      # OPEN\n      #.....................................................................................................\n      if type is '['\n        #...................................................................................................\n        ### TAINT Pending\n        if S.within_multicol and name in [ 'h1', 'h2', ]\n          send [ 'tex', '\\\\end{multicols}' ]\n          S.within_multicol = no\n          restart_multicols = yes\n        ###\n        #...................................................................................................\n        send [ 'tex', \"\\n\", ]\n        #...................................................................................................\n        switch name\n          when 'h1' then  send [ 'tex', \"\\\\chapter{\", ]\n          when 'h2' then  send [ 'tex', \"\\\\section{\", ]\n          else            send [ 'tex', \"\\\\subsection{\", ]\n      #.....................................................................................................\n      # CLOSE\n      #.....................................................................................................\n      else\n        ### Placing the closing brace on a new line seems to improve line breaking ###\n        send [ 'tex', \"\\n\", ]\n        send [ 'tex', \"}\", ]\n        send [ 'tex', \"\\n\", ]\n        ### TAINT Pending\n        if restart_multicols\n          send [ 'tex', '\\\\begin{multicols}{2}\\n' ]\n          S.within_multicol = yes\n        ###\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$paragraph = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, [ '[', ']', ], 'p'\n      [ type, name, text, meta, ] = event\n      if type is '['\n        send [ 'text', '\\n\\n' ]\n      else\n        send [ 'tex', '\\\\par' ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.BLOCK.$hr = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, '.', 'hr'\n      [ type, name, text, meta, ] = event\n      switch chr = text[ 0 ]\n        when '-' then send [ 'text', '\\n--------------\\n' ]\n        when '*' then send [ 'text', '\\n**************\\n' ]\n        else warn \"ignored hr markup #{rpr text}\"\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$code = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, [ '(', ')', ], 'code'\n      [ type, name, text, meta, ] = event\n      ### TAINT should use proper command ###\n      if type is '(' then send [ 'tex', \"{\\\\mktsFontfileSourcecodeproregular{}\", ]\n      else                send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@MKTX.INLINE.$em_and_strong = ( S ) =>\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if TYPO.isa event, [ '(', ')', ], [ 'em', 'strong', ]\n      [ type, name, text, meta, ] = event\n      if type is '('\n        if name is 'em'\n          send [ 'tex', '\\\\textit{', ]\n        else\n          send [ 'tex', '\\\\bold{', ]\n      else\n        send [ 'tex', \"}\", ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter_tex = ->\n  return $ ( event, send ) =>\n    if event[ 0 ] in [ 'tex', 'text', ]\n      send event[ 1 ]\n    else if TYPO.isa event, '.', 'text'\n      send event[ 2 ]\n    else\n      warn \"unhandled event: #{JSON.stringify event}\"\n\n\n\n\n############################################################################################################\nunless module.parent?\n  # @pdf_from_md 'texts/A-Permuted-Index-of-Chinese-Characters/index.md'\n  @pdf_from_md 'texts/demo'\n\n  # debug '©nL12s', TYPO.as_tex_text '亻龵helo さしすサシス 臺灣國語Ⓒ, Ⓙ, Ⓣ𠀤𠁥&jzr#e202;'\n  # debug '©nL12s', TYPO.as_tex_text 'helo さし'\n  # event = [ '{', 'single-column', ]\n  # event = [ '}', 'single-column', ]\n  # event = [ '{', 'new-page', ]\n  # debug '©Gpn1J', TYPO.isa event, [ '{', '}'], [ 'single-column', 'new-page', ]\n\n"]}