{"version":3,"sources":["consolidate-original-and-corrected-formulas.coffee"],"names":[],"mappings":"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","file":"consolidate-original-and-corrected-formulas.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/show-repeated-factors'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\n# BYTEWISE                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\nASYNC                     = require 'async'\nXNCHR                     = require './XNCHR'\n#...........................................................................................................\n# new_db                    = require 'level'\nHOLLERITH                 = require 'hollerith'\n# LRSL                      = require 'longest-repeating-sublist'\n\n# XNCHR.chrs_from_text \"𢐨𢐮𢰅𣹎𤑜𤑨𤑵𤙗𥋡𥽮𦭲𦳪𦽙𧙭𧛴𧩿𨂳𩱆𩱌𩱍𩱎𩱒𩱓𩱖𩱗𩱚𩱜𩱞𩱟𩱠𩱡𩱣𩱤𩱥𩱦𩱧𩱨𩱪𩱫𩱭𩱮𩱯𩱰𩱱𩱲𩱳𩱶𩱷𪾞𫙆𫙇\"\n\n#-----------------------------------------------------------------------------------------------------------\n@consolidate_formulas = ( S ) ->\n  options             = require '../../jizura-datasources/options'\n  original_route      = options[ 'ds-routes' ][ 'formulas'              ]\n  consolidated_route  = options[ 'ds-routes' ][ 'formulas-consolidated' ]\n  corrections_route   = options[ 'ds-routes' ][ 'formulas-corrections'  ]\n  help \"\"\"Collecting formulas from\n    #{original_route}\n    and\n    #{corrections_route}\n    into\n    #{consolidated_route}\"\"\"\n  #.........................................................................................................\n  output              = njs_fs.createWriteStream consolidated_route\n  # input               = njs_fs.createReadStream original_route\n  input               = njs_fs.createReadStream corrections_route\n  #.........................................................................................................\n  # S.db_route          = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  # S.db                = HOLLERITH.new_db S.db_route, create: no\n  # help \"using DB at #{S.db[ '%self' ][ 'location' ]}\"\n  # input               = D.create_throughstream()\n  input.pipe $transform S\n  # #.........................................................................................................\n  # for glyph in S.glyphs\n  #   input.write glyph\n  # input.end()\n  # #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$query = ( S ) =>\n  return D.remit_async_spread ( glyph, send ) =>\n    query = { prefix: [ 'spo', glyph, 'formula' ], }\n    input = ( HOLLERITH.create_phrasestream S.db, query )\n    input\n      .pipe $ ( phrase, _ ) =>\n        [ ..., formulas, ] = phrase\n        send [ glyph, formula, idx, ] for formula, idx in formulas\n        send.done()\n\n#-----------------------------------------------------------------------------------------------------------\n$add_fncr = ( S ) =>\n  return $ ( [ glyph, formula, idx, ], send ) =>\n    fncr = XNCHR.as_fncr glyph\n    send [ glyph, fncr, formula, idx, ]\n\n#-----------------------------------------------------------------------------------------------------------\n$sort = ( S ) =>\n  return D.$sort ( a, b ) =>\n    [ a_glyph, a_fncr, a_formula, a_idx, ] = a\n    [ b_glyph, b_fncr, b_formula, b_idx, ] = b\n    a_cid = XNCHR.as_cid a_glyph\n    b_cid = XNCHR.as_cid b_glyph\n    return +1 if a_cid > b_cid\n    return -1 if a_cid < b_cid\n    return +1 if a_idx > b_idx\n    return -1 if a_idx < b_idx\n    return  0\n\n#===========================================================================================================\n# GENERICS\n# (should really be in PipeDreams)\n#-----------------------------------------------------------------------------------------------------------\n$split_fields = ( S ) =>\n  return $ ( line, send ) =>\n    send line.split '\\t'\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$trim = ( S ) =>\n  return $ ( data, send ) =>\n    switch type = CND.type_of data\n      when 'text' then send data.trim()\n      when 'list' then send ( d.trim() for d in data when CND.isa_text d )\n      else throw new Error \"unable to split a #{type}\"\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$drop_comments = ( S ) =>\n  return $ ( fields, send ) =>\n    Z = []\n    for field in fields\n      break if field.startsWith '#'\n      Z.push field\n    send Z\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$skip_empty = ( S ) =>\n  return $ ( data, send ) =>\n    return null unless data?\n    switch type = CND.type_of data\n      when 'text', 'list' then send data unless data.length is 0\n      else send data\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$show = ( S ) =>\n  return D.$observe ( fields ) =>\n    echo fields.join '\\t'\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$transform = ( S ) =>\n  return D.combine [\n    D.$split()\n    $trim()\n    $skip_empty()\n    $split_fields()\n    $drop_comments()\n    $skip_empty()\n    $trim()\n    D.$show()\n    # $show                       S\n    D.$on_end => S.handler null if S.handler?\n    ]\n\n\n"]}