{"version":3,"sources":["consolidate-original-and-corrected-formulas.coffee"],"names":[],"mappings":"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","file":"consolidate-original-and-corrected-formulas.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/show-repeated-factors'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\n# BYTEWISE                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\nASYNC                     = require 'async'\nXNCHR                     = require './XNCHR'\n#...........................................................................................................\n# new_db                    = require 'level'\nHOLLERITH                 = require 'hollerith'\n# LRSL                      = require 'longest-repeating-sublist'\n\n# XNCHR.chrs_from_text \"𢐨𢐮𢰅𣹎𤑜𤑨𤑵𤙗𥋡𥽮𦭲𦳪𦽙𧙭𧛴𧩿𨂳𩱆𩱌𩱍𩱎𩱒𩱓𩱖𩱗𩱚𩱜𩱞𩱟𩱠𩱡𩱣𩱤𩱥𩱦𩱧𩱨𩱪𩱫𩱭𩱮𩱯𩱰𩱱𩱲𩱳𩱶𩱷𪾞𫙆𫙇\"\n\n#-----------------------------------------------------------------------------------------------------------\n@consolidate_formulas = ( S ) ->\n  options             = require '../../jizura-datasources/options'\n  originals_route     = options[ 'ds-routes' ][ 'formulas'              ]\n  consolidated_route  = options[ 'ds-routes' ][ 'formulas-consolidated' ]\n  corrections_route   = options[ 'ds-routes' ][ 'formulas-corrections'  ]\n  help \"\"\"Collecting formulas from\n    #{originals_route}\n    and\n    #{corrections_route}\n    into\n    #{consolidated_route}\"\"\"\n  #.........................................................................................................\n  output              = njs_fs.createWriteStream consolidated_route\n  corrections_input   = njs_fs.createReadStream corrections_route\n  corrections_input\n    .pipe $transform            S\n    .pipe $collect_corrections  S\n    .pipe $ ( corrections, send ) => S.corrections = corrections\n    .pipe D.$on_end =>\n      originals_input = njs_fs.createReadStream originals_route\n      originals_input\n        .pipe $transform          S\n        .pipe $replace_corrected  S\n        .pipe $format_line        S\n        .pipe D.$on_end =>\n          urge \"output written to #{consolidated_route}\"\n        .pipe output\n  #.........................................................................................................\n  # S.db_route          = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  # S.db                = HOLLERITH.new_db S.db_route, create: no\n  # help \"using DB at #{S.db[ '%self' ][ 'location' ]}\"\n  # input               = D.create_throughstream()\n  # #.........................................................................................................\n  # for glyph in S.glyphs\n  #   input.write glyph\n  # input.end()\n  # #.........................................................................................................\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# $query = ( S ) ->\n#   return D.remit_async_spread ( glyph, send ) =>\n#     query = { prefix: [ 'spo', glyph, 'formula' ], }\n#     input = ( HOLLERITH.create_phrasestream S.db, query )\n#     input\n#       .pipe $ ( phrase, _ ) =>\n#         [ ..., formulas, ] = phrase\n#         send [ glyph, formula, idx, ] for formula, idx in formulas\n#         send.done()\n\n# #-----------------------------------------------------------------------------------------------------------\n# $add_fncr = ( S ) ->\n#   return $ ( [ glyph, formula, idx, ], send ) =>\n#     fncr = XNCHR.as_fncr glyph\n#     send [ glyph, fncr, formula, idx, ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# $sort = ( S ) ->\n#   return D.$sort ( a, b ) =>\n#     [ a_fncr, a_glyph, a_formula, a_idx, ] = a\n#     [ b_fncr, b_glyph, b_formula, b_idx, ] = b\n#     a_cid = XNCHR.as_cid a_glyph\n#     b_cid = XNCHR.as_cid b_glyph\n#     return +1 if a_cid > b_cid\n#     return -1 if a_cid < b_cid\n#     return +1 if a_idx > b_idx\n#     return -1 if a_idx < b_idx\n#     return  0\n\n#-----------------------------------------------------------------------------------------------------------\n$collect_corrections = ( S ) ->\n  Z = {}\n  return $ ( fields, send, end ) =>\n    if fields?\n      [ fncr, glyph, formula, ] = fields\n      ( Z[ glyph ]?= [] ).push formula\n    if end?\n      send Z\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$replace_corrected = ( S ) ->\n  seen_glyphs = new Set()\n  return $ ( fields, send ) =>\n    [ fncr, glyph, formula, ] = fields\n    return if seen_glyphs.has glyph\n    if ( corrected_formulas = S.corrections[ glyph ] )?\n      for corrected_formula in corrected_formulas\n        send [ fncr, glyph, corrected_formula, ]\n    else\n      send [ fncr, glyph, formula, ]\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$format_line = ( S ) ->\n  return $ ( fields, send ) =>\n    send ( fields.join '\\t' ) + '\\n'\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\n# GENERICS\n# (should really be in PipeDreams)\n#-----------------------------------------------------------------------------------------------------------\n$split_fields = ( S ) ->\n  return $ ( line, send ) =>\n    send line.split '\\t'\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$trim = ( S ) ->\n  return $ ( data, send ) =>\n    switch type = CND.type_of data\n      when 'text' then send data.trim()\n      when 'list' then send ( d.trim() for d in data when CND.isa_text d )\n      else throw new Error \"unable to split a #{type}\"\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$drop_comments = ( S ) ->\n  return $ ( fields, send ) =>\n    Z = []\n    for field in fields\n      break if field.startsWith '#'\n      Z.push field\n    send Z\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$skip_empty = ( S ) ->\n  return $ ( data, send ) =>\n    return null unless data?\n    switch type = CND.type_of data\n      when 'text', 'list' then send data unless data.length is 0\n      else send data\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$show = ( S ) ->\n  return D.$observe ( fields ) =>\n    echo fields.join '\\t'\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$transform = ( S ) =>\n  return D.combine [\n    D.$split()\n    $trim()\n    $skip_empty()\n    $split_fields()\n    $drop_comments()\n    $skip_empty()\n    $trim()\n    # D.$show()\n    # $show                       S\n    # D.$on_end => S.handler null if S.handler?\n    ]\n\n\n"]}