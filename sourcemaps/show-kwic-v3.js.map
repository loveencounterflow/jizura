{"version":3,"sources":["show-kwic-v3.coffee"],"names":[],"mappings":"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","file":"show-kwic-v3.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n###\n\n\n`@$align_affixes_with_braces`\n\n```keep-lines squish: yes\n　　　「【虫】」　　　　虫\n\n　　「冄【阝】」　　　　𨙻\n　　　「【冄】阝」　　　𨙻\n\n　「穴扌【未】」　　　　𥦤\n　　「穴【扌】未」　　　𥦤\n　　　「【穴】扌未」　　𥦤\n\n「日业䒑【未】」　　　　曗\n　「日业【䒑】未」　　　曗\n　　「日【业】䒑未」　　曗\n　　　「【日】业䒑未」　曗\n\n日𠂇⺝【阝】」　　「禾　𩡏\n「禾日𠂇【⺝】阝」　　　𩡏\n　「禾日【𠂇】⺝阝」　　𩡏\n　　「禾【日】𠂇⺝阝」　𩡏\n阝」　　「【禾】日𠂇⺝　𩡏\n\n木冖鬯【彡】」　「木缶　鬱\n缶木冖【鬯】彡」　「木　鬱\n「木缶木【冖】鬯彡」　　鬱\n　「木缶【木】冖鬯彡」　鬱\n彡」　「木【缶】木冖鬯　鬱\n鬯彡」　「【木】缶木冖　鬱\n\n山一几【夊】」「女山彳　𡤇\n彳山一【几】夊」「女山　𡤇\n山彳山【一】几夊」「女　𡤇\n「女山彳【山】一几夊」　𡤇\n夊」「女山【彳】山一几　𡤇\n几夊」「女【山】彳山一　𡤇\n一几夊」「【女】山彳山　𡤇\n\n目𠃊八【夊】」「二小　𥜹\n匕目𠃊【八】夊」「二　𥜹\n小匕目【𠃊】八夊」「　𥜹\n二小匕【目】𠃊八夊」　𥜹\n「二小【匕】目𠃊八　𥜹\n夊」「二【小】匕目𠃊　𥜹\n八夊」「【二】小匕目　𥜹\n𠃊八夊」「【】二小匕　𥜹\n```\n\n\n`align_affixes_with_spaces`\n\n```keep-lines squish: yes\n　　　【虫】　　　　虫\n\n　　冄【阝】　　　　𨙻\n　　　【冄】阝　　　𨙻\n\n　穴扌【未】　　　　𥦤\n　　穴【扌】未　　　𥦤\n　　　【穴】扌未　　𥦤\n\n日业䒑【未】　　　　曗\n　日业【䒑】未　　　曗\n　　日【业】䒑未　　曗\n　　　【日】业䒑未　曗\n\n日𠂇⺝【阝】　　禾　𩡏\n禾日𠂇【⺝】阝　　　𩡏\n　禾日【𠂇】⺝阝　　𩡏\n　　禾【日】𠂇⺝阝　𩡏\n阝　　【禾】日𠂇⺝　𩡏\n\n木冖鬯【彡】　木缶　鬱\n缶木冖【鬯】彡　木　鬱\n木缶木【冖】鬯彡　　鬱\n　木缶【木】冖鬯彡　鬱\n彡　木【缶】木冖鬯　鬱\n鬯彡　【木】缶木冖　鬱\n\n山一几【夊】　女山　𡤇\n彳山一【几】夊　女　𡤇\n山彳山【一】几夊　　𡤇\n女山彳【山】一几夊　𡤇\n　女山【彳】山一几　𡤇\n夊　女【山】彳山一　𡤇\n几夊　【女】山彳山　𡤇\n\n目𠃊八【夊】　二　𥜹\n匕目𠃊【八】夊　　𥜹\n小匕目【𠃊】八夊　　𥜹\n二小匕【目】𠃊八夊　𥜹\n二小【匕】目𠃊八　𥜹\n　二【小】匕目𠃊　𥜹\n夊　【二】小匕目　𥜹\n八夊　【】二小匕　𥜹\n```\n\n\n\n###\n\n\n\n\n\n\n\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/show-kwic-v3'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\n# BYTEWISE                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\nASYNC                     = require 'async'\nCHR                       = require 'coffeenode-chr'\nKWIC                      = require 'kwic'\nTEXT                      = require 'coffeenode-text'\n#...........................................................................................................\nnew_db                    = require 'level'\n# new_levelgraph            = require 'levelgraph'\n# db                        = new_levelgraph '/tmp/levelgraph'\nHOLLERITH                 = require 'hollerith'\nƒ                         = CND.format_number.bind CND\n#...........................................................................................................\noptions                   = null\n#-----------------------------------------------------------------------------------------------------------\n@_misfit          = Symbol 'misfit'\n\n#-----------------------------------------------------------------------------------------------------------\n@read_sample = ( db, limit_or_list, handler ) ->\n  ### Return a gamut of select glyphs from the DB. `limit_or_list` may be a list of glyphs or a number\n  representing an upper bound to the usage rank recorded as `rank/cjt`. If `limit_or_list` is a list,\n  a POD whose keys are the glyphs in the list is returned; if it is a number, a similar POD with all the\n  glyphs whose rank is not worse than the given limit is returned. If `limit_or_list` is smaller than zero\n  or equals infinity, `null` is returned to indicate absence of a filter. ###\n  Z         = {}\n  #.........................................................................................................\n  if CND.isa_list limit_or_list\n    Z[ glyph ] = 1 for glyph in limit_or_list\n    return handler null, Z\n  #.........................................................................................................\n  return handler null, null if limit_or_list < 0 or limit_or_list is Infinity\n  #.........................................................................................................\n  throw new Error \"expected list or number, got a #{type}\" unless CND.isa_number limit_or_list\n  #.........................................................................................................\n  db_route  = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  db       ?= HOLLERITH.new_db db_route, create: no\n  #.........................................................................................................\n  lo      = [ 'pos', 'rank/cjt', 0, ]\n  hi      = [ 'pos', 'rank/cjt', limit_or_list, ]\n  query   = { lo, hi, }\n  input   = HOLLERITH.create_phrasestream db, query\n  #.........................................................................................................\n  input\n    .pipe $ ( phrase, send ) =>\n        [ _, _, _, glyph, ] = phrase\n        Z[ glyph ]          = 1\n    .pipe D.$on_end -> handler null, Z\n\n#-----------------------------------------------------------------------------------------------------------\n@_describe_glyph_sample = ( S ) ->\n  if S.glyph_sample is Infinity\n    ### TAINT font substitution should be configured in options or other appropriate place ###\n    return \"gamut of *N* <<<{\\\\mktsFontfileOptima{}≈}>>> #{CND.format_number 75000, ','} glyphs\"\n  else if CND.isa_number S.glyph_sample\n    return \"gamut of *N* = #{CND.format_number S.glyph_sample, ','} glyphs\"\n  else\n    return \"selected glyphs: #{S.glyph_sample.join ''}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@describe_glyphs = ( S ) ->\n  factors = Object.keys S.factor_sample\n  R       = []\n  R.push \"<<(em>> ___KWIC___ Index for \"\n  ### TAINT type-dependent code ###\n  if factors.length > 0\n    plural = if factors.length > 1 then 's' else ''\n    R.push \"factor#{plural} #{factors.join ''}; \"\n  R.push ( @_describe_glyph_sample S ) + ':<<)>>'\n  return R.join '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n@describe_stats = ( S ) ->\n  # debug '9080', S\n  return \"(no stats)\" unless S.do_stats\n  factors = Object.keys S.factor_sample\n  if factors.length is 1\n    plural  = \"\"\n    pronoun = \"its\"\n  else\n    plural  = \"s\"\n    pronoun = \"their\"\n  R       = []\n  R.push \"<<(em>>Statistics for factor#{plural} #{factors.join ''}\"\n  if S.two_stats then R.push \"and #{pronoun} immediate suffix and prefix factors\"\n  else                R.push \"and #{pronoun} immediate suffix factors\"\n  R.push \" (\\ue045 indicates first/last position);\"\n  R.push ( @_describe_glyph_sample S ) + ':<<)>>'\n  return R.join '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n@show_kwic_v3 = ( S ) ->\n  #.........................................................................................................\n  # factor_sample =\n  #   '旧日卓桌𠦝東車更㯥䡛轟𨏿昍昌晶𣊭早畢果𣛕𣡗𣡾曱甲𤳅𤳵申𤱓禺𥝉㬰电田畕畾𤳳由甴𡆪白㿟皛鱼魚䲆𩺰鱻䲜'\n  # factor_sample = '旧日卓桌𠦝昍昌晶𣊭早白㿟皛'\n  # factor_sample = '耂'\n  #.........................................................................................................\n  ### TAINT temporary; going to use sets ###\n  if S.factor_sample?\n    _fs = {}\n    _fs[ factor ] = 1 for factor in S.factor_sample\n    S.factor_sample = _fs\n  #.........................................................................................................\n  S.glyphs_description  = @describe_glyphs S\n  S.stats_description   = @describe_stats S\n  urge S.glyphs_description\n  urge S.stats_description\n  #.........................................................................................................\n  S.query       = { prefix: [ 'pos', 'guide/kwic/v3/sortcode/wrapped-lineups', ], }\n  S.db_route    = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  S.db          = HOLLERITH.new_db S.db_route, create: no\n  # S         = { db_route, db, query, glyph_sample, factor_sample, handler, }\n  help \"using DB at #{S.db[ '%self' ][ 'location' ]}\"\n  #.........................................................................................................\n  step ( resume ) =>\n    #.......................................................................................................\n    S.glyph_sample = yield @read_sample S.db, S.glyph_sample, resume\n    # debug '9853', ( Object.keys S.glyph_sample ).length\n    input           = ( HOLLERITH.create_phrasestream S.db, S.query ).pipe $transform_v3 S\n    # handler null\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$reorder_phrase = ( S ) =>\n  return $ ( phrase, send ) =>\n    ### extract sortcode ###\n    [ _, _, sortrow, glyph, _, ]  = phrase\n    [ _, infix, suffix, prefix, ] = sortrow\n    send [ glyph, prefix, infix, suffix, ]\n\n#-----------------------------------------------------------------------------------------------------------\n$exclude_gaiji = ( S ) =>\n  return D.$filter ( event ) =>\n    [ glyph, ] = event\n    return ( not glyph.startsWith '&' ) or ( glyph.startsWith '&jzr#' )\n\n#-----------------------------------------------------------------------------------------------------------\n$include_sample = ( S ) =>\n  return D.$filter ( event ) =>\n    # [ _, infix, suffix, prefix, ] = sortcode\n    # factors = [ prefix..., infix, suffix...,]\n    # return ( infix is '山' ) and ( '水' in factors )\n    return true if ( not S.glyph_sample? ) and ( not S.factor_sample? )\n    [ glyph, prefix, infix, suffix, ] = event\n    in_glyph_sample   = ( not  S.glyph_sample? ) or ( glyph of  S.glyph_sample )\n    in_factor_sample  = ( not S.factor_sample? ) or ( infix of S.factor_sample )\n    return in_glyph_sample and in_factor_sample\n\n#-----------------------------------------------------------------------------------------------------------\n$count_lineup_lengths = ( S ) =>\n  counts  = []\n  count   = 0\n  #.........................................................................................................\n  return $ ( event, send, end ) =>\n    if event?\n      #.....................................................................................................\n      if CND.isa_list event\n        [ glyph, sortcode, ]          = event\n        [ _, infix, suffix, prefix, ] = sortcode\n        lineup                        = ( prefix.join '' ) + infix + ( suffix.join '' )\n        lineup_length                 = ( Array.from lineup.replace /\\u3000/g, '' ).length\n        if true # lineup_length is 8\n          send event\n          counts[ lineup_length ] = ( counts[ lineup_length ] ? 0 ) + 1\n      #.....................................................................................................\n      else\n        send event\n    #.......................................................................................................\n    if end?\n      for length in [ 1 ... counts.length ]\n        count_txt = TEXT.flush_right ( ƒ counts[ length ] ? 0 ), 10\n        help \"found #{count_txt} lineups of length #{length}\"\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n$write_stats = ( S ) =>\n  return D.$pass_through() unless S.do_stats\n  glyphs          = new Set()\n  ### NB that we use a JS `Set` to record unique infixes; it has the convenient property of keeping the\n  insertion order of its elements, so afterwards we can use it to determine the infix ordering. ###\n  infixes         = new Set()\n  factor_pairs    = new Map()\n  lineup_count    = 0\n  output          = njs_fs.createWriteStream S.stats_route\n  line_count      = 0\n  in_suffix_part  = no\n  #.........................................................................................................\n  return D.$observe ( event, has_ended ) =>\n    if event?\n      #.....................................................................................................\n      if CND.isa_list event\n        [ glyph, prefix, infix, suffix, ] = event\n        #...................................................................................................\n        if suffix.startsWith '\\u3000' then suffix = '\\ue045'\n        else                               suffix = suffix.trim()\n        suffix  = Array.from suffix\n        # if S.two_stats then key = \"#{infix},#{infix}#{suffix[ 0 ]}\"\n        # else                key = \"#{infix},#{infix}#{suffix[ 0 ]}-1\"\n        key = \"#{infix},#{infix}#{suffix[ 0 ]},1\"\n        factor_pairs.set key, target = new Set() unless ( target = factor_pairs.get key )?\n        target.add glyph\n        #...................................................................................................\n        if S.with_prefixes\n          if prefix.endsWith '\\u3000' then prefix = '\\ue045'\n          else                             prefix = prefix.trim()\n          prefix  = Array.from prefix\n          key     = \"#{infix},#{prefix[ prefix.length - 1 ]}#{infix},2\"\n          factor_pairs.set key, target = new Set() unless ( target = factor_pairs.get key )?\n          target.add glyph\n        #...................................................................................................\n        infixes.add infix\n        glyphs.add  glyph\n        lineup_count += +1\n    #.......................................................................................................\n    if has_ended\n      help \"built KWIC for #{ƒ glyphs.size} glyphs\"\n      help \"containing #{ƒ lineup_count} lineups\"\n      infixes       = Array.from infixes\n      factor_pairs  = Array.from factor_pairs\n      for entry in factor_pairs\n        entry[ 0 ]      = entry[ 0 ].split ','\n        entry[ 0 ][ 2 ] = parseInt entry[ 0 ][ 2 ], 10\n        entry[ 1 ]      = Array.from entry[ 1 ]\n      #.....................................................................................................\n      factor_pairs.sort ( a, b ) ->\n        [ [ a_infix, a_pair, a_series, ], a_glyphs, ] = a\n        [ [ b_infix, b_pair, b_series, ], b_glyphs, ] = b\n        a_infix_idx                                   = infixes.indexOf a_infix\n        b_infix_idx                                   = infixes.indexOf b_infix\n        if S.two_stats\n          return +1 if a_series > b_series\n          return -1 if a_series < b_series\n        return +1 if a_infix_idx     > b_infix_idx\n        return -1 if a_infix_idx     < b_infix_idx\n        return +1 if a_glyphs.length < b_glyphs.length\n        return -1 if a_glyphs.length > b_glyphs.length\n        return +1 if a_pair          > b_pair\n        return -1 if a_pair          < b_pair\n        return  0\n      #.....................................................................................................\n      ### TAINT column count should be accessible through CLI and otherwise be calculated according to\n      paper size and lineup lengths ###\n      output.write \"<<(columns 4>><<(JZR.vertical-bar>>\\n\"\n      output.write \"```keep-lines squish: yes\\n\"\n      #.....................................................................................................\n      last_infix  = null\n      last_series = null\n      separator   = '】'\n      for [ [ infix, factor_pair, series, ], glyphs, ] in factor_pairs\n        #...................................................................................................\n        if last_infix isnt infix\n          if S.two_stats\n            unless in_suffix_part then  output.write \"——.#{infix}\\ue023.——\\n\"\n            else                        output.write \"——.\\ue023#{infix}.——\\n\"\n          else\n            output.write \"——.\\ue023#{infix}\\ue023.——\\n\"\n        last_infix  = infix\n        #...................................................................................................\n        if S.two_stats and last_series? and last_series isnt series\n          in_suffix_part = yes\n          output.write \"```\\n\"\n          output.write \"<<)>><<)>>\\n\"\n          output.write \"\\n:::::::::::::::::::::::::::::::::::::\\n\\n\"\n          # output.write \"\\n°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\\n\\n\"\n          # output.write \"\\n====================================\\n\\n\"\n          # output.write \"\\n<<(slash>>\\n\"\n          # output.write \"\\n------------------------------------\\n\"\n          # output.write \"<<)>>\\n\\n\"\n          # output.write \"\\n<<!slash [ 'tex', '\\\\\\\\mktsRulePlain{}', ]>>\\n\\n\"\n          output.write \"<<(columns 4>><<(JZR.vertical-bar>>\\n\"\n          output.write \"```keep-lines squish: yes\\n\"\n          output.write \"——.\\ue023#{infix}.——\\n\"\n        last_series = series\n        #...................................................................................................\n        glyph_count = glyphs.length\n        # if glyph_count > 999 then glyph_count_txt = \"<<<{\\\\tfScale{0.5}{1}#{glyph_count}}>>>#{glyph_count}\"\n        glyph_count_txt = \"#{glyph_count}\"\n        if S.width?\n          glyphs.push '\\u3000'  while glyphs.length < S.width\n          glyphs.pop()          while glyphs.length > S.width\n        line = [ factor_pair, separator, ( glyphs.join '' ), '==>', glyph_count_txt, '\\n', ].join ''\n        output.write line\n        line_count += +1\n      #.....................................................................................................\n      output.write \"```\\n\"\n      output.write \"<<)>><<)>>\\n\"\n      output.end()\n      help \"found #{infixes.length} infixes\"\n      help \"wrote #{line_count} lines to #{S.stats_route}\"\n      S.handler null if S.handler?\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$write_glyphs = ( S ) =>\n  output      = njs_fs.createWriteStream S.glyphs_route\n  line_count  = 0\n  is_first    = yes\n  last_infix  = null\n  #.........................................................................................................\n  return D.$observe ( event, has_ended ) ->\n    #.......................................................................................................\n    if event?\n      if CND.isa_list event\n        if is_first\n          ### TAINT column count should be accessible through CLI and otherwise be calculated according to\n          paper size and lineup lengths ###\n          output.write \"<<(columns 4>><<(JZR.vertical-bar>>\\n\"\n          output.write \"```keep-lines squish: yes\\n\"\n          is_first = no\n        [ glyph, prefix, infix, suffix, ] = event\n        if infix isnt last_infix\n          last_infix = infix\n          # output.write \"——.#{infix}.——\\n\"\n          output.write prefix + '【' + infix + '】' + suffix + '\\n'\n        else\n          lineup = prefix + '【' + infix + '】' + suffix\n          output.write lineup + '==>' + glyph + '\\n'\n      else\n        output.write event + '\\n'\n      line_count += +1\n    #.......................................................................................................\n    if has_ended\n      output.write \"```\\n\"\n      output.write \"<<)>><<)>>\\n\"\n      help \"wrote #{line_count} lines to #{S.glyphs_route}\"\n      output.end()\n\n#-----------------------------------------------------------------------------------------------------------\n$write_glyphs_description = ( S ) =>\n  output = njs_fs.createWriteStream S.glyphs_description_route\n  #.........................................................................................................\n  return D.$observe ( event, has_ended ) ->\n    if has_ended\n      output.write S.glyphs_description\n      help \"wrote glyphs description to #{S.glyphs_description_route}\"\n      output.end()\n\n#-----------------------------------------------------------------------------------------------------------\n$write_stats_description = ( S ) =>\n  return D.$pass_through() unless S.do_stats\n  output = njs_fs.createWriteStream S.stats_description_route\n  #.........................................................................................................\n  return D.$observe ( event, has_ended ) ->\n    if has_ended\n      output.write S.stats_description\n      help \"wrote stats description to #{S.stats_description_route}\"\n      output.end()\n\n#-----------------------------------------------------------------------------------------------------------\n@$align_affixes_with_braces = ( S ) =>\n  prefix_max_length   = 3\n  suffix_max_length   = 3\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if CND.isa_list event\n      [ glyph, sortcode, ]          = event\n      [ _, infix, suffix, prefix, ] = sortcode\n      #.....................................................................................................\n      prefix_length                 = prefix.length\n      suffix_length                 = suffix.length\n      prefix_delta                  = prefix_length - prefix_max_length\n      suffix_delta                  = suffix_length - suffix_max_length\n      prefix_excess_max_length      = suffix_max_length - suffix_length\n      suffix_excess_max_length      = prefix_max_length - prefix_length\n      prefix_excess                 = []\n      suffix_excess                 = []\n      prefix_padding                = []\n      suffix_padding                = []\n      prefix_is_shortened           = no\n      suffix_is_shortened           = no\n      #.....................................................................................................\n      if prefix_delta > 0\n        prefix_excess = prefix.splice 0, prefix_delta\n      if suffix_delta > 0\n        suffix_excess = suffix.splice suffix.length - suffix_delta, suffix_delta\n      #.....................................................................................................\n      while prefix_excess.length > 0 and prefix_excess.length > prefix_excess_max_length\n        prefix_is_shortened = yes\n        prefix_excess.pop()\n      while suffix_excess.length > 0 and suffix_excess.length > suffix_excess_max_length\n        suffix_is_shortened = yes\n        suffix_excess.shift()\n      #.....................................................................................................\n      while prefix_padding.length + suffix_excess.length + prefix.length < prefix_max_length\n        prefix_padding.unshift '\\u3000'\n      while suffix_padding.length + prefix_excess.length + suffix.length < suffix_max_length\n        suffix_padding.unshift '\\u3000'\n      #.....................................................................................................\n      if prefix_excess.length > 0 then prefix_excess.unshift '「' unless prefix_excess.length is 0\n      else                                    prefix.unshift '「' unless prefix_delta > 0\n      if suffix_excess.length > 0 then suffix_excess.push    '」' unless suffix_excess.length is 0\n      else                                    suffix.push    '」' unless suffix_delta > 0\n      #.....................................................................................................\n      prefix.splice 0, 0, prefix_padding...\n      prefix.splice 0, 0, suffix_excess...\n      suffix.splice suffix.length, 0, suffix_padding...\n      suffix.splice suffix.length, 0, prefix_excess...\n      #.....................................................................................................\n      urge ( prefix.join '' ) + '【' + infix + '】' + ( suffix.join '' )\n      # send [ glyph, [ prefix_padding, suffix_excess, prefix, infix, suffix, prefix_excess, ], ]\n      send [ glyph, [ prefix, infix, suffix, ], ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n@$align_affixes_with_spaces = ( S ) =>\n  ### This code has been used in `copy-jizuradb-to-Hollerith2-format#add_kwic_v3_wrapped_lineups` ###\n  prefix_max_length   = 3\n  suffix_max_length   = 3\n  #.........................................................................................................\n  return $ ( event, send ) =>\n    #.......................................................................................................\n    if CND.isa_list event\n      [ glyph, sortcode, ]          = event\n      [ _, infix, suffix, prefix, ] = sortcode\n      #.....................................................................................................\n      prefix_length                 = prefix.length\n      suffix_length                 = suffix.length\n      prefix_delta                  = prefix_length - prefix_max_length\n      suffix_delta                  = suffix_length - suffix_max_length\n      prefix_excess_max_length      = suffix_max_length - suffix_length\n      suffix_excess_max_length      = prefix_max_length - prefix_length\n      prefix_excess                 = []\n      suffix_excess                 = []\n      prefix_padding                = []\n      suffix_padding                = []\n      #.....................................................................................................\n      if prefix_delta > 0\n        prefix_excess = prefix.splice 0, prefix_delta\n      if suffix_delta > 0\n        suffix_excess = suffix.splice suffix.length - suffix_delta, suffix_delta\n      #.....................................................................................................\n      while prefix_excess.length > 0 and prefix_excess.length > prefix_excess_max_length - 1\n        prefix_excess.pop()\n      while suffix_excess.length > 0 and suffix_excess.length > suffix_excess_max_length - 1\n        suffix_excess.shift()\n      #.....................................................................................................\n      while prefix_padding.length + suffix_excess.length + prefix.length < prefix_max_length\n        prefix_padding.unshift '\\u3000'\n      while suffix_padding.length + prefix_excess.length + suffix.length < suffix_max_length\n        suffix_padding.unshift '\\u3000'\n      #.....................................................................................................\n      prefix.splice 0, 0, prefix_padding...\n      prefix.splice 0, 0, suffix_excess...\n      suffix.splice suffix.length, 0, suffix_padding...\n      suffix.splice suffix.length, 0, prefix_excess...\n      #.....................................................................................................\n      urge ( prefix.join '' ) + '【' + infix + '】' + ( suffix.join '' )\n      # send [ glyph, [ prefix_padding, suffix_excess, prefix, infix, suffix, prefix_excess, ], ]\n      send [ glyph, [ prefix, infix, suffix, ], ]\n    #.......................................................................................................\n    else\n      send event\n\n#-----------------------------------------------------------------------------------------------------------\n$transform_v3 = ( S ) =>\n  return D.combine [\n    $reorder_phrase                 S\n    $exclude_gaiji                  S\n    $include_sample                 S\n    # $count_lineup_lengths           S\n    # @$align_affixes_with_braces     S\n    # @$align_affixes_with_spaces     S\n    $write_stats                    S\n    $write_glyphs                   S\n    $write_glyphs_description       S\n    $write_stats_description        S\n    D.$on_end => S.handler null if S.handler?\n    ]\n\n\n\n# ############################################################################################################\n# unless module.parent?\n\n#   #---------------------------------------------------------------------------------------------------------\n#   options =\n#     #.......................................................................................................\n#     # 'route':                njs_path.join __dirname, '../dbs/demo'\n#     'route':                njs_path.resolve __dirname, '../../jizura-datasources/data/leveldb-v2'\n#     # 'route':            '/tmp/leveldb'\n#   #---------------------------------------------------------------------------------------------------------\n#   @show_kwic_v3()\n\n\n"]}