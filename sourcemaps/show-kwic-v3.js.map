{"version":3,"sources":["show-kwic-v3.coffee"],"names":[],"mappings":"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","file":"show-kwic-v3.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/show-kwic-v3'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\n# BYTEWISE                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\nASYNC                     = require 'async'\nCHR                       = require 'coffeenode-chr'\nKWIC                      = require 'kwic'\nTEXT                      = require 'coffeenode-text'\n#...........................................................................................................\nnew_db                    = require 'level'\n# new_levelgraph            = require 'levelgraph'\n# db                        = new_levelgraph '/tmp/levelgraph'\nHOLLERITH                 = require 'hollerith'\nƒ                         = CND.format_number.bind CND\n#...........................................................................................................\noptions                   = null\n#-----------------------------------------------------------------------------------------------------------\n@_misfit          = Symbol 'misfit'\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@initialize = ( handler ) ->\n  options[ 'db' ] = HOLLERITH.new_db options[ 'route' ]\n  handler null\n\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_subject = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then v0 else v1\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_object = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then v1 else v0\n\n#-----------------------------------------------------------------------------------------------------------\nHOLLERITH.$pick_values = ->\n  return $ ( lkey, send ) =>\n    [ pt, _, v0, _, v1, ] = lkey\n    send if pt is 'so' then [ v0, v1, ] else [ v1, v0, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@dump_jizura_db = ->\n  source_db   = HOLLERITH.new_db '/Volumes/Storage/temp/jizura-hollerith2'\n  prefix      = [ 'spo', '𡏠', ]\n  prefix      = [ 'spo', '㔰', ]\n  input       = HOLLERITH.create_phrasestream source_db, prefix\n  #.........................................................................................................\n  input\n    .pipe D.$count ( count ) -> help \"read #{count} keys\"\n    .pipe $ ( data, send ) => send JSON.stringify data\n    .pipe D.$show()\n\n#-----------------------------------------------------------------------------------------------------------\n@read_factors = ( db, handler ) ->\n  #.........................................................................................................\n  step ( resume ) =>\n    Z         = {}\n    db_route  = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n    db       ?= HOLLERITH.new_db db_route, create: no\n    #.......................................................................................................\n    prefix  = [ 'pos', 'factor/', ]\n    query   = { prefix, star: '*', }\n    input   = HOLLERITH.create_phrasestream db, query\n    #.......................................................................................................\n    input\n      .pipe do =>\n        last_sbj  = null\n        target    = null\n        #...................................................................................................\n        return $ ( phrase, send, end ) =>\n          #.................................................................................................\n          if phrase?\n            [ _, prd, obj, sbj, ] = phrase\n            prd           = prd.replace /^factor\\//g, ''\n            sbj           = CHR.as_uchr sbj, input: 'xncr'\n            if sbj isnt last_sbj\n              send target if target?\n              target    = Z[ sbj ]?= { glyph: sbj, }\n              last_sbj  = sbj\n            target[ prd ] = obj\n            Z[ obj ]      = target if prd is 'sortcode'\n          #.................................................................................................\n          if end?\n            send target if target?\n            end()\n      .pipe D.$on_end -> handler null, Z\n\n#-----------------------------------------------------------------------------------------------------------\n@read_sample = ( db, limit_or_list, handler ) ->\n  ### Return a gamut of select glyphs from the DB. `limit_or_list` may be a list of glyphs or a number\n  representing an upper bound to the usage rank recorded as `rank/cjt`. If `limit_or_list` is a list,\n  a POD whose keys are the glyphs in the list is returned; if it is a number, a similar POD with all the\n  glyphs whose rank is not worse than the given limit is returned. If `limit_or_list` is smaller than zero\n  or equals infinity, `null` is returned to indicate absence of a filter. ###\n  Z         = {}\n  #.......................................................................................................\n  if CND.isa_list limit_or_list\n    Z[ glyph ] = 1 for glyph in limit_or_list\n    return handler null, Z\n  #.......................................................................................................\n  return handler null, null if limit_or_list < 0 or limit_or_list is Infinity\n  #.......................................................................................................\n  throw new Error \"expected list or number, got a #{type}\" unless CND.isa_number limit_or_list\n  #.......................................................................................................\n  db_route  = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  db       ?= HOLLERITH.new_db db_route, create: no\n  #.......................................................................................................\n  lo      = [ 'pos', 'rank/cjt', 0, ]\n  hi      = [ 'pos', 'rank/cjt', limit_or_list, ]\n  query   = { lo, hi, }\n  input   = HOLLERITH.create_phrasestream db, query\n  #.......................................................................................................\n  input\n    .pipe $ ( phrase, send ) =>\n        [ _, _, _, glyph, ] = phrase\n        Z[ glyph ]          = 1\n    .pipe D.$on_end -> handler null, Z\n\n#-----------------------------------------------------------------------------------------------------------\n@show_kwic_v3 = ( db ) ->\n  #.........................................................................................................\n  step ( resume ) =>\n    db_route      = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n    db           ?= HOLLERITH.new_db db_route, create: no\n    help \"using DB at #{db[ '%self' ][ 'location' ]}\"\n    ### !!!!!!!!!!!!!!!!!!!!!!! ###\n    # factor_infos  = yield @read_factors db, resume\n    # # debug '©g5bVR', factors; process.exit()\n    # help \"read #{( Object.keys factor_infos ).length} entries for factor_infos\"\n    ### !!!!!!!!!!!!!!!!!!!!!!! ###\n    ranks               = {}\n    include             = 15000\n    include             = 10000\n    include             = 20000\n    include             = 500\n    include             = Infinity\n    lineup_left_count   = 3\n    lineup_right_count  = 3\n    # include           = [ '𡳵', '𣐤', '𦾔', '𥈺', '𨂻', '寿', '邦', '帮', '畴', '铸', ]\n    # include       = [ '寿', '邦', '帮', '畴', '铸', '筹', '涛', '祷', '绑', '綁',    ]\n    # include       = Array.from '未釐犛剺味昧眛魅鮇沬妹業寐鄴澲末抹茉枺沫袜妺'\n    # 'guide/hierarchy/uchr'\n    glyph_sample      = null\n    factor_sample     = null\n    #.........................................................................................................\n    ### TAINT use sets ###\n    glyph_sample  = yield @read_sample db, include, resume\n    # factor_sample =\n    #   '旧': 1\n    #   '日': 1\n    #   '卓': 1\n    #   '桌': 1\n    #   '𠦝': 1\n    #   '東': 1\n    #   '車': 1\n    #   '更': 1\n    #   '㯥': 1\n    #   '䡛': 1\n    #   '轟': 1\n    #   '𨏿': 1\n    #   '昍': 1\n    #   '昌': 1\n    #   '晶': 1\n    #   '𣊭': 1\n    #   '早': 1\n    #   '': 1\n    #   '畢': 1\n    #   '': 1\n    #   '果': 1\n    #   '𣛕': 1\n    #   '𣡗': 1\n    #   '𣡾': 1\n    #   # '曱': 1\n    #   '甲': 1\n    #   '𤳅': 1\n    #   '𤳵': 1\n    #   '申': 1\n    #   '𤱓': 1\n    #   '禺': 1\n    #   '𥝉': 1\n    #   '': 1\n    #   '㬰': 1\n    #   '': 1\n    #   '电': 1\n    #   '': 1\n    #   '田': 1\n    #   '畕': 1\n    #   '畾': 1\n    #   '𤳳': 1\n    #   '由': 1\n    #   '甴': 1\n    #   '𡆪': 1\n    #   '白': 1\n    #   '㿟': 1\n    #   '皛': 1\n    #   '': 1\n    #   '鱼': 1\n    #   '魚': 1\n    #   '䲆': 1\n    #   '𩺰': 1\n    #   '鱻': 1\n    #   '䲜': 1\n    # factor_sample =\n    #   '旧': 1\n    #   '日': 1\n    #   '卓': 1\n    #   '桌': 1\n    #   '𠦝': 1\n    #   '昍': 1\n    #   '昌': 1\n    #   '晶': 1\n    #   '𣊭': 1\n    #   '早': 1\n    #   '白': 1\n    #   '㿟': 1\n    #   '皛': 1\n    #.........................................................................................................\n    $reorder_phrase = =>\n      return $ ( phrase, send ) =>\n        ### extract sortcode ###\n        [ _, _, sortcode, glyph, _, ] = phrase\n        send [ glyph, sortcode, ]\n    #.........................................................................................................\n    $exclude_gaiji = =>\n      return D.$filter ( [ glyph, sortcode ] ) =>\n        return ( not glyph.startsWith '&' ) or ( glyph.startsWith '&jzr#' )\n    #.........................................................................................................\n    $include_sample = =>\n      return D.$filter ( [ glyph, sortcode ] ) =>\n        # [ _, infix, suffix, prefix, ] = sortcode\n        # factors = [ prefix..., infix, suffix...,]\n        # return ( infix is '山' ) and ( '水' in factors )\n        return true if ( not glyph_sample? ) and ( not factor_sample? )\n        [ _, infix, suffix, prefix, ] = sortcode\n        in_glyph_sample   = ( not  glyph_sample? ) or ( glyph of  glyph_sample )\n        in_factor_sample  = ( not factor_sample? ) or ( infix of factor_sample )\n        return in_glyph_sample and in_factor_sample\n    #.........................................................................................................\n    $count_lineup_lengths = =>\n      counts  = []\n      count   = 0\n      #.......................................................................................................\n      return $ ( event, send, end ) =>\n        if event?\n          #...................................................................................................\n          if CND.isa_list event\n            [ glyph, sortcode, ]          = event\n            [ _, infix, suffix, prefix, ] = sortcode\n            lineup                        = ( prefix.join '' ) + infix + ( suffix.join '' )\n            lineup_length                 = ( Array.from lineup.replace /\\u3000/g, '' ).length\n            ### !!!!!!!!!!!!!!!!!!!!!!! ###\n            # send event\n            # # send event if glyph is '辭'\n            # if 3 < lineup_length < 8\n            #   count += +1\n            #   send event if count < 100\n            ### !!!!!!!!!!!!!!!!!!!!!!! ###\n            if lineup_length > 7\n              send event\n              counts[ lineup_length ] = ( counts[ lineup_length ] ? 0 ) + 1\n          #...................................................................................................\n          else\n            send event\n        #.....................................................................................................\n        if end?\n          for length in [ 1 ... counts.length ]\n            count_txt = TEXT.flush_right ( ƒ counts[ length ] ? 0 ), 10\n            help \"found #{count_txt} lineups of length #{length}\"\n          end()\n    #.........................................................................................................\n    $insert_hr = =>\n      in_keeplines  = no\n      last_infix    = null\n      return $ ( event, send, end ) =>\n        if event?\n          [ glyph, sortcode, ]          = event\n          [ _, infix, suffix, prefix, ] = sortcode\n          if last_infix? and infix isnt last_infix\n            send \"<<keep-lines)>>\" if in_keeplines\n            send \"*******************************************\"\n            in_keeplines = no\n          last_infix = infix\n          send \"<<(keep-lines>>\" unless in_keeplines\n          in_keeplines = yes\n          send event\n        if end?\n          send \"<<keep-lines)>>\" if in_keeplines\n          end()\n    #.........................................................................................................\n    $align_affixes = =>\n      return $ ( event, send ) =>\n        #.....................................................................................................\n        if CND.isa_list event\n          [ glyph, sortcode, ]          = event\n          [ _, infix, suffix, prefix, ] = sortcode\n          pre_prefix                    = []\n          post_suffix                   = []\n          pre_prefix.unshift  suffix.pop()   while suffix.length > lineup_right_count\n          post_suffix.push    prefix.shift() while prefix.length >  lineup_left_count\n          prefix.unshift '\\u3000' until prefix.length >=  lineup_left_count -  pre_prefix.length\n          suffix.push    '\\u3000' until suffix.length >= lineup_right_count - post_suffix.length\n          # log ( pre_prefix.join '' ), ( prefix.join ''), '|', infix, '|', ( suffix.join '' ), ( post_suffix.join '' ) + glyph\n          send [ glyph, [ pre_prefix, prefix, infix, suffix, post_suffix, ], ]\n        #.....................................................................................................\n        else\n          send event\n    #.........................................................................................................\n    $count_glyphs_etc = =>\n      glyphs        = new Set()\n      lineup_count  = 0\n      #.......................................................................................................\n      return D.$observe ( event, has_ended ) =>\n        if event?\n          #...................................................................................................\n          if CND.isa_list event\n            [ glyph, _, ] = event\n            glyphs.add glyph\n            lineup_count += +1\n          #...................................................................................................\n          else\n            send event\n        #.....................................................................................................\n        if has_ended\n          help \"built KWIC for #{ƒ glyphs.size} glyphs\"\n          help \"containing #{ƒ lineup_count} lineups\"\n    #.........................................................................................................\n    $show = =>\n      return D.$observe ( event ) ->\n        if CND.isa_list event\n          [ glyph, sortcode, ]          = event\n          [ _, infix, suffix, prefix, ] = sortcode\n          # [ pre_prefix\n          #   prefix\n          #   infix\n          #   suffix\n          #   post_suffix ]     = lineup\n          # prefix.splice             0, 0,  pre_prefix...\n          # suffix.splice prefix.length, 0, post_suffix...\n          # # prefix.shift()  until prefix.length <=  lineup_left_count\n          # # suffix.pop()    until suffix.length <= lineup_right_count\n          prefix = prefix.join ''\n          suffix = suffix.join ''\n          lineup = prefix + '|' + infix + '|' + suffix\n          echo lineup + glyph # + '<<<\\\\\\\\>>>'\n        else\n          echo event\n    #.........................................................................................................\n    $transform_v3 = => D.combine [\n        $reorder_phrase()\n        $exclude_gaiji()\n        $include_sample()\n        # D.$show()\n        $count_lineup_lengths()\n        # $insert_hr()\n        # $align_affixes()\n        $count_glyphs_etc()\n        $show()\n        ]\n    #.........................................................................................................\n    query_v3  = { prefix: [ 'pos', 'guide/kwic/v3/sortcode', ], }\n    input_v3  = ( HOLLERITH.create_phrasestream db, query_v3 ).pipe $transform_v3()\n      # .pipe D.$observe ( [ glyph, lineup, ] ) -> help glyph, lineup if glyph is '畴'\n    #.........................................................................................................\n    # input_v3\n    #.........................................................................................................\n    return null\n\n\n############################################################################################################\nunless module.parent?\n\n  #---------------------------------------------------------------------------------------------------------\n  options =\n    #.......................................................................................................\n    # 'route':                njs_path.join __dirname, '../dbs/demo'\n    'route':                njs_path.resolve __dirname, '../../jizura-datasources/data/leveldb-v2'\n    # 'route':            '/tmp/leveldb'\n  #---------------------------------------------------------------------------------------------------------\n  # debug '©AoOAS', options\n  # @find_good_kwic_sample_glyphs_3()\n  @show_kwic_v3()\n  # @show_codepoints_with_missing_predicates()\n  # @show_encoding_sample()\n  # @compile_encodings()\n\n\n"]}