{"version":3,"sources":["show-usage-statistics.coffee"],"names":[],"mappings":"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","file":"show-usage-statistics.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/show-usage-counts'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\n#...........................................................................................................\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n#...........................................................................................................\nHOLLERITH                 = require 'hollerith'\nCHR                       = require 'coffeenode-chr'\nTEXT                      = require 'coffeenode-text'\nÆ’                         = CND.format_number.bind CND\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$simplify_usagecode = ->\n  ### Normalize letters to lower case, thereby conflating the `C` vs `c` etc distinctions; throw out\n  characters marked as `f` (facultative), `p` (positional), and `x` (extra); subsume Korea, Taiwan, Hong\n  Kong and Macau under one group (`t` for 'traditional'): ###\n  return $ ( [ phrase_type, prd, usagecode, glyph, ], send ) =>\n    usagecode = usagecode.toLowerCase()\n    usagecode = usagecode.replace /f|p|x/g,   ''\n    usagecode = usagecode.replace /k|h|m|t/g, 't'\n    usagecode = usagecode.replace /t+/g,      't'\n    #.......................................................................................................\n    if usagecode.length > 0\n      send [ glyph, usagecode, ]\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_rank = ( db ) ->\n  return $async ( [ glyph, usagecode, ], done ) =>\n    prefix  = [ 'spo', glyph, 'rank/cjt', ]\n    query   = { prefix: prefix, fallback: null, }\n    HOLLERITH.read_one_phrase db, query, ( error, phrase ) =>\n      return done.error error if error?\n      return done() if phrase is null\n      [ _, _, _, rank, ]  = phrase\n      done [ glyph, usagecode, rank, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_sample = ( ratio ) ->\n  collection = {}\n  return $ ( fields, send, end ) =>\n    #.......................................................................................................\n    if fields?\n      [ glyph, usagecode, rank, ] = fields\n      ( collection[ usagecode ]?= [] ).push [ glyph, rank, ]\n      send [ glyph, usagecode, ]\n    #.......................................................................................................\n    if end?\n      for usagecode, glyphs_and_ranks of collection\n        glyphs_and_ranks.sort ( a, b ) ->\n          return +1 if a[ 1 ] > b[ 1 ]\n          return -1 if a[ 1 ] < b[ 1 ]\n          return  0\n        glyphs    = ( glyph for [ glyph, rank, ] in glyphs_and_ranks )\n        last_idx  = Math.floor glyphs.length * ratio + 0.5\n        urge usagecode, glyphs.length, glyphs[ ... last_idx ].join ''\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$count = ->\n  counts = {}\n  return $ ( fields, send, end ) =>\n    #.......................................................................................................\n    if fields?\n      [ glyph, usagecode, ] = fields\n      counts[ usagecode ]   = ( counts[ usagecode ] ? 0 ) + 1\n    #.......................................................................................................\n    if end?\n      send counts\n      end()\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$report = ->\n  counts  = {}\n  #.........................................................................................................\n  show = ( counts, title ) ->\n    counts = ( [ region, count, ] for region, count of counts )\n    counts.sort ( a, b ) ->\n      return +1 if a[ 0 ] > b[ 0 ]\n      return -1 if a[ 0 ] < b[ 0 ]\n      return  0\n    help title\n    for [ region, count, ] in counts\n      help ( TEXT.flush_left region, 12, '.' ) + \\\n           ( TEXT.flush_right count, 10, '.' ), \"glyphs\"\n  #.........................................................................................................\n  return $ ( counts, send ) =>\n    sum   = 0\n    sum  += count for _, count of counts\n    show counts, \"individual glyph counts:\"\n    for region_0, count_0 of counts\n      continue if region_0.length is 1\n      for region_1 in region_0\n        counts[ region_1 ] += count_0\n    delete counts[ key ] for key of counts when key.length > 1\n    show counts, \"accumulated glyph counts:\"\n    help \"altogether, #{sum} glyphs have a regional tag\"\n    warn \"glyphs tagged only as Facultative, Positional or eXtra have been excluded from these counts\"\n    send counts\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$report_v2 = ->\n  counts  = {}\n  #.........................................................................................................\n  show = ( title, counts ) ->\n    counts = ( [ region, count, ] for region, count of counts )\n    counts.sort ( a, b ) ->\n      return +1 if a[ 0 ] > b[ 0 ]\n      return -1 if a[ 0 ] < b[ 0 ]\n      return  0\n    help title\n    for [ region, count, ] in counts\n      help ( TEXT.flush_left region, 12, '.' ) + \\\n           ( TEXT.flush_right count, 10, '.' ), \"glyphs\"\n  #.........................................................................................................\n  return $ ( counts, send ) =>\n    sum     = 0\n    sum    += count for _, count of counts\n    totals  = {}\n    show \"individual glyph counts:\", counts\n    for sub_regions, sub_count of counts\n      for sub_region in sub_regions\n        target = switch sub_region\n          when 'c' then 'â’¸'\n          when 'j' then 'â’¿'\n          when 't' then 'â“‰'\n        totals[ target ] = ( totals[ target ] ? 0 ) + sub_count\n    show \"accumulated glyph counts:\", totals\n    help \"altogether, #{sum} glyphs have a regional tag\"\n    warn \"glyphs tagged only as Facultative, Positional or eXtra have been excluded from these counts\"\n    send counts\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@show_statistics = ->\n  home            = join __dirname, '../../jizura-datasources'\n  db_route        = join home, 'data/leveldb-v2'\n  db              = HOLLERITH.new_db db_route\n  prefix          = [ 'pos', 'usagecode/full', ]\n  ### TAINT star shouldn't be necessary here ###\n  query           = { prefix, star: '*' }\n  input           = HOLLERITH.create_phrasestream db, query\n  #.........................................................................................................\n  input\n    .pipe @$simplify_usagecode()\n    .pipe @$add_rank db\n    .pipe @$collect_sample 0.07\n    .pipe @$count()\n    .pipe D.$show()\n    .pipe @$report_v2()\n\n\n############################################################################################################\nunless module.parent?\n  @show_statistics()\n"]}