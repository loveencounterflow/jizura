{"version":3,"sources":["show-repeated-factors.coffee"],"names":[],"mappings":"AAEA;AAAA,MAAA;;EAAA,QAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,MAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,QAAQ,CAAC;;EAErC,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAE5B,OAAA,GAA4B,OAAA,CAAQ,oBAAR;;EAC5B,IAAA,GAA4B,OAAO,CAAC;;EACpC,KAAA,GAA4B,OAAO,CAAC;;EACpC,UAAA,GAA4B,OAAO,CAAC;;EACpC,WAAA,GAA4B,OAAO,CAAC;;EACpC,kBAAA,GAA4B,OAAO,CAAC;;EACpC,KAAA,GAA4B,OAAO,CAAC;;EAOpC,CAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,GAA4B,CAAC,CAAC,KAAK,CAAC,IAAR,CAAa,CAAb;;EAC5B,MAAA,GAA4B,CAAC,CAAC,WAAW,CAAC,IAAd,CAAmB,CAAnB;;EAC5B,KAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAG5B,SAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,2BAAR;;EAG5B,IAAC,CAAA,qBAAD,GAAyB,SAAE,CAAF;AAEvB,QAAA;IAAA,CAAC,CAAC,KAAF,GAAgB;MAAE,MAAA,EAAQ,CAAE,KAAF,CAAV;;IAChB,CAAC,CAAC,QAAF,GAAgB,IAAA,CAAK,SAAL,EAAgB,0CAAhB;IAChB,CAAC,CAAC,EAAF,GAAgB,SAAS,CAAC,MAAV,CAAiB,CAAC,CAAC,QAAnB,EAA6B;MAAA,MAAA,EAAQ,KAAR;KAA7B;IAChB,IAAA,CAAK,cAAA,GAAe,CAAC,CAAC,EAAI,CAAA,OAAA,CAAW,CAAA,UAAA,CAArC;IACA,KAAA,GAAgB,CAAE,SAAS,CAAC,mBAAV,CAA8B,CAAC,CAAC,EAAhC,EAAoC,CAAC,CAAC,KAAtC,CAAF,CAA+C,CAAC,IAAhD,CAAqD,UAAA,CAAW,CAAX,CAArD;AAEhB,WAAO;EARgB;;EAWzB,oBAAA,GAAuB,CAAA,SAAA,KAAA;WAAA,SAAE,CAAF;AACrB,aAAO,CAAA,CAAE,SAAE,MAAF,EAAU,IAAV;AACP,YAAA;QAAE,aAAF,EAAK,iBAAL,EAAY,eAAZ,EAAiB;QACjB,IAAe,KAAK,CAAC,cAAN,CAAqB,KAArB,CAAf;iBAAA,IAAA,CAAK,MAAL,EAAA;;MAFO,CAAF;IADc;EAAA,CAAA,CAAA,CAAA,IAAA;;EAMvB,mBAAA,GAAsB,CAAA,SAAA,KAAA;WAAA,SAAE,CAAF;AACpB,UAAA;MAAA,SAAA,GAAe,CAAC,CAAC,MAAF,KAAY,SAAf,GAA8B,mBAA9B,GAAuD;AACnE,aAAO,CAAA,CAAE,SAAE,MAAF,EAAU,IAAV;AACP,YAAA;QAAE,aAAF,EAAK,iBAAL,EAAY,eAAZ,EAAiB;QACjB,IAAwB,GAAA,KAAO,SAA/B;iBAAA,IAAA,CAAK,CAAE,KAAF,EAAS,GAAT,CAAL,EAAA;;MAFO,CAAF;IAFa;EAAA,CAAA,CAAA,CAAA,IAAA;;EAOtB,qBAAA,GAAwB,CAAA,SAAA,KAAA;WAAA,SAAE,CAAF;AACtB,aAAO,CAAA,CAAE,SAAE,MAAF,EAAU,IAAV;AACP,YAAA;QAAE,iBAAF,EAAS;QACT,IAAiD,CAAC,CAAC,MAAF,KAAY,SAA7D;UAAA,UAAA,GAAe,KAAK,CAAC,IAAN,CAAW,UAAU,CAAC,IAAX,CAAA,CAAX,EAAf;;QACA,IAAG,+EAAH;UACE,IAAG,CAAC,CAAC,OAAF,KAAa,SAAhB;YACE,UAAA,GAAa,UAAU,CAAC,IAAX,CAAgB,EAAhB,EADf;WAAA,MAAA;YAGE,UAAA,GAAa;;AAAE;mBAAA,4CAAA;;6BAAE,KAAK,CAAC,OAAN,CAAc,SAAd;AAAF;;gBAAF,CAA2D,CAAC,IAA5D,CAAiE,EAAjE,EAHf;;UAIA,KAAA,GAAQ,KAAK,CAAC,OAAN,CAAc,KAAd;UACR,IAAA,GAAQ,KAAK,CAAC,OAAN,CAAc,KAAd;UACR,GAAA,GAAQ;;AAAE;iBAAA,qDAAA;;2BAAE,KAAK,CAAC,OAAN,CAAc,SAAd;AAAF;;cAAF,CAAoE,CAAC,IAArE,CAA0E,EAA1E;iBACR,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAa,KAAb,EAAoB,UAApB,CAAL,EARF;;MAHO,CAAF;IADe;EAAA,CAAA,CAAA,CAAA,IAAA;;EAexB,UAAA,GAAa,CAAA,SAAA,KAAA;WAAA,SAAE,CAAF;AACX,UAAA;MAAA,KAAA,GAAQ;AACR,aAAO,CAAA,CAAE,SAAE,MAAF,EAAU,IAAV,EAAgB,GAAhB;AACP,YAAA;QAAA,IAAG,cAAH;UACI,eAAF,EAAO,gBAAP,EAAa,iBAAb,EAAoB;UACpB,sBAAE,KAAO,CAAA,GAAA,IAAP,KAAO,CAAA,GAAA,IAAQ,EAAjB,CAAqB,CAAC,IAAtB,CAA2B,CAAE,IAAF,EAAQ,KAAR,EAAe,UAAf,CAA3B,EAFF;;QAGA,IAAG,WAAH;AACE,eAAA,YAAA;;AACE,iBAAA,mDAAA;gCAAM,eAAM,gBAAO;cACjB,IAAsB,GAAA,KAAO,CAA7B;gBAAA,GAAA,GAAM,SAAN;;cACA,IAAA,CAAK,CAAE,GAAF,EAAO,IAAP,EAAa,KAAb,EAAoB,UAApB,CAAL;AAFF;AADF;iBAIA,GAAA,CAAA,EALF;;MAJO,CAAF;IAFI;EAAA,CAAA,CAAA,CAAA,IAAA;;EAcb,KAAA,GAAQ,CAAA,SAAA,KAAA;WAAA,SAAE,CAAF;AACN,aAAO,CAAC,CAAC,QAAF,CAAW,SAAE,MAAF;eAChB,IAAA,CAAK,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAL;MADgB,CAAX;IADD;EAAA,CAAA,CAAA,CAAA,IAAA;;EAQR,UAAA,GAAa,CAAA,SAAA,KAAA;WAAA,SAAE,CAAF;AACX,aAAO,CAAC,CAAC,OAAF,CAAU;QACf,oBAAA,CAA4B,CAA5B,CADe,EAEf,mBAAA,CAA4B,CAA5B,CAFe,EAGf,qBAAA,CAA4B,CAA5B,CAHe,EAIf,UAAA,CAA4B,CAA5B,CAJe,EAKf,KAAA,CAA4B,CAA5B,CALe,EAMf,CAAC,CAAC,OAAF,CAAU,SAAA;UAAG,IAAkB,iBAAlB;mBAAA,CAAC,CAAC,OAAF,CAAU,IAAV,EAAA;;QAAH,CAAV,CANe;OAAV;IADI;EAAA,CAAA,CAAA,CAAA,IAAA;AAtGb","file":"show-repeated-factors.js","sourceRoot":"/source/","sourcesContent":["\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/show-repeated-factors'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\n# BYTEWISE                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\nASYNC                     = require 'async'\nXNCHR                     = require './XNCHR'\n#...........................................................................................................\n# new_db                    = require 'level'\nHOLLERITH                 = require 'hollerith'\nLRSL                      = require 'longest-repeating-sublist'\n\n#-----------------------------------------------------------------------------------------------------------\n@show_repeated_factors = ( S ) ->\n  #.........................................................................................................\n  S.query       = { prefix: [ 'spo', ], }\n  S.db_route    = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  S.db          = HOLLERITH.new_db S.db_route, create: no\n  help \"using DB at #{S.db[ '%self' ][ 'location' ]}\"\n  input         = ( HOLLERITH.create_phrasestream S.db, S.query ).pipe $transform S\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$filter_inner_glyphs = ( S ) =>\n  return $ ( phrase, send ) =>\n    [ _, glyph, prd, obj, ] = phrase\n    send phrase if XNCHR.is_inner_glyph glyph\n\n#-----------------------------------------------------------------------------------------------------------\n$filter_ic0_phrases = ( S ) =>\n  predicate = if S.source is 'lineups' then 'guide/lineup/uchr' else 'formula/ic0'\n  return $ ( phrase, send ) =>\n    [ _, glyph, prd, obj, ] = phrase\n    send [ glyph, obj, ] if prd is predicate\n\n#-----------------------------------------------------------------------------------------------------------\n$look_for_repetitions = ( S ) =>\n  return $ ( phrase, send ) =>\n    [ glyph, components, ] = phrase\n    components = ( Array.from components.trim() ) if S.source is 'lineups'\n    if ( repeated_components = LRSL.find_longest_repeating_sublist components )?\n      if S.lineups is 'lineups'\n        components = components.join ''\n      else\n        components = ( ( XNCHR.as_uchr component ) for component in components ).join ''\n      glyph = XNCHR.as_uchr glyph\n      fncr  = XNCHR.as_fncr glyph\n      key   = ( ( XNCHR.as_uchr component ) for component in repeated_components ).join ''\n      send [ key, fncr, glyph, components, ]\n\n#-----------------------------------------------------------------------------------------------------------\n$aggregate = ( S ) =>\n  cache = {}\n  return $ ( phrase, send, end ) =>\n    if phrase?\n      [ key, fncr, glyph, components, ] = phrase\n      ( cache[ key ]?= [] ).push [ fncr, glyph, components, ]\n    if end?\n      for key, entry of cache\n        for [ fncr, glyph, components, ], idx in entry\n          key = '\\u3000' unless idx is 0\n          send [ key, fncr, glyph, components, ]\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n$show = ( S ) =>\n  return D.$observe ( phrase ) =>\n    echo phrase.join '\\t'\n    # [ key, fncr, glyph, components, ] = phrase\n    # echo \"#{key}\\t#{glyph}\\t#{components}\"\n\n\n#-----------------------------------------------------------------------------------------------------------\n$transform = ( S ) =>\n  return D.combine [\n    $filter_inner_glyphs        S\n    $filter_ic0_phrases         S\n    $look_for_repetitions       S\n    $aggregate                  S\n    $show                       S\n    D.$on_end => S.handler null if S.handler?\n    ]\n\n\n"]}