{"version":3,"sources":["show-repeated-factors.coffee"],"names":[],"mappings":"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","file":"show-repeated-factors.js","sourceRoot":"/source/","sourcesContent":["\n############################################################################################################\nnjs_path                  = require 'path'\nnjs_fs                    = require 'fs'\njoin                      = njs_path.join\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'JIZURA/show-repeated-factors'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nsuspend                   = require 'coffeenode-suspend'\nstep                      = suspend.step\nafter                     = suspend.after\neventually                = suspend.eventually\nimmediately               = suspend.immediately\nrepeat_immediately        = suspend.repeat_immediately\nevery                     = suspend.every\n#...........................................................................................................\n# BYTEWISE                  = require 'bytewise'\n# through                   = require 'through2'\n# LevelBatch                = require 'level-batch-stream'\n# BatchStream               = require 'batch-stream'\n# parallel                  = require 'concurrent-writable'\nD                         = require 'pipedreams'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\nASYNC                     = require 'async'\nXNCHR                     = require './XNCHR'\n#...........................................................................................................\n# new_db                    = require 'level'\nHOLLERITH                 = require 'hollerith'\nLRSL                      = require 'longest-repeating-sublist'\n\n#-----------------------------------------------------------------------------------------------------------\n@show_repeated_factors = ( S ) ->\n  #.........................................................................................................\n  S.query             = { prefix: [ 'spo', ], }\n  S.db_route          = join __dirname, '../../jizura-datasources/data/leveldb-v2'\n  S.db                = HOLLERITH.new_db S.db_route, create: no\n  S.prd_for_lineups   = 'guide/lineup/uchr'\n  S.prd_for_formulas  = 'formula/ic0'\n  help \"using DB at #{S.db[ '%self' ][ 'location' ]}\"\n  input               = ( HOLLERITH.create_phrasestream S.db, S.query ).pipe $transform S\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$filter_inner_glyphs = ( S ) =>\n  return $ ( phrase, send ) =>\n    [ _, glyph, prd, obj, ] = phrase\n    send phrase if XNCHR.is_inner_glyph glyph\n\n#-----------------------------------------------------------------------------------------------------------\n$filter_relevant_phrases = ( S ) =>\n  prds = []\n  prds.push S.prd_for_lineups  if S.lineups\n  prds.push S.prd_for_formulas if S.formulas\n  return $ ( phrase, send ) =>\n    [ _, glyph, prd, obj, ] = phrase\n    send [ glyph, prd, obj, ] if prd in prds\n\n#-----------------------------------------------------------------------------------------------------------\n$show_progress = ( S ) =>\n  count = 0\n  return $ ( phrase, send ) =>\n    send phrase\n    info count if ( count += +1 ) % 1000 is 0\n\n#-----------------------------------------------------------------------------------------------------------\n$look_for_repetitions = ( S ) =>\n  return $ ( phrase, send ) =>\n    [ glyph, prd, components, ] = phrase\n    #.......................................................................................................\n    switch prd\n      when S.prd_for_lineups  then components = Array.from components.trim()\n      when S.prd_for_formulas then null\n      else throw new Error \"unknown predicate #{rpr prd}\"\n    #.......................................................................................................\n    if ( repeated_components = LRSL.find_longest_repeating_sublist components )?\n      #.....................................................................................................\n      switch prd\n        when S.prd_for_lineups\n          sigil      = 'ℓ'\n        when S.prd_for_formulas\n          sigil      = 'f'\n          components = ( XNCHR.as_uchr component for component in components )\n        else throw new Error \"unknown predicate #{rpr prd}\"\n      #.....................................................................................................\n      components  = components.join ''\n      glyph       = XNCHR.as_uchr glyph\n      fncr        = XNCHR.as_fncr glyph\n      key         = ( ( XNCHR.as_uchr component ) for component in repeated_components ).join ''\n      send [ key, fncr, glyph, sigil, components, ]\n\n#-----------------------------------------------------------------------------------------------------------\n$aggregate = ( S ) =>\n  cache = {}\n  return $ ( phrase, send, end ) =>\n    #.......................................................................................................\n    if phrase?\n      [ key, fncr, glyph, sigil, components, ] = phrase\n      entry     = [ fncr, glyph, components, ].join '\\t'\n      target_0  = cache[ key ]?= {}\n      target_1  = target_0[ entry ]?= []\n      target_1.push sigil unless sigil in target_1\n      debug '©77388', glyph, entry if glyph in '㢸㢽㣃䰜䰞弻弼粥鬻𢏺𢐁𢐆㵉'\n      # if glyph is '桓'\n      #   # debug '0921', cache\n      #   # process.exit()\n      #   end = send.end\n    #.......................................................................................................\n    if end?\n      for key, entries of cache\n        idx = -1\n        for entry, sigils of entries\n          idx += +1\n          key = '\\u3000' unless idx is 0\n          line = \"#{entry} #{sigils.join ''}\"\n          send [ key, line, ]\n      process.exit()\n      end()\n\n#-----------------------------------------------------------------------------------------------------------\n$show = ( S ) =>\n  return D.$observe ( phrase ) =>\n    echo phrase.join '\\t'\n    # [ key, fncr, glyph, components, ] = phrase\n    # echo \"#{key}\\t#{glyph}\\t#{components}\"\n\n\n#-----------------------------------------------------------------------------------------------------------\n$transform = ( S ) =>\n  return D.combine [\n    $filter_inner_glyphs        S\n    $filter_relevant_phrases    S\n    $show_progress              S\n    $look_for_repetitions       S\n    $aggregate                  S\n    $show                       S\n    D.$on_end => S.handler null if S.handler?\n    ]\n\n\n"]}