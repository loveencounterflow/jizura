(function() {
  var $, $async, ASYNC, CACHE, CND, D, HELPERS, OPTIONS, SEMVER, TEXLIVEPACKAGEINFO, TYPO, alert, badge, debug, echo, help, info, log, njs_fs, njs_path, options_route, ref, rpr, step, suspend, urge, warn, whisper, ƒ;

  njs_path = require('path');

  njs_fs = require('fs');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'JIZURA/MKTS-interim';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  D = require('pipedreams');

  $ = D.remit.bind(D);

  $async = D.remit_async.bind(D);

  ASYNC = require('async');

  ƒ = CND.format_number.bind(CND);

  HELPERS = require('./HELPERS');

  TYPO = HELPERS['TYPO'];

  TEXLIVEPACKAGEINFO = require('./TEXLIVEPACKAGEINFO');

  options_route = '../options.coffee';

  ref = require('./OPTIONS'), CACHE = ref.CACHE, OPTIONS = ref.OPTIONS;

  SEMVER = require('semver');

  this.compile_options = function() {
    var cache_locator, cache_route, options_home, options_locator;
    options_locator = require.resolve(njs_path.resolve(__dirname, options_route));
    options_home = njs_path.dirname(options_locator);
    this.options = OPTIONS.from_locator(options_locator);
    this.options['home'] = options_home;
    this.options['locator'] = options_locator;
    cache_route = this.options['cache']['route'];
    this.options['cache']['locator'] = cache_locator = njs_path.resolve(options_home, cache_route);
    this.options['xelatex-command'] = njs_path.resolve(options_home, this.options['xelatex-command']);
    if (!njs_fs.existsSync(cache_locator)) {
      this.options['cache']['%self'] = {};
      CACHE.save(options);
    }
    this.options['cache']['%self'] = require(cache_locator);
    return CACHE.update(options);
  };

  this.compile_options();

  this.write_mkts_master = function(layout_info, handler) {
    return step((function(_this) {
      return function*(resume) {
        var content_locator, defs, filename, fonts_home, fontspec_version, home, i, len, lines, main_font_name, master_locator, name, newcommands, ref1, ref2, styles, texname, text, use_new_syntax, value, write;
        lines = [];
        write = lines.push.bind(lines);
        master_locator = layout_info['master-locator'];
        content_locator = layout_info['content-locator'];
        help("writing " + master_locator);
        write("");
        write("% " + master_locator);
        write("% do not edit this file");
        write("% generated from " + _this.options['locator']);
        write("");
        write("\\documentclass[a4paper,twoside]{book}");
        write("");
        defs = _this.options['defs'];
        write("");
        write("% DEFS");
        if (defs != null) {
          for (name in defs) {
            value = defs[name];
            write("\\def\\" + name + "{" + value + "}");
          }
        }
        newcommands = _this.options['newcommands'];
        write("");
        write("% NEWCOMMANDS");
        if (newcommands != null) {
          for (name in newcommands) {
            value = newcommands[name];
            write("\\newcommand{\\" + name + "}{" + value + "%\n}");
          }
        }
        write("");
        write("% PACKAGES");
        write("\\usepackage{\\mktsPathsMktsHome/mkts2015-main}");
        write("\\usepackage{\\mktsPathsMktsHome/mkts2015-fonts}");
        write("\\usepackage{\\mktsPathsMktsHome/mkts2015-article}");
        fontspec_version = (yield TEXLIVEPACKAGEINFO.read_texlive_package_version(_this.options, 'fontspec', resume));
        use_new_syntax = SEMVER.satisfies(fontspec_version, '>=2.4.0');
        fonts_home = _this.options['fonts']['home'];
        write("");
        write("% FONTS");
        write("% assuming fontspec@" + fontspec_version);
        write("\\usepackage{fontspec}");
        ref1 = _this.options['fonts']['files'];
        for (i = 0, len = ref1.length; i < len; i++) {
          ref2 = ref1[i], texname = ref2.texname, home = ref2.home, filename = ref2.filename;
          if (home == null) {
            home = fonts_home;
          }
          if (use_new_syntax) {

            /* TAINT should properly escape values */
            write("\\newfontface\\" + texname + "{" + filename + "}[Path=" + home + "/]");
          } else {
            write("\\newfontface\\" + texname + "[Path=" + home + "/]{" + filename + "}");
          }
        }
        write("");
        write("");
        write("% STYLES");
        if ((styles = _this.options['styles']) != null) {
          for (name in styles) {
            value = styles[name];
            write("\\newcommand{\\" + name + "}{%\n" + value + "%\n}");
          }
        }
        main_font_name = _this.options['fonts']['main'];
        if (main_font_name == null) {
          throw new Error("need entry options/fonts/name");
        }
        write("");
        write("% CONTENT");
        write("\\begin{document}" + main_font_name);
        write("");
        write("\\input{" + content_locator + "}");
        write("");
        write("\\end{document}");
        text = lines.join('\n');
        whisper(text);
        return njs_fs.writeFile(master_locator, text, handler);
      };
    })(this));
  };

  this.pdf_from_md = function(source_route, handler) {
    return step((function(_this) {
      return function*(resume) {
        var content_locator, input, layout_info, source_locator, state, tex_output, text;
        if (handler == null) {
          handler = function() {};
        }
        layout_info = HELPERS.new_layout_info(_this.options, source_route);
        (yield _this.write_mkts_master(layout_info, resume));
        source_locator = layout_info['source-locator'];
        content_locator = layout_info['content-locator'];
        tex_output = njs_fs.createWriteStream(content_locator);

        /* TAINT should read MD source stream */
        text = njs_fs.readFileSync(source_locator, {
          encoding: 'utf-8'
        });
        state = {
          within_multicol: false,
          within_keeplines: false,
          within_pre: false,
          within_single_column: false,
          layout_info: layout_info
        };
        tex_output.on('close', function() {
          var tasks;
          tasks = [];
          tasks.push(function(done) {
            return HELPERS.write_pdf(layout_info, done);
          });
          return ASYNC.parallel(tasks, handler);
        });
        input = TYPO.create_mdreadstream(text);
        input.pipe(TYPO.$fix_typography_for_tex()).pipe(TYPO.$show_mktsmd_events()).pipe(_this.MKTX.COMMAND.$new_page(state)).pipe(_this.MKTX.REGION.$keep_lines(state)).pipe(_this.MKTX.BLOCK.$heading(state)).pipe(_this.MKTX.BLOCK.$paragraph(state)).pipe(_this.MKTX.BLOCK.$hr(state)).pipe(_this.MKTX.INLINE.$code(state)).pipe(_this.MKTX.INLINE.$em_and_strong(state)).pipe(_this.$filter_tex()).pipe(tex_output);
        return input.resume();
      };
    })(this));
  };

  this.MKTX = {
    COMMAND: {},
    REGION: {},
    BLOCK: {},
    INLINE: {}
  };

  this.MKTX.COMMAND.$new_page = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        if (!TYPO.isa(event, '∆', 'new-page')) {
          return send(event);
        }
        return send(['tex', "\\null\\newpage{}"]);
      });
    };
  })(this);


  /* Pending */

  this.MKTX.REGION.$keep_lines = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        var meta, name, text, type;
        if (TYPO.isa(event, '.', 'text')) {

          /* TAINT differences between pre and keep-lines? */
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (S.within_pre) {
            text = text.replace(/\u0020/g, '\u00a0');
          }
          return send([type, name, text, meta]);
        } else if (TYPO.isa(event, ['{', '}'], 'keep-lines')) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (type === '{') {
            S.within_pre = true;
            S.within_keeplines = true;
            return send(['tex', "\\begingroup\\obeyalllines{}"]);
          } else {
            send(['tex', "\\endgroup{}"]);
            S.within_keeplines = false;
            return S.within_pre = false;
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.BLOCK.$heading = (function(_this) {
    return function(S) {
      var restart_multicols;
      restart_multicols = false;
      return $(function(event, send) {
        var meta, name, text, type;
        if (TYPO.isa(event, ['[', ']'], ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (type === '[') {

            /* TAINT Pending
            if S.within_multicol and name in [ 'h1', 'h2', ]
              send [ 'tex', '\\end{multicols}' ]
              S.within_multicol = no
              restart_multicols = yes
             */
            send(['tex', "\n"]);
            switch (name) {
              case 'h1':
                return send(['tex', "\\chapter{"]);
              case 'h2':
                return send(['tex', "\\section{"]);
              default:
                return send(['tex', "\\subsection{"]);
            }
          } else {

            /* Placing the closing brace on a new line seems to improve line breaking */
            send(['tex', "\n"]);
            send(['tex', "}"]);
            return send(['tex', "\n"]);

            /* TAINT Pending
            if restart_multicols
              send [ 'tex', '\\begin{multicols}{2}\n' ]
              S.within_multicol = yes
             */
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.BLOCK.$paragraph = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        var meta, name, text, type;
        if (TYPO.isa(event, ['[', ']'], 'p')) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (type === '[') {
            return send(['text', '\n\n']);
          } else {
            return send(['tex', '\\par']);
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.BLOCK.$hr = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        var chr, meta, name, text, type;
        if (TYPO.isa(event, '.', 'hr')) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          switch (chr = text[0]) {
            case '-':
              return send(['text', '\n--------------\n']);
            case '*':
              return send(['text', '\n**************\n']);
            default:
              return warn("ignored hr markup " + (rpr(text)));
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.INLINE.$code = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        var meta, name, text, type;
        if (TYPO.isa(event, ['(', ')'], 'code')) {
          type = event[0], name = event[1], text = event[2], meta = event[3];

          /* TAINT should use proper command */
          if (type === '(') {
            return send(['tex', "{\\mktsFontfileSourcecodeproregular{}"]);
          } else {
            return send(['tex', "}"]);
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.MKTX.INLINE.$em_and_strong = (function(_this) {
    return function(S) {
      return $(function(event, send) {
        var meta, name, text, type;
        if (TYPO.isa(event, ['(', ')'], ['em', 'strong'])) {
          type = event[0], name = event[1], text = event[2], meta = event[3];
          if (type === '(') {
            if (name === 'em') {
              return send(['tex', '\\textit{']);
            } else {
              return send(['tex', '\\bold{']);
            }
          } else {
            return send(['tex', "}"]);
          }
        } else {
          return send(event);
        }
      });
    };
  })(this);

  this.$filter_tex = function() {
    return $((function(_this) {
      return function(event, send) {
        var ref1;
        if ((ref1 = event[0]) === 'tex' || ref1 === 'text') {
          return send(event[1]);
        } else if (TYPO.isa(event, '.', 'text')) {
          return send(event[2]);
        } else {
          return warn("unhandled event: " + (JSON.stringify(event)));
        }
      };
    })(this));
  };

  if (module.parent == null) {
    this.pdf_from_md('texts/demo');
  }

}).call(this);

//# sourceMappingURL=../sourcemaps/mkts-typesetter-interim.js.map